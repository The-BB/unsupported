--- a/lib/Driver/ToolChains/Linux.cpp
+++ b/lib/Driver/ToolChains/Linux.cpp
@@ -129,7 +129,7 @@ std::string Linux::getMultiarchTriple(co
   case llvm::Triple::mips64: {
     std::string MT = std::string(IsMipsR6 ? "mipsisa64r6" : "mips64") +
                      "-linux-" + (IsMipsN32Abi ? "gnuabin32" : "gnuabi64");
-    if (D.getVFS().exists(concat(SysRoot, "/lib", MT)))
+    if (D.getVFS().exists(concat(SysRoot, "/opt/lib", MT)))
       return MT;
     if (D.getVFS().exists(concat(SysRoot, "/lib/mips64-linux-gnu")))
       return "mips64-linux-gnu";
@@ -301,8 +301,8 @@ Linux::Linux(const Driver &D, const llvm
   }
   Generic_GCC::AddMultilibPaths(D, SysRoot, OSLibDir, MultiarchTriple, Paths);
 
-  addPathIfExists(D, concat(SysRoot, "/lib", MultiarchTriple), Paths);
-  addPathIfExists(D, concat(SysRoot, "/lib/..", OSLibDir), Paths);
+  addPathIfExists(D, concat(SysRoot, "/opt/lib", MultiarchTriple), Paths);
+  addPathIfExists(D, concat(SysRoot, "/opt/lib/..", OSLibDir), Paths);
 
   if (IsAndroid) {
     // Android sysroots contain a library directory for each supported OS
@@ -315,7 +315,7 @@ Linux::Linux(const Driver &D, const llvm
         Paths);
   }
 
-  addPathIfExists(D, concat(SysRoot, "/usr/lib", MultiarchTriple), Paths);
+  addPathIfExists(D, concat(SysRoot, "/opt/usr/lib", MultiarchTriple), Paths);
   // 64-bit OpenEmbedded sysroots may not have a /usr/lib dir. So they cannot
   // find /usr/lib64 as it is referenced as /usr/lib/../lib64. So we handle
   // this here.
@@ -332,8 +332,8 @@ Linux::Linux(const Driver &D, const llvm
 
   Generic_GCC::AddMultiarchPaths(D, SysRoot, OSLibDir, Paths);
 
-  addPathIfExists(D, concat(SysRoot, "/lib"), Paths);
-  addPathIfExists(D, concat(SysRoot, "/usr/lib"), Paths);
+  addPathIfExists(D, concat(SysRoot, "/opt/lib"), Paths);
+  addPathIfExists(D, concat(SysRoot, "/opt/usr/lib"), Paths);
 }
 
 ToolChain::RuntimeLibType Linux::GetDefaultRuntimeLibType() const {
@@ -469,7 +469,7 @@ std::string Linux::getDynamicLinker(cons
         Triple.getSubArch() == llvm::Triple::PPCSubArch_spe)
       ArchName = "powerpc-sf";
 
-    return "/lib/ld-musl-" + ArchName + ".so.1";
+    return "/opt/lib/ld-musl-" + ArchName + ".so.1";
   }
 
   std::string LibDir;
@@ -604,8 +604,8 @@ std::string Linux::getDynamicLinker(cons
   if (Distro == Distro::Exherbo &&
       (Triple.getVendor() == llvm::Triple::UnknownVendor ||
        Triple.getVendor() == llvm::Triple::PC))
-    return "/usr/" + Triple.str() + "/lib/" + Loader;
-  return "/" + LibDir + "/" + Loader;
+    return "/opt/usr/" + Triple.str() + "/lib/" + Loader;
+  return "/opt/" + LibDir + "/" + Loader;
 }
 
 void Linux::AddClangSystemIncludeArgs(const ArgList &DriverArgs,
@@ -630,7 +630,7 @@ void Linux::AddClangSystemIncludeArgs(co
     return;
 
   // LOCAL_INCLUDE_DIR
-  addSystemInclude(DriverArgs, CC1Args, concat(SysRoot, "/usr/local/include"));
+  addSystemInclude(DriverArgs, CC1Args, concat(SysRoot, "/opt/include"));
   // TOOL_INCLUDE_DIR
   AddMultilibIncludeArgs(DriverArgs, CC1Args);
 
@@ -651,10 +651,10 @@ void Linux::AddClangSystemIncludeArgs(co
   // /usr/include.
   std::string MultiarchIncludeDir = getMultiarchTriple(D, getTriple(), SysRoot);
   if (!MultiarchIncludeDir.empty() &&
-      D.getVFS().exists(concat(SysRoot, "/usr/include", MultiarchIncludeDir)))
+      D.getVFS().exists(concat(SysRoot, "/opt/include", MultiarchIncludeDir)))
     addExternCSystemInclude(
         DriverArgs, CC1Args,
-        concat(SysRoot, "/usr/include", MultiarchIncludeDir));
+        concat(SysRoot, "/opt/include", MultiarchIncludeDir));
 
   if (getTriple().getOS() == llvm::Triple::RTEMS)
     return;
@@ -662,9 +662,9 @@ void Linux::AddClangSystemIncludeArgs(co
   // Add an include of '/include' directly. This isn't provided by default by
   // system GCCs, but is often used with cross-compiling GCCs, and harmless to
   // add even when Clang is acting as-if it were a system compiler.
-  addExternCSystemInclude(DriverArgs, CC1Args, concat(SysRoot, "/include"));
+  addExternCSystemInclude(DriverArgs, CC1Args, concat(SysRoot, "/opt/include"));
 
-  addExternCSystemInclude(DriverArgs, CC1Args, concat(SysRoot, "/usr/include"));
+  addExternCSystemInclude(DriverArgs, CC1Args, concat(SysRoot, "/opt/include"));
 
   if (!DriverArgs.hasArg(options::OPT_nobuiltininc) && getTriple().isMusl())
     addSystemInclude(DriverArgs, CC1Args, ResourceDirInclude);
--- a/lib/Lex/InitHeaderSearch.cpp
+++ b/lib/Lex/InitHeaderSearch.cpp
@@ -57,7 +57,7 @@ class InitHeaderSearch {
 public:
   InitHeaderSearch(HeaderSearch &HS, bool verbose, StringRef sysroot)
       : Headers(HS), Verbose(verbose), IncludeSysroot(std::string(sysroot)),
-        HasSysroot(!(sysroot.empty() || sysroot == "/")) {}
+        HasSysroot(!(sysroot.empty() || sysroot == "/opt/")) {}
 
   /// Add the specified path to the specified group list, prefixing the sysroot
   /// if used.
@@ -147,8 +147,8 @@ bool InitHeaderSearch::AddUnmappedPath(c
   StringRef MappedPathStr = Path.toStringRef(MappedPathStorage);
 
   // If use system headers while cross-compiling, emit the warning.
-  if (HasSysroot && (MappedPathStr.startswith("/usr/include") ||
-                     MappedPathStr.startswith("/usr/local/include"))) {
+  if (HasSysroot && (MappedPathStr.startswith("/opt/include") ||
+                     MappedPathStr.startswith("/opt/usr/include"))) {
     Headers.getDiags().Report(diag::warn_poison_system_directories)
         << MappedPathStr;
   }
@@ -441,7 +441,7 @@ void InitHeaderSearch::AddDefaultInclude
   if (Lang.CPlusPlus && !Lang.AsmPreprocessor &&
       HSOpts.UseStandardCXXIncludes && HSOpts.UseStandardSystemIncludes) {
     if (HSOpts.UseLibcxx) {
-      AddPath("/usr/include/c++/v1", CXXSystem, false);
+      AddPath("/opt/include/c++/v1", CXXSystem, false);
     } else {
       AddDefaultCPlusPlusIncludePaths(Lang, triple, HSOpts);
     }
