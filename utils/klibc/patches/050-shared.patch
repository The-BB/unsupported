--- a/Makefile
+++ b/Makefile
@@ -14,6 +14,10 @@ export KLIBCKERNELSRC ?= linux
 
 export VPATH := $(srctree)
 
+# shared
+KSHARED ?= y
+export KSHARED
+
 include $(srctree)/scripts/Kbuild.include
 
 KLIBCROSS	?= $(CROSS_COMPILE)
--- a/usr/klibc/arch/arm/MCONFIG
+++ b/usr/klibc/arch/arm/MCONFIG
@@ -24,7 +24,9 @@ else
 # Extra linkflags when building the shared version of the library
 # This address needs to be reachable using normal inter-module
 # calls, and work on the memory models for this architecture
+ifeq ($(KSHARED),y)
 KLIBCSHAREDFLAGS = $(LD_IMAGE_BASE_OPT) 0x01800000
+endif
 ifeq ($(CONFIG_AEABI),y)
 KLIBCREQFLAGS += -mabi=aapcs-linux -mno-thumb-interwork
 else
--- a/usr/klibc/arch/arm64/MCONFIG
+++ b/usr/klibc/arch/arm64/MCONFIG
@@ -21,7 +21,9 @@ KLIBCLDFLAGS  = $(LD_IMAGE_BASE_OPT) 0x0
 
 # On arm64, binaries are normally loaded at 4MB. Place klibc.so
 # a little before that at 2MB to prevent overlap.
+ifeq ($(KSHARED),y)
 KLIBCSHAREDFLAGS = $(LD_IMAGE_BASE_OPT) 0x0200000
+endif
 
 # Kernel has never used stack trampolines
 KLIBCEXECSTACK := n
--- a/usr/klibc/arch/mips/MCONFIG
+++ b/usr/klibc/arch/mips/MCONFIG
@@ -15,7 +15,9 @@ KLIBCBITSIZE      = 32
 # This address needs to be reachable using normal inter-module
 # calls, and work on the memory models for this architecture
 # 2 MB - normal binaries start at 4 MB
+ifeq ($(KSHARED),y)
 KLIBCSHAREDFLAGS     = $(LD_IMAGE_BASE_OPT) 0x00200000
+endif
 
 # Kernel uses vDSO for signal return since 2.6.34
 KLIBCEXECSTACK := n
--- a/usr/klibc/arch/x86_64/MCONFIG
+++ b/usr/klibc/arch/x86_64/MCONFIG
@@ -37,7 +37,9 @@ KLIBCLDFLAGS      = -m elf_x86_64 $(LD_I
 # The old default was max-page-size=0x100000, but that also results
 # in a broken layout with binutils 2.30.  Since there's no
 # architectural page size betwen 4 KB and 2MB, set it to 4 KB.
+ifeq ($(KSHARED),y)
 KLIBCSHAREDFLAGS     = $(LD_IMAGE_BASE_OPT) 0x00200000 -z max-page-size=0x1000
+endif
 
 # Kernel has never used stack trampolines
 KLIBCEXECSTACK := n
