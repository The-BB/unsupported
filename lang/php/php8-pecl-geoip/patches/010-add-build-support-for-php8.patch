--- a/config.m4
+++ b/config.m4
@@ -1,4 +1,4 @@
-dnl $Id: config.m4 333464 2014-05-03 10:21:31Z remi $
+dnl $Id: config.m4 333449 2014-04-30 12:12:00Z ohill $
 dnl config.m4 for extension geoip
 
 dnl Base file contributed by Jonathan Whiteman of cyberflowsolutions.com
@@ -35,7 +35,7 @@ if test "$PHP_GEOIP" != "no"; then
   # odd PHP4 fix
   if test "x$PHP_LIBDIR" = "x"; then
     PHP_LIBDIR=lib
-  fi 
+  fi
 
   # --with-geoip -> check for lib and symbol presence
   LIBNAME=GeoIP # you may want to change this
@@ -70,7 +70,7 @@ if test "$PHP_GEOIP" != "no"; then
   ],[
     -L$GEOIP_DIR/$PHP_LIBDIR -lm
   ])
-  
+
   # Checking for GeoIP_continent_by_id in newer lib
   PHP_CHECK_LIBRARY($LIBNAME,GeoIP_continent_by_id,
   [
@@ -98,7 +98,7 @@ if test "$PHP_GEOIP" != "no"; then
   ],[],[
     #include <GeoIP.h>
   ])
-  
+
   # Checking for GEOIP_ACCURACYRADIUS_EDITION
   AC_CHECK_DECL(GEOIP_ACCURACYRADIUS_EDITION,
   [
@@ -106,7 +106,7 @@ if test "$PHP_GEOIP" != "no"; then
   ],[],[
     #include <GeoIP.h>
   ])
-  
+
   # Check to see if we are using the LGPL library (version 1.4.0 and newer)
   AC_MSG_CHECKING([for LGPL compatible GeoIP libs])
   libgeoip_full_version=`find $GEOIP_DIR/$PHP_LIBDIR/ -name libGeoIP.\*.\*.\*.\* | cut -d . -f 2-5 | sort`
@@ -128,7 +128,7 @@ if test "$PHP_GEOIP" != "no"; then
   # Just in case it didn't work, try alternate method, or fail
   if test "x$LIBGEOIP_VERSION" = "x"; then
     AC_MSG_RESULT([cannot detect])
-    
+
     # Alternate method based on library capabilities (not 100% acurate)
     AC_MSG_CHECKING([library features to determine version (not acurate)])
     if test "x$MIN_GEOIP_VERSION" = "x"; then
@@ -136,7 +136,7 @@ if test "$PHP_GEOIP" != "no"; then
     else
         LIBGEOIP_VERSION=$MIN_GEOIP_VERSION
     fi
-  fi 
+  fi
 
   if test "$LIBGEOIP_VERSION" -lt "1004000"; then
     AC_MSG_RESULT([wrong version])
--- /dev/null
+++ b/geoip_arginfo.h
@@ -0,0 +1,160 @@
+/* This is a generated file, edit the .stub.php file instead.
+ * Stub hash: dd9427439072e37f6d6b243bf18311885642a8b8 */
+
+ZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(arginfo_geoip_database_info, 0, 0, IS_STRING, 1)
+	ZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, database, IS_LONG, 0, "GEOIP_COUNTRY_EDITION")
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_geoip_country_code_by_name, 0, 0, 1)
+	ZEND_ARG_TYPE_INFO(0, hostname, IS_STRING, 0)
+ZEND_END_ARG_INFO()
+
+#define arginfo_geoip_country_code_by_name_v6 arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_country_code_by_addr arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_country_code_by_addr_v6 arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_domain_by_name arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_domain_by_name_v6 arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_country_code3_by_name arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_country_code3_by_name_v6 arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_country_name_by_name arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_country_name_by_name_v6 arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_continent_code_by_name arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_continent_code_by_name_v6 arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_org_by_name arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_org_by_name_v6 arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_record_by_name arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_record_by_name_v6 arginfo_geoip_country_code_by_name
+
+ZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(arginfo_geoip_id_by_name, 0, 1, IS_LONG, 0)
+	ZEND_ARG_TYPE_INFO(0, hostname, IS_STRING, 0)
+ZEND_END_ARG_INFO()
+
+#define arginfo_geoip_id_by_name_v6 arginfo_geoip_id_by_name
+
+#define arginfo_geoip_region_by_name arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_region_by_name_v6 arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_isp_by_name arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_isp_by_name_v6 arginfo_geoip_country_code_by_name
+
+ZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(arginfo_geoip_db_avail, 0, 1, _IS_BOOL, 1)
+	ZEND_ARG_TYPE_INFO(0, database, IS_LONG, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(arginfo_geoip_db_get_all_info, 0, 0, IS_ARRAY, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(arginfo_geoip_db_filename, 0, 1, IS_STRING, 1)
+	ZEND_ARG_TYPE_INFO(0, database, IS_LONG, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_geoip_region_name_by_code, 0, 0, 2)
+	ZEND_ARG_TYPE_INFO(0, country_code, IS_STRING, 0)
+	ZEND_ARG_TYPE_INFO(0, region_code, IS_STRING, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_geoip_time_zone_by_country_and_region, 0, 0, 2)
+	ZEND_ARG_TYPE_INFO(0, country_code, IS_STRING, 0)
+	ZEND_ARG_TYPE_INFO(0, region_code, IS_STRING, 1)
+ZEND_END_ARG_INFO()
+
+#define arginfo_geoip_asnum_by_name arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_asnum_by_name_v6 arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_netspeedcell_by_name arginfo_geoip_country_code_by_name
+
+#define arginfo_geoip_netspeedcell_by_name_v6 arginfo_geoip_country_code_by_name
+
+ZEND_BEGIN_ARG_INFO_EX(arginfo_geoip_setup_custom_directory, 0, 0, 1)
+	ZEND_ARG_TYPE_INFO(0, path, IS_STRING, 0)
+ZEND_END_ARG_INFO()
+
+
+ZEND_FUNCTION(geoip_database_info);
+ZEND_FUNCTION(geoip_country_code_by_name);
+ZEND_FUNCTION(geoip_country_code_by_name_v6);
+ZEND_FUNCTION(geoip_country_code_by_addr);
+ZEND_FUNCTION(geoip_country_code_by_addr_v6);
+ZEND_FUNCTION(geoip_domain_by_name);
+ZEND_FUNCTION(geoip_domain_by_name_v6);
+ZEND_FUNCTION(geoip_country_code3_by_name);
+ZEND_FUNCTION(geoip_country_code3_by_name_v6);
+ZEND_FUNCTION(geoip_country_name_by_name);
+ZEND_FUNCTION(geoip_country_name_by_name_v6);
+ZEND_FUNCTION(geoip_continent_code_by_name);
+ZEND_FUNCTION(geoip_continent_code_by_name_v6);
+ZEND_FUNCTION(geoip_org_by_name);
+ZEND_FUNCTION(geoip_org_by_name_v6);
+ZEND_FUNCTION(geoip_record_by_name);
+ZEND_FUNCTION(geoip_record_by_name_v6);
+ZEND_FUNCTION(geoip_id_by_name);
+ZEND_FUNCTION(geoip_id_by_name_v6);
+ZEND_FUNCTION(geoip_region_by_name);
+ZEND_FUNCTION(geoip_region_by_name_v6);
+ZEND_FUNCTION(geoip_isp_by_name);
+ZEND_FUNCTION(geoip_isp_by_name_v6);
+ZEND_FUNCTION(geoip_db_avail);
+ZEND_FUNCTION(geoip_db_get_all_info);
+ZEND_FUNCTION(geoip_db_filename);
+ZEND_FUNCTION(geoip_region_name_by_code);
+ZEND_FUNCTION(geoip_time_zone_by_country_and_region);
+ZEND_FUNCTION(geoip_asnum_by_name);
+ZEND_FUNCTION(geoip_asnum_by_name_v6);
+ZEND_FUNCTION(geoip_netspeedcell_by_name);
+ZEND_FUNCTION(geoip_netspeedcell_by_name_v6);
+ZEND_FUNCTION(geoip_setup_custom_directory);
+
+
+static const zend_function_entry ext_functions[] = {
+	ZEND_FE(geoip_database_info, arginfo_geoip_database_info)
+	ZEND_FE(geoip_country_code_by_name, arginfo_geoip_country_code_by_name)
+	ZEND_FE(geoip_country_code_by_name_v6, arginfo_geoip_country_code_by_name_v6)
+	ZEND_FE(geoip_country_code_by_addr, arginfo_geoip_country_code_by_addr)
+	ZEND_FE(geoip_country_code_by_addr_v6, arginfo_geoip_country_code_by_addr_v6)
+	ZEND_FE(geoip_domain_by_name, arginfo_geoip_domain_by_name)
+	ZEND_FE(geoip_domain_by_name_v6, arginfo_geoip_domain_by_name_v6)
+	ZEND_FE(geoip_country_code3_by_name, arginfo_geoip_country_code3_by_name)
+	ZEND_FE(geoip_country_code3_by_name_v6, arginfo_geoip_country_code3_by_name_v6)
+	ZEND_FE(geoip_country_name_by_name, arginfo_geoip_country_name_by_name)
+	ZEND_FE(geoip_country_name_by_name_v6, arginfo_geoip_country_name_by_name_v6)
+	ZEND_FE(geoip_continent_code_by_name, arginfo_geoip_continent_code_by_name)
+	ZEND_FE(geoip_continent_code_by_name_v6, arginfo_geoip_continent_code_by_name_v6)
+	ZEND_FE(geoip_org_by_name, arginfo_geoip_org_by_name)
+	ZEND_FE(geoip_org_by_name_v6, arginfo_geoip_org_by_name_v6)
+	ZEND_FE(geoip_record_by_name, arginfo_geoip_record_by_name)
+	ZEND_FE(geoip_record_by_name_v6, arginfo_geoip_record_by_name_v6)
+	ZEND_FE(geoip_id_by_name, arginfo_geoip_id_by_name)
+	ZEND_FE(geoip_id_by_name_v6, arginfo_geoip_id_by_name_v6)
+	ZEND_FE(geoip_region_by_name, arginfo_geoip_region_by_name)
+	ZEND_FE(geoip_region_by_name_v6, arginfo_geoip_region_by_name_v6)
+	ZEND_FE(geoip_isp_by_name, arginfo_geoip_isp_by_name)
+	ZEND_FE(geoip_isp_by_name_v6, arginfo_geoip_isp_by_name_v6)
+	ZEND_FE(geoip_db_avail, arginfo_geoip_db_avail)
+	ZEND_FE(geoip_db_get_all_info, arginfo_geoip_db_get_all_info)
+	ZEND_FE(geoip_db_filename, arginfo_geoip_db_filename)
+	ZEND_FE(geoip_region_name_by_code, arginfo_geoip_region_name_by_code)
+	ZEND_FE(geoip_time_zone_by_country_and_region, arginfo_geoip_time_zone_by_country_and_region)
+	ZEND_FE(geoip_asnum_by_name, arginfo_geoip_asnum_by_name)
+	ZEND_FE(geoip_asnum_by_name_v6, arginfo_geoip_asnum_by_name_v6)
+	ZEND_FE(geoip_netspeedcell_by_name, arginfo_geoip_netspeedcell_by_name)
+	ZEND_FE(geoip_netspeedcell_by_name_v6, arginfo_geoip_netspeedcell_by_name_v6)
+	ZEND_FE(geoip_setup_custom_directory, arginfo_geoip_setup_custom_directory)
+	ZEND_FE_END
+};
--- a/geoip.c
+++ b/geoip.c
@@ -12,13 +12,13 @@
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
-  | Author: Olivier Hill   <ohill@php.net>                               |
+  | Author: Olivier Hill <ohill@php.net>                                 |
   |         Matthew Fonda                                                |
+  |         Adam Saponara <as@php.net>                                   |
   +----------------------------------------------------------------------+
   Please contact support@maxmind.com with any comments
 */
 
-
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
@@ -32,62 +32,51 @@
 #include "php.h"
 #include "php_ini.h"
 #include "ext/standard/info.h"
-#include "php_geoip.h"
 
+#ifndef ZEND_ARG_INFO_WITH_DEFAULT_VALUE
+#define ZEND_ARG_INFO_WITH_DEFAULT_VALUE(pass_by_ref, name, default_value) \
+	ZEND_ARG_INFO(pass_by_ref, name)
+#endif
+#if PHP_VERSION_ID < 70200
+#undef ZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX
+#define ZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(name, return_reference, required_num_args, class_name, allow_null) \
+	static const zend_internal_arg_info name[] = { \
+		{ (const char*)(zend_uintptr_t)(required_num_args), ( #class_name ), 0, return_reference, allow_null, 0 },
+#endif
+
+#ifndef ZEND_BEGIN_ARG_WITH_RETURN_OBJ_INFO_EX
+#define ZEND_BEGIN_ARG_WITH_RETURN_OBJ_INFO_EX(name, return_reference, required_num_args, class_name, allow_null) \
+	ZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(name, return_reference, required_num_args, class_name, allow_null)
+#endif
+
+#ifndef ZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE
+#define ZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(pass_by_ref, name, type_hint, allow_null, default_value) \
+	ZEND_ARG_TYPE_INFO(pass_by_ref, name, type_hint, allow_null)
+#endif
 
+#include "geoip_arginfo.h"
+#include "php_geoip.h"
 
 ZEND_DECLARE_MODULE_GLOBALS(geoip)
 
 static int le_geoip;
 
-/* {{{ */
-zend_function_entry geoip_functions[] = {
-	PHP_FE(geoip_database_info,   NULL)   
-#define GEOIPDEF(php_func, c_func, db_type) \
-	PHP_FE(php_func,	NULL)
-#include "geoip.def"
-#undef GEOIPDEF
-	PHP_FE(geoip_continent_code_by_name,   NULL)
-	PHP_FE(geoip_org_by_name,   NULL)
-	PHP_FE(geoip_record_by_name,   NULL)
-	PHP_FE(geoip_id_by_name,   NULL)
-	PHP_FE(geoip_region_by_name,   NULL)
-	PHP_FE(geoip_isp_by_name,   NULL)
-	PHP_FE(geoip_db_avail,	NULL)
-	PHP_FE(geoip_db_get_all_info,	NULL)
-	PHP_FE(geoip_db_filename,	NULL)
-#if LIBGEOIP_VERSION >= 1004001
-	PHP_FE(geoip_region_name_by_code,	NULL)
-	PHP_FE(geoip_time_zone_by_country_and_region,	NULL)
-#endif
-#ifdef HAVE_CUSTOM_DIRECTORY
-    PHP_FE(geoip_setup_custom_directory,	NULL)
-#endif
-	PHP_FE(geoip_asnum_by_name,   NULL)
-	PHP_FE(geoip_domain_by_name,   NULL)
-#if LIBGEOIP_VERSION >= 1004008
-	PHP_FE(geoip_netspeedcell_by_name, NULL)
-#endif
-	{NULL, NULL, NULL}
-};
-/* }}} */
-
 /* {{{ geoip_module_entry
  */
 zend_module_entry geoip_module_entry = {
-#if ZEND_MODULE_API_NO >= 20010901
 	STANDARD_MODULE_HEADER,
-#endif
 	"geoip",
-	geoip_functions,
+	ext_functions,
 	PHP_MINIT(geoip),
-	PHP_MSHUTDOWN(geoip),
-	PHP_RINIT(geoip),      
-	PHP_RSHUTDOWN(geoip),   
+	NULL,
+	NULL,
+#ifdef HAVE_CUSTOM_DIRECTORY
+	PHP_RSHUTDOWN(geoip),
+#else
+	NULL,
+#endif
 	PHP_MINFO(geoip),
-#if ZEND_MODULE_API_NO >= 20010901
 	PHP_GEOIP_VERSION, /* version number of the extension */
-#endif
 	STANDARD_MODULE_PROPERTIES
 };
 /* }}} */
@@ -96,11 +85,15 @@ zend_module_entry geoip_module_entry = {
 ZEND_GET_MODULE(geoip)
 #endif
 
+#define strlen_compat_t size_t
+#define zend_long_compat zend_long
+#define add_assoc_string_compat(zval, key, val, dup) add_assoc_string(zval, key, val)
+#define RETURN_STRING_COMPAT(str, dup) RETURN_STRING(str)
+#define RETVAL_STRING_COMPAT(str, dup) RETVAL_STRING(str)
+
 #ifdef HAVE_CUSTOM_DIRECTORY
-/* {{{ geoip_change_custom_directory() helper function
- */
-static void geoip_change_custom_directory(char *value)
-{
+/* {{{ geoip_change_custom_directory() helper function */
+static void geoip_change_custom_directory(char *value) {
 #if LIBGEOIP_VERSION >= 1004007
 	GeoIP_cleanup();
 #else
@@ -115,84 +108,74 @@ static void geoip_change_custom_director
 		GeoIPDBFileName = NULL;
 	}
 #endif
-
 	GeoIP_setup_custom_directory(value);
-	GeoIP_db_avail(GEOIP_COUNTRY_EDITION);
+	_GeoIP_setup_dbfilename();
 }
 /* }}} */
 #endif
 
-#ifdef HAVE_CUSTOM_DIRECTORY
-/* {{{ PHP_INI_MH 
-+ */
-static PHP_INI_MH(OnUpdateDirectory)
-{
+/* {{{ PHP_INI_MH */
+static PHP_INI_MH(OnUpdateDirectory) {
 	if (stage == PHP_INI_STAGE_RUNTIME || stage == PHP_INI_STAGE_HTACCESS) {
 		GEOIP_G(set_runtime_custom_directory) = 1;
-#if PHP_MAJOR_VERSION >= 7
 		geoip_change_custom_directory(new_value->val);
-#else
-		geoip_change_custom_directory(new_value);
-#endif
 		return SUCCESS;
 	}
-	
-#if PHP_MAJOR_VERSION >= 7
-	return OnUpdateString(entry, new_value, mh_arg1, mh_arg2, mh_arg3, stage TSRMLS_CC);
-#else
-	return OnUpdateString(entry, new_value, new_value_length, mh_arg1, mh_arg2, mh_arg3, stage TSRMLS_CC);
-#endif
+	return OnUpdateString(entry, new_value, mh_arg1, mh_arg2, mh_arg3, stage);
 }
 /* }}} */
-#endif
 
-/* {{{ PHP_INI
- */
+/* {{{ PHP_INI */
 PHP_INI_BEGIN()
-#ifdef HAVE_CUSTOM_DIRECTORY
 	STD_PHP_INI_ENTRY("geoip.custom_directory", NULL, PHP_INI_ALL, OnUpdateDirectory, custom_directory, zend_geoip_globals, geoip_globals)
-#endif
 PHP_INI_END()
 /* }}} */
 
-/* {{{ php_geoip_init_globals
- */
-static void php_geoip_init_globals(zend_geoip_globals *geoip_globals)
-{
+/* {{{ php_geoip_init_globals */
+static void php_geoip_init_globals(zend_geoip_globals *geoip_globals) {
 	geoip_globals->custom_directory = NULL;
 	geoip_globals->set_runtime_custom_directory = 0;
 }
 /* }}} */
 
-/* {{{ PHP_MINIT_FUNCTION
- */
-PHP_MINIT_FUNCTION(geoip)
-{
+/* {{{ PHP_MINIT_FUNCTION */
+PHP_MINIT_FUNCTION(geoip) {
 	ZEND_INIT_MODULE_GLOBALS(geoip, php_geoip_init_globals, NULL);
+
 	REGISTER_INI_ENTRIES();
-	
 	/* @TODO: Do something for custom_directory before initialization here */
 
 #ifdef HAVE_CUSTOM_DIRECTORY
 	GeoIP_setup_custom_directory(GEOIP_G(custom_directory));
 #endif
-	/* This will initialize file structure */
-	GeoIP_db_avail(GEOIP_COUNTRY_EDITION);
-	
+
+	_GeoIP_setup_dbfilename();
 	/* For database type constants */
-	REGISTER_LONG_CONSTANT("GEOIP_COUNTRY_EDITION",     GEOIP_COUNTRY_EDITION,     CONST_CS | CONST_PERSISTENT);
-	REGISTER_LONG_CONSTANT("GEOIP_REGION_EDITION_REV0", GEOIP_REGION_EDITION_REV0, CONST_CS | CONST_PERSISTENT);
-	REGISTER_LONG_CONSTANT("GEOIP_CITY_EDITION_REV0",   GEOIP_CITY_EDITION_REV0,   CONST_CS | CONST_PERSISTENT);
-	REGISTER_LONG_CONSTANT("GEOIP_ORG_EDITION",         GEOIP_ORG_EDITION,         CONST_CS | CONST_PERSISTENT);
-	REGISTER_LONG_CONSTANT("GEOIP_ISP_EDITION",         GEOIP_ISP_EDITION,         CONST_CS | CONST_PERSISTENT);
-	REGISTER_LONG_CONSTANT("GEOIP_CITY_EDITION_REV1",   GEOIP_CITY_EDITION_REV1,   CONST_CS | CONST_PERSISTENT);
-	REGISTER_LONG_CONSTANT("GEOIP_REGION_EDITION_REV1", GEOIP_REGION_EDITION_REV1, CONST_CS | CONST_PERSISTENT);
-	REGISTER_LONG_CONSTANT("GEOIP_PROXY_EDITION",       GEOIP_PROXY_EDITION,       CONST_CS | CONST_PERSISTENT);
-	REGISTER_LONG_CONSTANT("GEOIP_ASNUM_EDITION",       GEOIP_ASNUM_EDITION,       CONST_CS | CONST_PERSISTENT);
-	REGISTER_LONG_CONSTANT("GEOIP_NETSPEED_EDITION",    GEOIP_NETSPEED_EDITION,    CONST_CS | CONST_PERSISTENT);
-	REGISTER_LONG_CONSTANT("GEOIP_DOMAIN_EDITION",      GEOIP_DOMAIN_EDITION,      CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_COUNTRY_EDITION",        GEOIP_COUNTRY_EDITION,        CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_REGION_EDITION_REV0",    GEOIP_REGION_EDITION_REV0,    CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_CITY_EDITION_REV0",      GEOIP_CITY_EDITION_REV0,      CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_ORG_EDITION",            GEOIP_ORG_EDITION,            CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_ISP_EDITION",            GEOIP_ISP_EDITION,            CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_CITY_EDITION_REV1",      GEOIP_CITY_EDITION_REV1,      CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_REGION_EDITION_REV1",    GEOIP_REGION_EDITION_REV1,    CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_PROXY_EDITION",          GEOIP_PROXY_EDITION,          CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_ASNUM_EDITION",          GEOIP_ASNUM_EDITION,          CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_NETSPEED_EDITION",       GEOIP_NETSPEED_EDITION,       CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_DOMAIN_EDITION",         GEOIP_DOMAIN_EDITION,         CONST_CS | CONST_PERSISTENT);
+
+#if LIBGEOIP_VERSION >= 1004005
+	REGISTER_LONG_CONSTANT("GEOIP_COUNTRY_EDITION_V6",     GEOIP_COUNTRY_EDITION_V6,     CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_CITY_EDITION_REV0_V6",   GEOIP_CITY_EDITION_REV0_V6,   CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_ORG_EDITION_V6",         GEOIP_ORG_EDITION_V6,         CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_ISP_EDITION_V6",         GEOIP_ISP_EDITION_V6,         CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_CITY_EDITION_REV1_V6",   GEOIP_CITY_EDITION_REV1_V6,   CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_ASNUM_EDITION_V6",       GEOIP_ASNUM_EDITION_V6,       CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_DOMAIN_EDITION_V6",      GEOIP_DOMAIN_EDITION_V6,      CONST_CS | CONST_PERSISTENT);
+#endif
+
 #if LIBGEOIP_VERSION >= 1004008
-	REGISTER_LONG_CONSTANT("GEOIP_NETSPEED_EDITION_REV1",GEOIP_NETSPEED_EDITION_REV1,CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_NETSPEED_EDITION_REV1",    GEOIP_NETSPEED_EDITION_REV1,    CONST_CS | CONST_PERSISTENT);
+	REGISTER_LONG_CONSTANT("GEOIP_NETSPEED_EDITION_REV1_V6", GEOIP_NETSPEED_EDITION_REV1_V6, CONST_CS | CONST_PERSISTENT);
 #endif
 
 	/* For netspeed constants */
@@ -200,33 +183,13 @@ PHP_MINIT_FUNCTION(geoip)
 	REGISTER_LONG_CONSTANT("GEOIP_DIALUP_SPEED",        GEOIP_DIALUP_SPEED,        CONST_CS | CONST_PERSISTENT);
 	REGISTER_LONG_CONSTANT("GEOIP_CABLEDSL_SPEED",      GEOIP_CABLEDSL_SPEED,      CONST_CS | CONST_PERSISTENT);
 	REGISTER_LONG_CONSTANT("GEOIP_CORPORATE_SPEED",     GEOIP_CORPORATE_SPEED,     CONST_CS | CONST_PERSISTENT);
-	
-	return SUCCESS;
-}
-/* }}} */
-
-/* {{{ PHP_MSHUTDOWN_FUNCTION
- */
-PHP_MSHUTDOWN_FUNCTION(geoip)
-{
-	return SUCCESS;
-}
-/* }}} */
 
-
-/* {{{ PHP_RINIT_FUNCTION
- */
-PHP_RINIT_FUNCTION(geoip)
-{
 	return SUCCESS;
 }
 /* }}} */
 
-
-/* {{{ PHP_RSHUTDOWN_FUNCTION
- */
-PHP_RSHUTDOWN_FUNCTION(geoip)
-{
+/* {{{ PHP_RSHUTDOWN_FUNCTION */
+PHP_RSHUTDOWN_FUNCTION(geoip) {
 #ifdef HAVE_CUSTOM_DIRECTORY
 	/* If we have a custom directory (and have support from   */
 	/* libgeoip, we reset the extension to default directory) */
@@ -235,17 +198,13 @@ PHP_RSHUTDOWN_FUNCTION(geoip)
 		GEOIP_G(set_runtime_custom_directory) = 0;
 	}
 #endif
-	
 	return SUCCESS;
 }
 /* }}} */
 
-/* {{{ PHP_MINFO_FUNCTION
- */
-PHP_MINFO_FUNCTION(geoip)
-{
+/* {{{ PHP_MINFO_FUNCTION */
+PHP_MINFO_FUNCTION(geoip) {
 	char buf[32];
-	
 	php_info_print_table_start();
 	php_info_print_table_header(2, "geoip support", "enabled");
 	php_info_print_table_row(2, "geoip extension version", PHP_GEOIP_VERSION);
@@ -256,664 +215,525 @@ PHP_MINFO_FUNCTION(geoip)
 }
 /* }}} */
 
-/* {{{ proto boolean geoip_db_avail( [ int database ] ) */
-PHP_FUNCTION(geoip_db_avail)
-{
-	zend_long edition;
-
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &edition) == FAILURE) {
-		return;
-	}
-	
-	if (edition < 0 || edition >= NUM_DB_TYPES)
-	{
-		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Database type given is out of bound.");
-		return;
+/* {{{ geoip_open_db helper */
+static GeoIP* geoip_open_db(int db_type, int db_type_fallback, int use_fallback) {
+	GeoIP* gi;
+	gi = NULL;
+	if (db_type < 0 || db_type >= NUM_DB_TYPES
+		|| (use_fallback && (db_type_fallback < 0 || db_type_fallback >= NUM_DB_TYPES))
+	) {
+	    php_error_docref(NULL, E_WARNING, "Database type given is out of bound.");
+	} else if (GeoIP_db_avail(db_type)) {
+	    gi = GeoIP_open_type(db_type, GEOIP_STANDARD);
+	} else if (use_fallback && GeoIP_db_avail(db_type_fallback)) {
+		gi = GeoIP_open_type(db_type_fallback, GEOIP_STANDARD);
+	} else {
+		if (GeoIPDBFileName[db_type]) {
+			php_error_docref(NULL, E_WARNING, "Required database not available at %s.", GeoIPDBFileName[db_type]);
+        } else {
+			php_error_docref(NULL, E_WARNING, "Required database not available.");
+		}
 	}
-	
-	RETURN_BOOL(GeoIP_db_avail(edition));    
+	return gi;
 }
 /* }}} */
 
-/* {{{ proto string geoip_db_filename( [ int database ] ) */
-PHP_FUNCTION(geoip_db_filename)
-{
-	zend_long edition;
+/* {{{ geoip_generic_string helper */
+static void geoip_generic_string(
+	INTERNAL_FUNCTION_PARAMETERS,
+	char* (*geoip_func)(GeoIP* gi, const char* host),
+	int db_type,
+    int do_free
+) {
+	GeoIP* gi;
+	char* hostname;
+	char* retval;
+	strlen_compat_t arglen;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &edition) == FAILURE) {
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "s", &hostname, &arglen) == FAILURE) {
 		return;
 	}
-	
-	if (edition < 0 || edition >= NUM_DB_TYPES)
-	{
-		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Database type given is out of bound.");
+
+	if (!(gi = geoip_open_db(db_type, 0, 0))) {
 		return;
 	}
-	
-	if (NULL != GeoIPDBFileName[edition])
-#if PHP_MAJOR_VERSION >= 7
-		RETURN_STRING(GeoIPDBFileName[edition]);	
-#else
-		RETURN_STRING(GeoIPDBFileName[edition], 1);	
-#endif
-}
-/* }}} */
-
-/* {{{ proto array geoip_db_get_all_info( ) */
-PHP_FUNCTION(geoip_db_get_all_info)
-{
-	int i;
-	
-	array_init(return_value);
-
-	for (i=0; i < NUM_DB_TYPES; i++)
-	{
-		if (NULL != GeoIPDBDescription[i])
-		{
-#if PHP_MAJOR_VERSION >= 7
-			zval real_row;
-			zval *row = &real_row;
-
-			array_init(row);
-#else
-			zval *row;
-			ALLOC_INIT_ZVAL(row);
-			array_init(row);
-#endif
-
-			add_assoc_bool(row, "available", GeoIP_db_avail(i));
-			if (GeoIPDBDescription[i]) {
-#if PHP_MAJOR_VERSION >= 7
-				add_assoc_string(row, "description", (char *)GeoIPDBDescription[i]);
-#else
-				add_assoc_string(row, "description", (char *)GeoIPDBDescription[i], 1);
-#endif
-			}
-			if (GeoIPDBFileName[i]) {
-#if PHP_MAJOR_VERSION >= 7
-				add_assoc_string(row, "filename", GeoIPDBFileName[i]);
-#else
-				add_assoc_string(row, "filename", GeoIPDBFileName[i], 1);
-#endif
-			}
 
-			add_index_zval(return_value, i, row);
-		}
+	retval = (char*)geoip_func(gi, hostname);
+	GeoIP_delete(gi);
+	if (!retval) {
+		RETURN_FALSE;
 	}
+	RETVAL_STRING_COMPAT(retval, 1);
+	if (do_free) free(retval);
 }
 /* }}} */
 
-/* {{{ proto string geoip_database_info( [ int database ] )
-   Returns GeoIP Database information */
-PHP_FUNCTION(geoip_database_info)
-{
-	GeoIP * gi;
-	char * db_info;
-	zend_long edition = GEOIP_COUNTRY_EDITION;
-	
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "|l", &edition) == FAILURE) {
-		return;
-	}
+/* {{{ geoip_generic_string helper */
+static void geoip_generic_region(
+	INTERNAL_FUNCTION_PARAMETERS,
+	GeoIPRegion* (*geoip_func)(GeoIP* gi, const char* host),
+	int db_type_1,
+	int db_type_2
+) {
+	GeoIP* gi;
+	char* hostname;
+	strlen_compat_t arglen;
+	GeoIPRegion* region;
 
-	if (edition < 0 || edition >= NUM_DB_TYPES)
-	{
-		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Database type given is out of bound.");
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "s", &hostname, &arglen) == FAILURE) {
 		return;
 	}
-	
-	if (GeoIP_db_avail(edition)) {
-		gi = GeoIP_open_type(edition, GEOIP_STANDARD);
-	} else {
-		if (NULL != GeoIPDBFileName[edition])
-			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Required database not available at %s.", GeoIPDBFileName[GEOIP_COUNTRY_EDITION]);
-		else
-			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Required database not available.");
-		return;
+
+	if (!(gi = geoip_open_db(db_type_1, db_type_2, 1))) {
+	    return;
 	}
-	
-	db_info = GeoIP_database_info(gi);
-	GeoIP_delete(gi);
 
-#if PHP_MAJOR_VERSION >= 7
-	RETVAL_STRING(db_info);
-#else
-	RETVAL_STRING(db_info, 1);
-#endif
-	free(db_info);
+	region = geoip_func(gi, hostname);
+	GeoIP_delete(gi);
+	if (!region) {
+		RETURN_FALSE;
+	}
+	array_init(return_value);
+	add_assoc_string_compat(return_value, "country_code", region->country_code, 1);
+	add_assoc_string_compat(return_value, "region", region->region, 1);
+	GeoIPRegion_delete(region);
 }
 /* }}} */
 
-/* {{{ */
-#if PHP_MAJOR_VERSION >= 7
-#define GEOIPDEF(php_func, c_func, db_type) \
-	PHP_FUNCTION(php_func) \
-	{ \
-		GeoIP * gi; \
-		char * hostname = NULL; \
-		const char * return_code; \
-		size_t arglen; \
-		\
-		if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &hostname, &arglen) == FAILURE) { \
-			return; \
-		} \
-		\
-		if (GeoIP_db_avail(db_type)) { \
-			gi = GeoIP_open_type(db_type, GEOIP_STANDARD); \
-		} else { \
-			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Required database not available at %s.", GeoIPDBFileName[db_type]); \
-			return; \
-		} \
-		\
-		return_code = c_func(gi, hostname); \
-		GeoIP_delete(gi); \
-		if (return_code == NULL) { \
-			RETURN_FALSE; \
-		} \
-		RETURN_STRING((char*)return_code); \
-		\
-	}
-#else
-#define GEOIPDEF(php_func, c_func, db_type) \
-	PHP_FUNCTION(php_func) \
-	{ \
-		GeoIP * gi; \
-		char * hostname = NULL; \
-		const char * return_code; \
-		int arglen; \
-		\
-		if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &hostname, &arglen) == FAILURE) { \
-			return; \
-		} \
-		\
-		if (GeoIP_db_avail(db_type)) { \
-			gi = GeoIP_open_type(db_type, GEOIP_STANDARD); \
-		} else { \
-			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Required database not available at %s.", GeoIPDBFileName[db_type]); \
-			return; \
-		} \
-		\
-		return_code = c_func(gi, hostname); \
-		GeoIP_delete(gi); \
-		if (return_code == NULL) { \
-			RETURN_FALSE; \
-		} \
-		RETURN_STRING((char*)return_code, 1); \
-		\
-	}
-#endif
-#include "geoip.def"
-#undef GEOIPDEF
-/* }}} */
-
-/* {{{ proto string geoip_continent_code_by_name( string hostname )
-   Returns the Continent name found in the GeoIP Database */
-PHP_FUNCTION(geoip_continent_code_by_name)
-{
-	GeoIP * gi;
-	char * hostname = NULL;
-	int id;
-#if PHP_MAJOR_VERSION >= 7
-	size_t arglen;
-#else
-	int arglen;
-#endif
+/* {{{ geoip_generic_record helper */
+static void geoip_generic_record(
+	INTERNAL_FUNCTION_PARAMETERS,
+	GeoIPRecord* (*geoip_func)(GeoIP* gi, const char* host),
+    int db_type1,
+    int db_type2
+) {
+	GeoIP* gi;
+	char* hostname;
+	strlen_compat_t arglen;
+	GeoIPRecord* gir;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &hostname, &arglen) == FAILURE) {
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "s", &hostname, &arglen) == FAILURE) {
 		return;
 	}
 
-	if (GeoIP_db_avail(GEOIP_COUNTRY_EDITION)) {
-		gi = GeoIP_open_type(GEOIP_COUNTRY_EDITION, GEOIP_STANDARD);
-	}   else {
-		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Required database not available at %s.", GeoIPDBFileName[GEOIP_COUNTRY_EDITION]);
+	if (!(gi = geoip_open_db(db_type1, db_type2, 1))) {
 		return;
 	}
 
-	id = GeoIP_id_by_name(gi, hostname);
+	gir = geoip_func(gi, hostname);
 	GeoIP_delete(gi);
-	if (id == 0) {
+	if (!gir) {
 		RETURN_FALSE;
 	}
-#if PHP_MAJOR_VERSION >= 7
-	RETURN_STRING((char *)GeoIP_country_continent[id]);
+
+	array_init(return_value);
+#if LIBGEOIP_VERSION >= 1004003
+	add_assoc_string_compat(return_value, "continent_code", (gir->continent_code == NULL) ? "" : gir->continent_code, 1);
+#endif
+	add_assoc_string_compat(return_value, "country_code", (gir->country_code == NULL) ? "" : gir->country_code, 1);
+	add_assoc_string_compat(return_value, "country_code3", (gir->country_code3 == NULL) ? "" : gir->country_code3, 1);
+	add_assoc_string_compat(return_value, "country_name", (gir->country_name == NULL) ? "" : gir->country_name, 1);
+	add_assoc_string_compat(return_value, "region", (gir->region == NULL) ? "" : gir->region, 1);
+	add_assoc_string_compat(return_value, "city", (gir->city == NULL) ? "" : gir->city, 1);
+	add_assoc_string_compat(return_value, "postal_code", (gir->postal_code == NULL) ? "" : gir->postal_code, 1);
+	add_assoc_double(return_value, "latitude", gir->latitude);
+	add_assoc_double(return_value, "longitude", gir->longitude);
+#if LIBGEOIP_VERSION >= 1004005
+	add_assoc_long(return_value, "dma_code", gir->metro_code);
 #else
-	RETURN_STRING((char *)GeoIP_country_continent[id], 1);
+	add_assoc_long(return_value, "dma_code", gir->dma_code);
 #endif
+	add_assoc_long(return_value, "area_code", gir->area_code);
+
+	GeoIPRecord_delete(gir);
 }
 /* }}} */
 
-/* {{{ proto string geoip_org_by_name( string hostname )
-   Returns the Organization Name found in the GeoIP Database */
-PHP_FUNCTION(geoip_org_by_name)
-{
-	GeoIP * gi;
-	char * hostname = NULL;
-	char * org;
-#if PHP_MAJOR_VERSION >= 7
-	size_t arglen;
-#else
-	int arglen;
-#endif
-
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &hostname, &arglen) == FAILURE) {
-		return;
+/* {{{ geoip_generic_id helper */
+static int geoip_generic_id(
+	INTERNAL_FUNCTION_PARAMETERS,
+	int (*geoip_func)(GeoIP* gi, const char* host),
+	int db_type,
+	int* ret_id
+) {
+	GeoIP* gi;
+	char* hostname;
+	strlen_compat_t arglen;
+
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "s", &hostname, &arglen) == FAILURE) {
+		return 0;
 	}
-	
-	if (GeoIP_db_avail(GEOIP_ORG_EDITION)) {
-		gi = GeoIP_open_type(GEOIP_ORG_EDITION, GEOIP_STANDARD);
-	}   else {
-		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Required database not available at %s.", GeoIPDBFileName[GEOIP_ORG_EDITION]);
-		return;
+
+	if (!(gi = geoip_open_db(db_type, 0, 0))) {
+		return 0;
 	}
 
-	org = GeoIP_org_by_name(gi, hostname);
+	*ret_id = geoip_func(gi, hostname);
 	GeoIP_delete(gi);
-	if (org == NULL) {
-		RETURN_FALSE;
-	}
-#if PHP_MAJOR_VERSION >= 7
-	RETVAL_STRING(org);
-#else
-	RETVAL_STRING(org, 1);
-#endif
-	free(org);
+	return 1;
 }
 /* }}} */
 
-/* {{{ proto string geoip_asnum_by_name( string hostname )
-   Returns the Domain Name found in the GeoIP Database */
-PHP_FUNCTION(geoip_asnum_by_name)
-{
-	GeoIP * gi;
-	char * hostname = NULL;
-	char * org;
-#if PHP_MAJOR_VERSION >= 7
-	size_t arglen;
+PHP_FUNCTION(geoip_country_code_by_name) {
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, (char* (*)(GeoIP*, const char*))GeoIP_country_code_by_name, GEOIP_COUNTRY_EDITION, 0);
+}
+
+PHP_FUNCTION(geoip_country_code_by_addr) {
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, (char* (*)(GeoIP*, const char*))GeoIP_country_code_by_addr, GEOIP_COUNTRY_EDITION, 0);
+}
+
+PHP_FUNCTION(geoip_country_code3_by_name) {
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, (char* (*)(GeoIP*, const char*))GeoIP_country_code3_by_name, GEOIP_COUNTRY_EDITION, 0);
+}
+
+PHP_FUNCTION(geoip_country_name_by_name) {
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, (char* (*)(GeoIP*, const char*))GeoIP_country_name_by_name, GEOIP_COUNTRY_EDITION, 0);
+}
+
+PHP_FUNCTION(geoip_asnum_by_name) {
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_name_by_name, GEOIP_ASNUM_EDITION, 1);
+}
+
+PHP_FUNCTION(geoip_domain_by_name) {
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_name_by_name, GEOIP_DOMAIN_EDITION, 1);
+}
+
+PHP_FUNCTION(geoip_netspeedcell_by_name) {
+#if LIBGEOIP_VERSION >= 1004008
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_name_by_name, GEOIP_NETSPEED_EDITION_REV1, 1);
 #else
-	int arglen;
+	php_error_docref(NULL, E_WARNING, "The GeoIP extension needs to be compiled against a newer version of libgeoip for this function to work");
 #endif
+}
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &hostname, &arglen) == FAILURE) {
-		return;
-	}
+PHP_FUNCTION(geoip_isp_by_name) {
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_name_by_name, GEOIP_ISP_EDITION, 1);
+}
 
-	if (GeoIP_db_avail(GEOIP_ASNUM_EDITION)) {
-		gi = GeoIP_open_type(GEOIP_ASNUM_EDITION, GEOIP_STANDARD);
-	}   else {
-		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Required database not available at %s.", GeoIPDBFileName[GEOIP_ASNUM_EDITION]);
-		return;
+PHP_FUNCTION(geoip_org_by_name) {
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_org_by_name, GEOIP_ORG_EDITION, 1);
+}
+
+PHP_FUNCTION(geoip_region_by_name) {
+	geoip_generic_region(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_region_by_name, GEOIP_REGION_EDITION_REV1, GEOIP_REGION_EDITION_REV0);
+}
+
+PHP_FUNCTION(geoip_record_by_name) {
+	geoip_generic_record(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_record_by_name, GEOIP_CITY_EDITION_REV1, GEOIP_CITY_EDITION_REV0);
+}
+
+PHP_FUNCTION(geoip_id_by_name) {
+	int netspeed;
+	if (geoip_generic_id(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_id_by_name, GEOIP_NETSPEED_EDITION_REV1, &netspeed)) {
+		RETURN_LONG(netspeed);
 	}
+}
 
-	org = GeoIP_name_by_name(gi, hostname);
-	GeoIP_delete(gi);
-	if (org == NULL) {
-		RETURN_FALSE;
+PHP_FUNCTION(geoip_continent_code_by_name) {
+	int id;
+	if (geoip_generic_id(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_id_by_name, GEOIP_COUNTRY_EDITION, &id)) {
+		if (id == 0) {
+			RETURN_FALSE;
+		} else {
+			RETURN_STRING_COMPAT((char*)GeoIP_country_continent[id], 1);
+		}
 	}
-#if PHP_MAJOR_VERSION >= 7
-	RETVAL_STRING(org);
+}
+
+/* {{{ IPV6 functions */
+PHP_FUNCTION(geoip_country_code_by_name_v6) {
+#if LIBGEOIP_VERSION >= 1004005
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, (char* (*)(GeoIP*, const char*))GeoIP_country_code_by_name_v6, GEOIP_COUNTRY_EDITION_V6, 0);
 #else
-	RETVAL_STRING(org, 1);
+	php_error_docref(NULL, E_WARNING, "The GeoIP extension needs to be compiled against a newer version of libgeoip for this function to work");
 #endif
-	free(org);
 }
-/* }}} */
 
-/* {{{ proto string geoip_domain_by_name( string hostname )
-   Returns the Domain Name found in the GeoIP Database */
-PHP_FUNCTION(geoip_domain_by_name)
-{
-	GeoIP * gi;
-	char * hostname = NULL;
-	char * org;
-#if PHP_MAJOR_VERSION >= 7
-	size_t arglen;
+PHP_FUNCTION(geoip_country_code_by_addr_v6) {
+#if LIBGEOIP_VERSION >= 1004005
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, (char* (*)(GeoIP*, const char*))GeoIP_country_code_by_addr_v6, GEOIP_COUNTRY_EDITION_V6, 0);
 #else
-	int arglen;
+	php_error_docref(NULL, E_WARNING, "The GeoIP extension needs to be compiled against a newer version of libgeoip for this function to work");
 #endif
+}
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &hostname, &arglen) == FAILURE) {
-		return;
-	}
+PHP_FUNCTION(geoip_country_code3_by_name_v6) {
+#if LIBGEOIP_VERSION >= 1004005
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, (char* (*)(GeoIP*, const char*))GeoIP_country_code3_by_name_v6, GEOIP_COUNTRY_EDITION_V6, 0);
+#else
+	php_error_docref(NULL, E_WARNING, "The GeoIP extension needs to be compiled against a newer version of libgeoip for this function to work");
+#endif
+}
 
-	if (GeoIP_db_avail(GEOIP_DOMAIN_EDITION)) {
-		gi = GeoIP_open_type(GEOIP_DOMAIN_EDITION, GEOIP_STANDARD);
-	}   else {
-		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Required database not available at %s.", GeoIPDBFileName[GEOIP_DOMAIN_EDITION]);
-		return;
-	}
+PHP_FUNCTION(geoip_country_name_by_name_v6) {
+#if LIBGEOIP_VERSION >= 1004005
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, (char* (*)(GeoIP*, const char*))GeoIP_country_name_by_name_v6, GEOIP_COUNTRY_EDITION_V6, 0);
+#else
+	php_error_docref(NULL, E_WARNING, "The GeoIP extension needs to be compiled against a newer version of libgeoip for this function to work");
+#endif
+}
 
-	org = GeoIP_name_by_name(gi, hostname);
-	GeoIP_delete(gi);
-	if (org == NULL) {
-		RETURN_FALSE;
-	}
-#if PHP_MAJOR_VERSION >= 7
-	RETVAL_STRING(org);
+PHP_FUNCTION(geoip_asnum_by_name_v6) {
+#if LIBGEOIP_VERSION >= 1004005
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_name_by_name_v6, GEOIP_ASNUM_EDITION_V6, 1);
 #else
-	RETVAL_STRING(org, 1);
+	php_error_docref(NULL, E_WARNING, "The GeoIP extension needs to be compiled against a newer version of libgeoip for this function to work");
 #endif
-	free(org);
 }
-/* }}} */
 
-#if LIBGEOIP_VERSION >= 1004008
-/* {{{ proto string geoip_netspeedcell_by_name( string hostname )
-   Returns the Net Speed found in the GeoIP Database */
-PHP_FUNCTION(geoip_netspeedcell_by_name)
-{
-	GeoIP * gi;
-	char * hostname = NULL;
-	char * org;
-#if PHP_MAJOR_VERSION >= 7
-	size_t arglen;
+PHP_FUNCTION(geoip_domain_by_name_v6) {
+#if LIBGEOIP_VERSION >= 1004005
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_name_by_name_v6, GEOIP_DOMAIN_EDITION_V6, 1);
 #else
-	int arglen;
+	php_error_docref(NULL, E_WARNING, "The GeoIP extension needs to be compiled against a newer version of libgeoip for this function to work");
 #endif
+}
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &hostname, &arglen) == FAILURE) {
-		return;
-	}
+PHP_FUNCTION(geoip_netspeedcell_by_name_v6) {
+#if LIBGEOIP_VERSION >= 1004008
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_name_by_name_v6, GEOIP_NETSPEED_EDITION_REV1_V6, 1);
+#else
+	php_error_docref(NULL, E_WARNING, "The GeoIP extension needs to be compiled against a newer version of libgeoip for this function to work");
+#endif
+}
 
-	if (GeoIP_db_avail(GEOIP_NETSPEED_EDITION_REV1)) {
-		gi = GeoIP_open_type(GEOIP_NETSPEED_EDITION_REV1, GEOIP_STANDARD);
-	}   else {
-		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Required database not available at %s.", GeoIPDBFileName[GEOIP_NETSPEED_EDITION_REV1]);
-		return;
-	}
+PHP_FUNCTION(geoip_isp_by_name_v6) {
+#if LIBGEOIP_VERSION >= 1004005
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_name_by_name_v6, GEOIP_ISP_EDITION_V6, 1);
+#else
+	php_error_docref(NULL, E_WARNING, "The GeoIP extension needs to be compiled against a newer version of libgeoip for this function to work");
+#endif
+}
 
-	org = GeoIP_name_by_name(gi, hostname);
-	GeoIP_delete(gi);
-	if (org == NULL) {
-		RETURN_FALSE;
-	}
-#if PHP_MAJOR_VERSION >= 7
-	RETVAL_STRING(org);
+PHP_FUNCTION(geoip_org_by_name_v6) {
+#if LIBGEOIP_VERSION >= 1004005
+	geoip_generic_string(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_org_by_name_v6, GEOIP_ORG_EDITION_V6, 1);
 #else
-	RETVAL_STRING(org, 1);
+	php_error_docref(NULL, E_WARNING, "The GeoIP extension needs to be compiled against a newer version of libgeoip for this function to work");
 #endif
-	free(org);
 }
-/* }}} */
+
+PHP_FUNCTION(geoip_region_by_name_v6) {
+#if LIBGEOIP_VERSION >= 1004005
+	geoip_generic_region(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_region_by_name_v6, GEOIP_REGION_EDITION_REV1, GEOIP_REGION_EDITION_REV0);
+#else
+	php_error_docref(NULL, E_WARNING, "The GeoIP extension needs to be compiled against a newer version of libgeoip for this function to work");
 #endif
+}
 
-/* {{{ proto array geoip_record_by_name( string hostname )
-   Returns the detailed City information found in the GeoIP Database */
-PHP_FUNCTION(geoip_record_by_name)
-{
-	GeoIP * gi;
-	char * hostname = NULL;
-#if PHP_MAJOR_VERSION >= 7
-	size_t arglen;
+PHP_FUNCTION(geoip_record_by_name_v6) {
+#if LIBGEOIP_VERSION >= 1004005
+	geoip_generic_record(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_record_by_name_v6, GEOIP_CITY_EDITION_REV1_V6, GEOIP_CITY_EDITION_REV0_V6);
 #else
-	int arglen;
+	php_error_docref(NULL, E_WARNING, "The GeoIP extension needs to be compiled against a newer version of libgeoip for this function to work");
 #endif
-	GeoIPRecord * gir;
+}
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &hostname, &arglen) == FAILURE) {
-		return;
+PHP_FUNCTION(geoip_id_by_name_v6) {
+#if LIBGEOIP_VERSION >= 1004005
+	int netspeed;
+	if (geoip_generic_id(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_id_by_name_v6, GEOIP_NETSPEED_EDITION_REV1_V6, &netspeed)) {
+		RETURN_LONG(netspeed);
 	}
+#else
+	php_error_docref(NULL, E_WARNING, "The GeoIP extension needs to be compiled against a newer version of libgeoip for this function to work");
+#endif
+}
 
-	if (GeoIP_db_avail(GEOIP_CITY_EDITION_REV1) || GeoIP_db_avail(GEOIP_CITY_EDITION_REV0)) {
-		if (GeoIP_db_avail(GEOIP_CITY_EDITION_REV1)) {
-			gi = GeoIP_open_type(GEOIP_CITY_EDITION_REV1, GEOIP_STANDARD);
+PHP_FUNCTION(geoip_continent_code_by_name_v6) {
+#if LIBGEOIP_VERSION >= 1004005
+	int id;
+	if (geoip_generic_id(INTERNAL_FUNCTION_PARAM_PASSTHRU, GeoIP_id_by_name_v6, GEOIP_COUNTRY_EDITION_V6, &id)) {
+		if (id == 0) {
+			RETURN_FALSE;
 		} else {
-			gi = GeoIP_open_type(GEOIP_CITY_EDITION_REV0, GEOIP_STANDARD);
+			RETURN_STRING_COMPAT((char*)GeoIP_country_continent[id], 1);
 		}
-	}   else {
-		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Required database not available at %s.", GeoIPDBFileName[GEOIP_CITY_EDITION_REV0]);
-		return;
 	}
-	gir = GeoIP_record_by_name(gi, hostname);
-
-	GeoIP_delete(gi);
-	
-	if (NULL == gir) {
-		RETURN_FALSE;
-	}
-	
-	array_init(return_value);
-#if PHP_MAJOR_VERSION >= 7
-# if LIBGEOIP_VERSION >= 1004003
-	add_assoc_string(return_value, "continent_code", (gir->continent_code == NULL) ? "" : gir->continent_code);
-# endif
-	add_assoc_string(return_value, "country_code", (gir->country_code == NULL) ? "" : gir->country_code);
-	add_assoc_string(return_value, "country_code3", (gir->country_code3 == NULL) ? "" : gir->country_code3);
-	add_assoc_string(return_value, "country_name", (gir->country_name == NULL) ? "" : gir->country_name);
-	add_assoc_string(return_value, "region", (gir->region == NULL) ? "" : gir->region);
-	add_assoc_string(return_value, "city", (gir->city == NULL) ? "" : gir->city);
-	add_assoc_string(return_value, "postal_code", (gir->postal_code == NULL) ? "" : gir->postal_code);
-#else
-# if LIBGEOIP_VERSION >= 1004003
-	add_assoc_string(return_value, "continent_code", (gir->continent_code == NULL) ? "" : gir->continent_code, 1);
-# endif
-	add_assoc_string(return_value, "country_code", (gir->country_code == NULL) ? "" : gir->country_code, 1);
-	add_assoc_string(return_value, "country_code3", (gir->country_code3 == NULL) ? "" : gir->country_code3, 1);
-	add_assoc_string(return_value, "country_name", (gir->country_name == NULL) ? "" : gir->country_name, 1);
-	add_assoc_string(return_value, "region", (gir->region == NULL) ? "" : gir->region, 1);
-	add_assoc_string(return_value, "city", (gir->city == NULL) ? "" : gir->city, 1);
-	add_assoc_string(return_value, "postal_code", (gir->postal_code == NULL) ? "" : gir->postal_code, 1);
-#endif
-	add_assoc_double(return_value, "latitude", gir->latitude);
-	add_assoc_double(return_value, "longitude", gir->longitude);
-#if LIBGEOIP_VERSION >= 1004005
-	add_assoc_long(return_value, "dma_code", gir->metro_code);
 #else
-	add_assoc_long(return_value, "dma_code", gir->dma_code);
+	php_error_docref(NULL, E_WARNING, "The GeoIP extension needs to be compiled against a newer version of libgeoip for this function to work");
 #endif
-	add_assoc_long(return_value, "area_code", gir->area_code);
-
-	GeoIPRecord_delete(gir);
 }
 /* }}} */
 
-/* {{{ proto integer geoip_id_by_name( string hostname )
-   Returns the Net Speed found in the GeoIP Database */
-PHP_FUNCTION(geoip_id_by_name)
-{
-	GeoIP * gi;
-	char * hostname = NULL;
-#if PHP_MAJOR_VERSION >= 7
-	size_t arglen;
-#else
-	int arglen;
-#endif
-	int netspeed;
+/* {{{ proto boolean geoip_db_avail( [ int database ] ) */
+PHP_FUNCTION(geoip_db_avail) {
+	zend_long_compat edition;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &hostname, &arglen) == FAILURE) {
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l", &edition) == FAILURE) {
 		return;
 	}
 
-	if (GeoIP_db_avail(GEOIP_NETSPEED_EDITION)) {
-		gi = GeoIP_open_type(GEOIP_NETSPEED_EDITION, GEOIP_STANDARD);
-	}   else {
-		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Required database not available at %s.", GeoIPDBFileName[GEOIP_NETSPEED_EDITION]);
+	if (edition < 0 || edition >= NUM_DB_TYPES)
+	{
+		php_error_docref(NULL, E_WARNING, "Database type given is out of bound.");
 		return;
 	}
 
-	netspeed = GeoIP_id_by_name(gi, hostname);
-	GeoIP_delete(gi);
-	RETURN_LONG(netspeed);
+	RETURN_BOOL(GeoIP_db_avail(edition));
 }
 /* }}} */
 
-/* {{{ proto array geoip_region_by_name( string hostname )
-   Returns the Country Code and region found in the GeoIP Database */
-PHP_FUNCTION(geoip_region_by_name)
-{
-	GeoIP * gi;
-	char * hostname = NULL;
-#if PHP_MAJOR_VERSION >= 7
-	size_t arglen;
-#else
-	int arglen;
-#endif
-	GeoIPRegion * region;
+/* {{{ proto string geoip_db_filename( [ int database ] ) */
+PHP_FUNCTION(geoip_db_filename) {
+	zend_long_compat edition;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &hostname, &arglen) == FAILURE) {
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l", &edition) == FAILURE) {
 		return;
 	}
 
-	if (GeoIP_db_avail(GEOIP_REGION_EDITION_REV0) || GeoIP_db_avail(GEOIP_REGION_EDITION_REV1)) {
-		if (GeoIP_db_avail(GEOIP_REGION_EDITION_REV1)) {
-			gi = GeoIP_open_type(GEOIP_REGION_EDITION_REV1, GEOIP_STANDARD);
-		} else {
-			gi = GeoIP_open_type(GEOIP_REGION_EDITION_REV0, GEOIP_STANDARD);
-		}
-	}   else {
-		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Required database not available at %s.", GeoIPDBFileName[GEOIP_REGION_EDITION_REV0]);
+	if (edition < 0 || edition >= NUM_DB_TYPES)
+	{
+		php_error_docref(NULL, E_WARNING, "Database type given is out of bound.");
 		return;
 	}
 
-	region = GeoIP_region_by_name(gi, hostname);
-	GeoIP_delete(gi);
+	if (NULL != GeoIPDBFileName[edition])
+		RETURN_STRING_COMPAT(GeoIPDBFileName[edition], 1);
+}
+/* }}} */
 
-	if (NULL == region) {
-		RETURN_FALSE;
-	}
+/* {{{ proto array geoip_db_get_all_info( ) */
+PHP_FUNCTION(geoip_db_get_all_info) {
+	int i;
 
 	array_init(return_value);
-#if PHP_MAJOR_VERSION >= 7
-	add_assoc_string(return_value, "country_code", region->country_code);
-	add_assoc_string(return_value, "region", region->region);
-#else
-	add_assoc_string(return_value, "country_code", region->country_code, 1);
-	add_assoc_string(return_value, "region", region->region, 1);
-#endif
 
-	GeoIPRegion_delete(region);
+	for (i=0; i < NUM_DB_TYPES; i++)
+	{
+		if (NULL != GeoIPDBDescription[i])
+		{
+			zval *row;
+			zval rowval;
+			row = &rowval;
+			array_init(row);
+
+			add_assoc_bool(row, "available", GeoIP_db_avail(i));
+			if (GeoIPDBDescription[i]) {
+				add_assoc_string_compat(row, "description", (char *)GeoIPDBDescription[i], 1);
+			}
+			if (GeoIPDBFileName[i]) {
+				add_assoc_string_compat(row, "filename", GeoIPDBFileName[i], 1);
+			}
+
+			add_index_zval(return_value, i, row);
+		}
+	}
 }
 /* }}} */
 
-/* {{{ proto string geoip_isp_by_name( string hostname )
-   Returns the ISP Name found in the GeoIP Database */
-PHP_FUNCTION(geoip_isp_by_name)
+/* {{{ proto string geoip_database_info( [ int database ] )
+   Returns GeoIP Database information */
+PHP_FUNCTION(geoip_database_info)
 {
 	GeoIP * gi;
-	char * hostname = NULL;
-	char * isp;
-#if PHP_MAJOR_VERSION >= 7
-	size_t arglen;
-#else
-	int arglen;
-#endif
+	char * db_info;
+	zend_long_compat edition = GEOIP_COUNTRY_EDITION;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &hostname, &arglen) == FAILURE) {
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "|l", &edition) == FAILURE) {
 		return;
 	}
-	
-	if (GeoIP_db_avail(GEOIP_ISP_EDITION)) {
-		gi = GeoIP_open_type(GEOIP_ISP_EDITION, GEOIP_STANDARD);
-	}   else {
-		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Required database not available at %s.", GeoIPDBFileName[GEOIP_ISP_EDITION]);
+
+	if (edition < 0 || edition >= NUM_DB_TYPES)
+	{
+		php_error_docref(NULL, E_WARNING, "Database type given is out of bound.");
 		return;
 	}
 
-	isp = GeoIP_name_by_name(gi, hostname);
-	GeoIP_delete(gi);
-	if (isp == NULL) {
-		RETURN_FALSE;
+	if (GeoIP_db_avail(edition)) {
+		gi = GeoIP_open_type(edition, GEOIP_STANDARD);
+	} else {
+		if (NULL != GeoIPDBFileName[edition])
+			php_error_docref(NULL, E_WARNING, "Required database not available at %s.", GeoIPDBFileName[GEOIP_COUNTRY_EDITION]);
+		else
+			php_error_docref(NULL, E_WARNING, "Required database not available.");
+		return;
 	}
-#if PHP_MAJOR_VERSION >= 7
-	RETVAL_STRING(isp);
-#else
-	RETVAL_STRING(isp, 1);
-#endif
-	free(isp);
+
+	db_info = GeoIP_database_info(gi);
+	GeoIP_delete(gi);
+
+	RETVAL_STRING_COMPAT(db_info, 1);
+	free(db_info);
 }
+/* }}} */
 
-#if LIBGEOIP_VERSION >= 1004001
 /* {{{ proto string geoip_region_name_by_code( string country_code, string region_code )
    Returns the region name for some country code and region code combo */
-PHP_FUNCTION(geoip_region_name_by_code)
-{
+PHP_FUNCTION(geoip_region_name_by_code) {
+#if LIBGEOIP_VERSION >= 1004001
 	char * country_code = NULL;
 	char * region_code = NULL;
 	const char * region_name;
-#if PHP_MAJOR_VERSION >= 7
-	size_t countrylen, regionlen;
-#else
-	int countrylen, regionlen;
-#endif
+	strlen_compat_t countrylen, regionlen;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "ss", &country_code, &countrylen, &region_code, &regionlen) == FAILURE) {
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "ss", &country_code, &countrylen, &region_code, &regionlen) == FAILURE) {
 		return;
 	}
 
 	if (!countrylen || !regionlen) {
-		php_error_docref(NULL TSRMLS_CC, E_WARNING, "You need to specify the country and region codes.");
+		php_error_docref(NULL, E_WARNING, "You need to specify the country and region codes.");
 		RETURN_FALSE;
 	}
-	
+
 	region_name = GeoIP_region_name_by_code(country_code, region_code);
 	if (region_name == NULL) {
 		RETURN_FALSE;
 	}
-#if PHP_MAJOR_VERSION >= 7
-	RETURN_STRING((char*)region_name);
+	RETURN_STRING_COMPAT((char*)region_name, 1);
 #else
-	RETURN_STRING((char*)region_name, 1);
+	php_error_docref(NULL, E_WARNING, "The GeoIP extension needs to be compiled against a newer version of libgeoip for this function to work");
 #endif
 }
 /* }}} */
-#endif
 
-#if LIBGEOIP_VERSION >= 1004001
 /* {{{ proto string geoip_time_zone_by_country_and_region( string country, string region )
    Returns the time zone for some country code and region code combo */
-PHP_FUNCTION(geoip_time_zone_by_country_and_region)
-{
+PHP_FUNCTION(geoip_time_zone_by_country_and_region) {
+#if LIBGEOIP_VERSION >= 1004001
 	char * country = NULL;
 	char * region = NULL;
 	const char * timezone;
-#if PHP_MAJOR_VERSION >= 7
-	size_t countrylen, arg2len;
-#else
-	int countrylen, arg2len;
-#endif
+	strlen_compat_t countrylen, arg2len;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s|s", &country, &countrylen, &region, &arg2len) == FAILURE) {
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "s|s", &country, &countrylen, &region, &arg2len) == FAILURE) {
 		return;
 	}
 
 	if (!countrylen) {
-		php_error_docref(NULL TSRMLS_CC, E_WARNING, "You need to specify at least the country code.");
+		php_error_docref(NULL, E_WARNING, "You need to specify at least the country code.");
 		RETURN_FALSE;
 	}
-	
+
 	timezone = GeoIP_time_zone_by_country_and_region(country, region);
 	if (timezone == NULL) {
 		RETURN_FALSE;
 	}
-#if PHP_MAJOR_VERSION >= 7
-	RETURN_STRING((char*)timezone);
+	RETURN_STRING_COMPAT((char*)timezone, 1);
 #else
-	RETURN_STRING((char*)timezone, 1);
+	php_error_docref(NULL, E_WARNING, "The GeoIP extension needs to be compiled against a newer version of libgeoip for this function to work");
 #endif
 }
 /* }}} */
-#endif
 
-#ifdef HAVE_CUSTOM_DIRECTORY
 /* {{{ proto void geoip_setup_custom_directory( string directory )
    Sets the custom directory for GeoIP databases */
-PHP_FUNCTION(geoip_setup_custom_directory)
-{
+PHP_FUNCTION(geoip_setup_custom_directory) {
+#ifdef HAVE_CUSTOM_DIRECTORY
 	char * dir = NULL;
-#if PHP_MAJOR_VERSION >= 7
-	size_t dirlen;
-#else
-	int dirlen;
-#endif
+	strlen_compat_t dirlen;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &dir, &dirlen) == FAILURE) {
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "s", &dir, &dirlen) == FAILURE) {
 		return;
 	}
 
 	GEOIP_G(set_runtime_custom_directory) = 1;
 	geoip_change_custom_directory(dir);
+#else
+	php_error_docref(NULL, E_WARNING, "The GeoIP extension needs to be compiled against a version of libgeoip with custom directory support for this to work");
+#endif
 }
 /* }}} */
-#endif
 
 
 /*
--- a/geoip.def
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
-  +----------------------------------------------------------------------+
-  | PHP Version 5                                                        |
-  +----------------------------------------------------------------------+
-  | Copyright (c) 2002-2009 The PHP Group                                |
-  +----------------------------------------------------------------------+
-  | This source file is subject to version 3.01 of the PHP license,      |
-  | that is bundled with this package in the file LICENSE, and is        |
-  | available through the world-wide-web at the following url:           |
-  | http://www.php.net/license/3_01.txt.                                 |
-  | If you did not receive a copy of the PHP license and are unable to   |
-  | obtain it through the world-wide-web, please send a note to          |
-  | license@php.net so we can mail you a copy immediately.               |
-  +----------------------------------------------------------------------+
-  | Author: Olivier Hill  <ohill@php.net>                                |
-  +----------------------------------------------------------------------+
-*/
-
-/* GEOIPDEF(php_func, c_func, db_type) */
-GEOIPDEF(geoip_country_code_by_name,	GeoIP_country_code_by_name,	GEOIP_COUNTRY_EDITION)
-GEOIPDEF(geoip_country_code3_by_name,	GeoIP_country_code3_by_name,	GEOIP_COUNTRY_EDITION)
-GEOIPDEF(geoip_country_name_by_name,	GeoIP_country_name_by_name,	GEOIP_COUNTRY_EDITION)
-
-#if LIBGEOIP_VERSION >= 1004005
-GEOIPDEF(geoip_country_code_by_name_v6,	GeoIP_country_code_by_name_v6,	GEOIP_COUNTRY_EDITION_V6)
-GEOIPDEF(geoip_country_code3_by_name_v6,	GeoIP_country_code3_by_name_v6,	GEOIP_COUNTRY_EDITION_V6)
-GEOIPDEF(geoip_country_name_by_name_v6,	GeoIP_country_name_by_name_v6,	GEOIP_COUNTRY_EDITION_V6)
-#endif
\ No newline at end of file
--- /dev/null
+++ b/geoip.stub.php
@@ -0,0 +1,200 @@
+<?php
+/** @generate-function-entries */
+/**
+ * @param int $database
+ * @return string|null
+ */
+function geoip_database_info(int $database = GEOIP_COUNTRY_EDITION): ?string {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_country_code_by_name(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_country_code_by_name_v6(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_country_code_by_addr(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_country_code_by_addr_v6(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_domain_by_name(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_domain_by_name_v6(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_country_code3_by_name(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_country_code3_by_name_v6(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_country_name_by_name(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_country_name_by_name_v6(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_continent_code_by_name(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_continent_code_by_name_v6(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_org_by_name(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_org_by_name_v6(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return array|false
+ */
+function geoip_record_by_name(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return array|false
+ */
+function geoip_record_by_name_v6(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return int
+ */
+function geoip_id_by_name(string $hostname): int {}
+
+/**
+ * @param string $hostname
+ * @return int
+ */
+function geoip_id_by_name_v6(string $hostname): int {}
+
+/**
+ * @param string $hostname
+ * @return array|false
+ */
+function geoip_region_by_name(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return array|false
+ */
+function geoip_region_by_name_v6(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_isp_by_name(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_isp_by_name_v6(string $hostname) {}
+
+/**
+ * @param int $database
+ * @return bool|null
+ */
+function geoip_db_avail(int $database): ?bool {}
+
+/**
+ * @return array
+ */
+function geoip_db_get_all_info(): array {}
+
+/**
+ * @param int $database
+ * @return string|null
+ */
+function geoip_db_filename (int $database): ?string {}
+
+/**
+ * @param string $country_code
+ * @param string $region_code
+ * @return string|false
+ */
+function geoip_region_name_by_code(string $country_code, string $region_code) {}
+
+/**
+ * @param string $country_code
+ * @param string|null $region_code
+ * @return string|false
+ */
+function geoip_time_zone_by_country_and_region(string $country_code, ?string $region_code) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_asnum_by_name(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_asnum_by_name_v6(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_netspeedcell_by_name(string $hostname) {}
+
+/**
+ * @param string $hostname
+ * @return string|false
+ */
+function geoip_netspeedcell_by_name_v6(string $hostname) {}
+
+/**
+ * @param string $path
+ * @return void
+ */
+function geoip_setup_custom_directory(string $path) {}
--- a/php_geoip.h
+++ b/php_geoip.h
@@ -14,6 +14,7 @@
   +----------------------------------------------------------------------+
   | Author: Olivier Hill <ohill@php.net>                                 |
   |         Matthew Fonda                                                |
+  |         Adam Saponara <as@php.net>                                   |
   +----------------------------------------------------------------------+
   Please contact support@maxmind.com with any comments
 */
@@ -24,11 +25,7 @@
 extern zend_module_entry geoip_module_entry;
 #define phpext_geoip_ptr &geoip_module_entry
 
-#define PHP_GEOIP_VERSION "1.1.1"
-
-#if PHP_MAJOR_VERSION < 7
-typedef long zend_long;
-#endif
+#define PHP_GEOIP_VERSION "1.3.0"
 
 #ifdef PHP_WIN32
 #define PHP_GEOIP_API __declspec(dllexport)
@@ -43,27 +40,40 @@ typedef long zend_long;
 #include <GeoIP.h>
 #include <GeoIPCity.h>
 
+PHP_GEOIP_API void _GeoIP_setup_dbfilename(void);
+
 PHP_MINIT_FUNCTION(geoip);
-PHP_MSHUTDOWN_FUNCTION(geoip);
-PHP_RINIT_FUNCTION(geoip);
 PHP_RSHUTDOWN_FUNCTION(geoip);
 PHP_MINFO_FUNCTION(geoip);
 
-
-PHP_FUNCTION(geoip_database_info);
-#define GEOIPDEF(php_func, c_func, db_type) \
-PHP_FUNCTION(php_func);
-#include "geoip.def"
-#undef GEOIPDEF
-PHP_FUNCTION(geoip_continent_code_by_name);
+PHP_FUNCTION(geoip_country_code_by_name);
+PHP_FUNCTION(geoip_country_code3_by_name);
+PHP_FUNCTION(geoip_country_name_by_name);
+PHP_FUNCTION(geoip_asnum_by_name);
+PHP_FUNCTION(geoip_domain_by_name);
+PHP_FUNCTION(geoip_isp_by_name);
 PHP_FUNCTION(geoip_org_by_name);
+PHP_FUNCTION(geoip_region_by_name);
 PHP_FUNCTION(geoip_record_by_name);
 PHP_FUNCTION(geoip_id_by_name);
-PHP_FUNCTION(geoip_region_by_name);
-PHP_FUNCTION(geoip_isp_by_name);
+PHP_FUNCTION(geoip_continent_code_by_name);
+#if LIBGEOIP_VERSION >= 1004005
+PHP_FUNCTION(geoip_country_code_by_name_v6);
+PHP_FUNCTION(geoip_country_code3_by_name_v6);
+PHP_FUNCTION(geoip_country_name_by_name_v6);
+PHP_FUNCTION(geoip_asnum_by_name_v6);
+PHP_FUNCTION(geoip_domain_by_name_v6);
+PHP_FUNCTION(geoip_isp_by_name_v6);
+PHP_FUNCTION(geoip_org_by_name_v6);
+PHP_FUNCTION(geoip_region_by_name_v6);
+PHP_FUNCTION(geoip_record_by_name_v6);
+PHP_FUNCTION(geoip_id_by_name_v6);
+PHP_FUNCTION(geoip_continent_code_by_name_v6);
+#endif
 PHP_FUNCTION(geoip_db_avail);
-PHP_FUNCTION(geoip_db_get_all_info);
 PHP_FUNCTION(geoip_db_filename);
+PHP_FUNCTION(geoip_db_get_all_info);
+PHP_FUNCTION(geoip_database_info);
 #if LIBGEOIP_VERSION >= 1004001
 PHP_FUNCTION(geoip_region_name_by_code);
 PHP_FUNCTION(geoip_time_zone_by_country_and_region);
@@ -71,10 +81,9 @@ PHP_FUNCTION(geoip_time_zone_by_country_
 #ifdef HAVE_CUSTOM_DIRECTORY
 PHP_FUNCTION(geoip_setup_custom_directory);
 #endif
-PHP_FUNCTION(geoip_asnum_by_name);
-PHP_FUNCTION(geoip_domain_by_name);
 #if LIBGEOIP_VERSION >= 1004008
 PHP_FUNCTION(geoip_netspeedcell_by_name);
+PHP_FUNCTION(geoip_netspeedcell_by_name_v6);
 #endif
 
 ZEND_BEGIN_MODULE_GLOBALS(geoip)
@@ -90,7 +99,6 @@ ZEND_END_MODULE_GLOBALS(geoip)
 
 #endif /* PHP_GEOIP_H */
 
-
 /*
  * Local variables:
  * tab-width: 4
