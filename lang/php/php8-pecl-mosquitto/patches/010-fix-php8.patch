--- a/mosquitto.c
+++ b/mosquitto.c
@@ -17,130 +17,159 @@ zend_object_handlers mosquitto_std_objec
 
 ZEND_DECLARE_MODULE_GLOBALS(mosquitto)
 
-#ifdef ZEND_ENGINE_3
-# ifndef Z_BVAL
-#  define Z_BVAL(zv) (Z_TYPE(zv) == IS_TRUE)
-#  define Z_BVAL_P(pzv) Z_BVAL(*pzv)
-# endif
-# define ZO_HANDLE_DC
-typedef size_t mosquitto_strlen_type;
-#else /* ZEND_ENGINE_2 */
-# ifndef Z_OBJ_P
-#  define Z_OBJ_P(pzv) ((zend_object*)zend_object_store_get_object(pzv TSRMLS_CC))
-# endif
-# define ZO_HANDLE_DC , zend_object_handle handle
-typedef int mosquitto_strlen_type;
-typedef long zend_long;
+#ifndef Z_BVAL
+# define Z_BVAL(zv) (Z_TYPE(zv) == IS_TRUE)
+# define Z_BVAL_P(pzv) Z_BVAL(*pzv)
 #endif
+#define ZO_HANDLE_DC
+typedef size_t mosquitto_strlen_type;
 
-static inline mosquitto_client_object *mosquitto_client_object_get(zval *zobj TSRMLS_DC) {
+static inline mosquitto_client_object *mosquitto_client_object_get(zval *zobj) {
 	// TODO: ZEND_ASSERT()s
 	mosquitto_client_object *obj = mosquitto_client_object_from_zend_object(Z_OBJ_P(zobj));
 	if (!obj->client) {
 		php_error(E_ERROR, "Internal surface object missing in %s wrapper, "
-		                   "you must call parent::__construct in extended classes", Z_OBJCE_P(zobj)->name);
+		                   "you must call parent::__construct in extended classes", (char *) Z_OBJCE_P(zobj)->name);
 	}
 	return obj;
 }
 
 static inline void mosquitto_callback_addref(zend_fcall_info *finfo) {
-#ifdef ZEND_ENGINE_3
 	zval tmp;
 	Z_TRY_ADDREF(finfo->function_name);
 	if (finfo->object) {
 		ZVAL_OBJ(&tmp, finfo->object);
 		Z_TRY_ADDREF(tmp);
 	}
-#else
-	Z_ADDREF_P(finfo->function_name);
-	if (finfo->object_ptr) {
-		Z_ADDREF_P(finfo->object_ptr);
-	}
-#endif
 }
 
 static inline const char *mosquitto_finfo_name(zend_fcall_info *info) {
-#ifdef ZEND_ENGINE_3
 	return Z_STRVAL(info->function_name);
-#else
-	return Z_STRVAL_P(info->function_name);
-#endif
 }
 
 static int php_mosquitto_pw_callback(char *buf, int size, int rwflag, void *userdata);
 
 /* {{{ Arginfo */
 
-ZEND_BEGIN_ARG_INFO(Mosquitto_Client___construct_args, ZEND_SEND_BY_VAL)
-	ZEND_ARG_INFO(0, id)
-	ZEND_ARG_INFO(0, cleanSession)
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Client___construct_args, 0, 0, 0)
+	ZEND_ARG_TYPE_INFO(0, id, IS_STRING, 1)
+	ZEND_ARG_TYPE_INFO(0, cleanSession, _IS_BOOL, 0)
 ZEND_END_ARG_INFO()
 
-ZEND_BEGIN_ARG_INFO(Mosquitto_Client_callback_args, ZEND_SEND_BY_VAL)
-#if PHP_VERSION_ID > 50400
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Client_onConnect_args, 0, 0, 1)
 	ZEND_ARG_TYPE_INFO(0, onConnect, IS_CALLABLE, 0)
-#else
-	ZEND_ARG_INFO(0, onConnect)
-#endif
 ZEND_END_ARG_INFO()
 
-ZEND_BEGIN_ARG_INFO(Mosquitto_Client_setCredentials_args, ZEND_SEND_BY_VAL)
-	ZEND_ARG_INFO(0, username)
-	ZEND_ARG_INFO(0, password)
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Client_onDisconnect_args, 0, 0, 1)
+	ZEND_ARG_TYPE_INFO(0, onDisconnect, IS_CALLABLE, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Client_onLog_args, 0, 0, 1)
+	ZEND_ARG_TYPE_INFO(0, onLog, IS_CALLABLE, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Client_onSubscribe_args, 0, 0, 1)
+	ZEND_ARG_TYPE_INFO(0, onSubscribe, IS_CALLABLE, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Client_onUnsubscribe_args, 0, 0, 1)
+	ZEND_ARG_TYPE_INFO(0, onUnsubscribe, IS_CALLABLE, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Client_onMessage_args, 0, 0, 1)
+	ZEND_ARG_TYPE_INFO(0, onMessage, IS_CALLABLE, 0)
 ZEND_END_ARG_INFO()
 
-ZEND_BEGIN_ARG_INFO(Mosquitto_Client_setWill_args, ZEND_SEND_BY_VAL)
-	ZEND_ARG_INFO(0, topic)
-	ZEND_ARG_INFO(0, payload)
-	ZEND_ARG_INFO(0, qos)
-	ZEND_ARG_INFO(0, retain)
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Client_onPublish_args, 0, 0, 1)
+	ZEND_ARG_TYPE_INFO(0, onPublish, IS_CALLABLE, 0)
 ZEND_END_ARG_INFO()
 
-ZEND_BEGIN_ARG_INFO(Mosquitto_Client_setReconnectDelay_args, ZEND_SEND_BY_VAL)
-	ZEND_ARG_INFO(0, reconnectDelay)
-	ZEND_ARG_INFO(0, maxReconnectDelay)
-	ZEND_ARG_INFO(0, exponentialBackoff)
+ZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(Mosquitto_Client_getSocket_args, 0, 0, IS_LONG, 0)
 ZEND_END_ARG_INFO()
 
-ZEND_BEGIN_ARG_INFO(Mosquitto_Client_setMessageRetry_args, ZEND_SEND_BY_VAL)
-	ZEND_ARG_INFO(0, messageRetry)
+ZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(Mosquitto_Client_setTlsCertificates_args, 0, 1, IS_LONG, 0)
+	ZEND_ARG_TYPE_INFO(0, ca_path, IS_STRING, 1)
+	ZEND_ARG_TYPE_INFO(0, cert_path, IS_STRING, 1)
+	ZEND_ARG_TYPE_INFO(0, key_path, IS_STRING, 1)
+	ZEND_ARG_TYPE_INFO(0, key_pw, IS_STRING, 1)
 ZEND_END_ARG_INFO()
 
-ZEND_BEGIN_ARG_INFO(Mosquitto_Client_connect_args, ZEND_SEND_BY_VAL)
-	ZEND_ARG_INFO(0, host)
-	ZEND_ARG_INFO(0, port)
-	ZEND_ARG_INFO(0, keepalive)
-	ZEND_ARG_INFO(0, interface)
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Client_setTlsInsecure_args, 0, 0, 1)
+	ZEND_ARG_TYPE_INFO(0, value, _IS_BOOL, 0)
 ZEND_END_ARG_INFO()
 
-ZEND_BEGIN_ARG_INFO(Mosquitto_Client_setMaxInFlightMessages_args, ZEND_SEND_BY_VAL)
-	ZEND_ARG_INFO(0, max)
+ZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(Mosquitto_Client_setTlsOptions_args, 0, 1, IS_LONG, 0)
+	ZEND_ARG_TYPE_INFO(0, verify_peer, IS_LONG, 0)
+	ZEND_ARG_TYPE_INFO(0, tls_version, IS_STRING, 1)
+	ZEND_ARG_TYPE_INFO(0, ciphers, IS_STRING, 1)
 ZEND_END_ARG_INFO()
 
-ZEND_BEGIN_ARG_INFO(Mosquitto_Client_publish_args, ZEND_SEND_BY_VAL)
-	ZEND_ARG_INFO(0, topic)
-	ZEND_ARG_INFO(0, payload)
-	ZEND_ARG_INFO(0, qos)
-	ZEND_ARG_INFO(0, retain)
+ZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(Mosquitto_Client_setTlsPSK_args, 0, 1, IS_LONG, 0)
+	ZEND_ARG_TYPE_INFO(0, psk, IS_STRING, 1)
+	ZEND_ARG_TYPE_INFO(0, identity, IS_STRING, 1)
+	ZEND_ARG_TYPE_INFO(0, ciphers, IS_STRING, 1)
 ZEND_END_ARG_INFO()
 
-ZEND_BEGIN_ARG_INFO(Mosquitto_Client_subscribe_args, ZEND_SEND_BY_VAL)
-	ZEND_ARG_INFO(0, topic)
-	ZEND_ARG_INFO(0, qos)
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Client_setCredentials_args, 0, 0, 2)
+	ZEND_ARG_TYPE_INFO(0, username, IS_STRING, 0)
+	ZEND_ARG_TYPE_INFO(0, password, IS_STRING, 0)
 ZEND_END_ARG_INFO()
 
-ZEND_BEGIN_ARG_INFO(Mosquitto_Client_unsubscribe_args, ZEND_SEND_BY_VAL)
-	ZEND_ARG_INFO(0, topic)
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Client_setWill_args, 0, 0, 4)
+	ZEND_ARG_TYPE_INFO(0, topic, IS_STRING, 0)
+	ZEND_ARG_TYPE_INFO(0, payload, IS_STRING, 0)
+	ZEND_ARG_TYPE_INFO(0, qos, IS_LONG, 0)
+	ZEND_ARG_TYPE_INFO(0, retain, _IS_BOOL, 0)
 ZEND_END_ARG_INFO()
 
-ZEND_BEGIN_ARG_INFO(Mosquitto_Client_loop_args, ZEND_SEND_BY_VAL)
-	ZEND_ARG_INFO(0, timeout)
-	ZEND_ARG_INFO(0, maxPackets)
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Client_setReconnectDelay_args, 0, 0, 1)
+	ZEND_ARG_TYPE_INFO(0, reconnectDelay, IS_LONG, 0)
+	ZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, maxReconnectDelay, IS_LONG, 0, "0")
+	ZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, exponentialBackoff, _IS_BOOL, 0, "false")
 ZEND_END_ARG_INFO()
 
-ZEND_BEGIN_ARG_INFO(Mosquitto_Client_loopForever_args, ZEND_SEND_BY_VAL)
-	ZEND_ARG_INFO(0, timeout)
-	ZEND_ARG_INFO(0, maxPackets)
+ZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(Mosquitto_Client_connect_args, 0, 1, IS_LONG, 0)
+	ZEND_ARG_TYPE_INFO(0, host, IS_STRING, 0)
+	ZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, port, IS_LONG, 0, "1883")
+	ZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, keepalive, IS_LONG, 0, "60")
+	ZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, interface, IS_STRING, 1, "null")
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Client_setMaxInFlightMessages_args, 0, 0, 1)
+	ZEND_ARG_TYPE_INFO(0, max, IS_LONG, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Client_setMessageRetry_args, 0, 0, 1)
+	ZEND_ARG_TYPE_INFO(0, messageRetry, IS_LONG, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(Mosquitto_Client_publish_args, 0, 2, IS_LONG, 0)
+	ZEND_ARG_TYPE_INFO(0, topic, IS_STRING, 0)
+	ZEND_ARG_TYPE_INFO(0, payload, IS_STRING, 0)
+	ZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, qos, IS_LONG, 0, "0")
+	ZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, retain, _IS_BOOL, 0, "false")
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(Mosquitto_Client_subscribe_args, 0, 2, IS_LONG, 0)
+	ZEND_ARG_TYPE_INFO(0, topic, IS_STRING, 0)
+	ZEND_ARG_TYPE_INFO(0, qos, IS_LONG, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(Mosquitto_Client_unsubscribe_args, 0, 1, IS_LONG, 0)
+	ZEND_ARG_TYPE_INFO(0, topic, IS_STRING, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Client_loop_args, 0, 0, 0)
+	ZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, timeout, IS_LONG, 0, "1000")
+	ZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, maxPackets, IS_LONG, 0, "1")
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Client_loopForever_args, 0, 0, 0)
+	ZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, timeout, IS_LONG, 0, "1000")
+	ZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, maxPackets, IS_LONG, 0, "1")
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Client_void_args, 0, 0, 0)
 ZEND_END_ARG_INFO()
 
 /* }}} */
@@ -154,7 +183,7 @@ PHP_METHOD(Mosquitto_Client, __construct
 	zend_bool clean_session = 1;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "|s!b", &id, &id_len, &clean_session) == FAILURE) {
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "|s!b", &id, &id_len, &clean_session) == FAILURE) {
 		PHP_MOSQUITTO_RESTORE_ERRORS();
 		return;
 	}
@@ -163,7 +192,7 @@ PHP_METHOD(Mosquitto_Client, __construct
 	object->client = mosquitto_new(id, clean_session, object);
 	if (!object->client) {
 		char *message = php_mosquitto_strerror_wrapper(errno);
-		zend_throw_exception(mosquitto_ce_exception, message, 1 TSRMLS_CC);
+		zend_throw_exception(mosquitto_ce_exception, message, 1);
 		if (message) {
 			efree(message);
 		}
@@ -183,7 +212,7 @@ PHP_METHOD(Mosquitto_Client, setTlsCerti
 	int (*pw_callback)(char *, int, int, void *) = NULL;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s!|s!s!s!",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "s!|s!s!s!",
 				&ca_path, &ca_path_len,
 				&cert_path, &cert_path_len,
 				&key_path, &key_path_len,
@@ -192,9 +221,9 @@ PHP_METHOD(Mosquitto_Client, setTlsCerti
 		return;
 	}
 
-	if ((php_check_open_basedir(ca_path TSRMLS_CC) < 0) ||
-		(php_check_open_basedir(cert_path TSRMLS_CC) < 0) ||
-		(php_check_open_basedir(key_path TSRMLS_CC) < 0))
+	if ((php_check_open_basedir(ca_path) < 0) ||
+		(php_check_open_basedir(cert_path) < 0) ||
+		(php_check_open_basedir(key_path) < 0))
 	{
 		PHP_MOSQUITTO_RESTORE_ERRORS();
 		return;
@@ -202,7 +231,7 @@ PHP_METHOD(Mosquitto_Client, setTlsCerti
 
 	PHP_MOSQUITTO_RESTORE_ERRORS();
 
-	php_stat(ca_path, ca_path_len, FS_IS_DIR, &stat TSRMLS_CC);
+	php_stat(ca_path, ca_path_len, FS_IS_DIR, &stat);
 	is_dir = Z_BVAL(stat);
 
 	if (key_pw != NULL) {
@@ -217,7 +246,7 @@ PHP_METHOD(Mosquitto_Client, setTlsCerti
 		retval = mosquitto_tls_set(object->client, ca_path, NULL, cert_path, key_path, pw_callback);
 	}
 
-	php_mosquitto_handle_errno(retval, errno TSRMLS_CC);
+	php_mosquitto_handle_errno(retval, errno);
 	RETURN_LONG(retval);
 }
 /* }}} */
@@ -230,7 +259,7 @@ PHP_METHOD(Mosquitto_Client, setTlsInsec
 	int retval = 0;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "b", &value) == FAILURE) {
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "b", &value) == FAILURE) {
 		PHP_MOSQUITTO_RESTORE_ERRORS();
 		return;
 	}
@@ -238,7 +267,7 @@ PHP_METHOD(Mosquitto_Client, setTlsInsec
 
 	retval = mosquitto_tls_insecure_set(object->client, value);
 
-	php_mosquitto_handle_errno(retval, errno TSRMLS_CC);
+	php_mosquitto_handle_errno(retval, errno);
 }
 /* }}} */
 
@@ -251,7 +280,7 @@ PHP_METHOD(Mosquitto_Client, setTlsOptio
 	int retval = 0, verify_peer = 0;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l|s!s!",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l|s!s!",
 				&verify_peer,
 				&tls_version, &tls_version_len,
 				&ciphers, &ciphers_len
@@ -263,7 +292,7 @@ PHP_METHOD(Mosquitto_Client, setTlsOptio
 
 	retval = mosquitto_tls_opts_set(object->client, verify_peer, tls_version, ciphers);
 
-	php_mosquitto_handle_errno(retval, errno TSRMLS_CC);
+	php_mosquitto_handle_errno(retval, errno);
 	RETURN_LONG(retval);
 }
 /* }}} */
@@ -277,7 +306,7 @@ PHP_METHOD(Mosquitto_Client, setTlsPSK)
 	int retval = 0;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s!s!|s!",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "s!s!|s!",
 				&psk, &psk_len, &identity, &identity_len, &ciphers, &ciphers_len
 				) == FAILURE) {
 		PHP_MOSQUITTO_RESTORE_ERRORS();
@@ -287,7 +316,7 @@ PHP_METHOD(Mosquitto_Client, setTlsPSK)
 
 	retval = mosquitto_tls_psk_set(object->client, psk, identity, ciphers);
 
-	php_mosquitto_handle_errno(retval, errno TSRMLS_CC);
+	php_mosquitto_handle_errno(retval, errno);
 	RETURN_LONG(retval);
 }
 /* }}} */
@@ -301,14 +330,14 @@ PHP_METHOD(Mosquitto_Client, setCredenti
 	int retval;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "ss", &username, &username_len, &password, &password_len) == FAILURE) {
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "ss", &username, &username_len, &password, &password_len) == FAILURE) {
 		PHP_MOSQUITTO_RESTORE_ERRORS();
 		return;
 	}
 	PHP_MOSQUITTO_RESTORE_ERRORS();
 
 	retval = mosquitto_username_pw_set(object->client, username, password);
-	php_mosquitto_handle_errno(retval, errno TSRMLS_CC);
+	php_mosquitto_handle_errno(retval, errno);
 }
 /* }}} */
 
@@ -323,7 +352,7 @@ PHP_METHOD(Mosquitto_Client, setWill)
 	char *topic, *payload;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "sslb",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "sslb",
 				&topic, &topic_len, &payload, &payload_len, &qos, &retain) == FAILURE) {
 		PHP_MOSQUITTO_RESTORE_ERRORS();
 		return;
@@ -332,7 +361,7 @@ PHP_METHOD(Mosquitto_Client, setWill)
 
 	retval = mosquitto_will_set(object->client, topic, payload_len, (void *) payload, qos, retain);
 
-	php_mosquitto_handle_errno(retval, errno TSRMLS_CC);
+	php_mosquitto_handle_errno(retval, errno);
 }
 /* }}} */
 
@@ -351,7 +380,7 @@ PHP_METHOD(Mosquitto_Client, clearWill)
 
 	retval = mosquitto_will_clear(object->client);
 
-	php_mosquitto_handle_errno(retval, errno TSRMLS_CC);
+	php_mosquitto_handle_errno(retval, errno);
 }
 /* }}} */
 
@@ -364,7 +393,7 @@ PHP_METHOD(Mosquitto_Client, setReconnec
 	zend_bool exponential_backoff = 0;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l|lb",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l|lb",
 				&reconnect_delay, &reconnect_delay_max, &exponential_backoff)  == FAILURE) {
 		PHP_MOSQUITTO_RESTORE_ERRORS();
 		return;
@@ -373,7 +402,7 @@ PHP_METHOD(Mosquitto_Client, setReconnec
 
 	retval = mosquitto_reconnect_delay_set(object->client, reconnect_delay, reconnect_delay_max, exponential_backoff);
 
-	php_mosquitto_handle_errno(retval, errno TSRMLS_CC);
+	php_mosquitto_handle_errno(retval, errno);
 }
 /* }}} */
 
@@ -388,7 +417,7 @@ PHP_METHOD(Mosquitto_Client, connect)
 	zend_long keepalive = 60;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s|lls!",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "s|lls!",
 				&host, &host_len, &port, &keepalive,
 				&interface, &interface_len)  == FAILURE) {
 
@@ -403,7 +432,7 @@ PHP_METHOD(Mosquitto_Client, connect)
 		retval = mosquitto_connect_bind(object->client, host, port, keepalive, interface);
 	}
 
-	php_mosquitto_handle_errno(retval, errno TSRMLS_CC);
+	php_mosquitto_handle_errno(retval, errno);
 	RETURN_LONG(retval);
 }
 /* }}} */
@@ -424,7 +453,7 @@ PHP_METHOD(Mosquitto_Client, disconnect)
 	retval = mosquitto_disconnect(object->client);
 	php_mosquitto_exit_loop(object);
 
-	php_mosquitto_handle_errno(retval, errno TSRMLS_CC);
+	php_mosquitto_handle_errno(retval, errno);
 }
 /* }}} */
 
@@ -436,7 +465,7 @@ PHP_METHOD(Mosquitto_Client, onConnect)
 	zend_fcall_info_cache connect_callback_cache = empty_fcall_info_cache;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "f!",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "f!",
 				&connect_callback, &connect_callback_cache)  == FAILURE) {
 
 		PHP_MOSQUITTO_RESTORE_ERRORS();
@@ -445,7 +474,7 @@ PHP_METHOD(Mosquitto_Client, onConnect)
 	PHP_MOSQUITTO_RESTORE_ERRORS();
 
 	if (!ZEND_FCI_INITIALIZED(connect_callback)) {
-		zend_throw_exception(mosquitto_ce_exception, "Need a valid callback", 0 TSRMLS_CC);
+		zend_throw_exception(mosquitto_ce_exception, "Need a valid callback", 0);
 	}
 
 	PHP_MOSQUITTO_FREE_CALLBACK(object, connect);
@@ -465,7 +494,7 @@ PHP_METHOD(Mosquitto_Client, onDisconnec
 	zend_fcall_info_cache disconnect_callback_cache = empty_fcall_info_cache;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "f!",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "f!",
 				&disconnect_callback, &disconnect_callback_cache)  == FAILURE) {
 
 		PHP_MOSQUITTO_RESTORE_ERRORS();
@@ -474,7 +503,7 @@ PHP_METHOD(Mosquitto_Client, onDisconnec
 	PHP_MOSQUITTO_RESTORE_ERRORS();
 
 	if (!ZEND_FCI_INITIALIZED(disconnect_callback)) {
-		zend_throw_exception(mosquitto_ce_exception, "Need a valid callback", 0 TSRMLS_CC);
+		zend_throw_exception(mosquitto_ce_exception, "Need a valid callback", 0);
 	}
 
 	PHP_MOSQUITTO_FREE_CALLBACK(object, disconnect);
@@ -494,7 +523,7 @@ PHP_METHOD(Mosquitto_Client, onLog)
 	zend_fcall_info_cache log_callback_cache = empty_fcall_info_cache;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "f!",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "f!",
 				&log_callback, &log_callback_cache)  == FAILURE) {
 
 		PHP_MOSQUITTO_RESTORE_ERRORS();
@@ -503,7 +532,7 @@ PHP_METHOD(Mosquitto_Client, onLog)
 	PHP_MOSQUITTO_RESTORE_ERRORS();
 
 	if (!ZEND_FCI_INITIALIZED(log_callback)) {
-		zend_throw_exception(mosquitto_ce_exception, "Need a valid callback", 0 TSRMLS_CC);
+		zend_throw_exception(mosquitto_ce_exception, "Need a valid callback", 0);
 	}
 
 	PHP_MOSQUITTO_FREE_CALLBACK(object, log);
@@ -523,7 +552,7 @@ PHP_METHOD(Mosquitto_Client, onSubscribe
 	zend_fcall_info_cache subscribe_callback_cache = empty_fcall_info_cache;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "f!",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "f!",
 				&subscribe_callback, &subscribe_callback_cache)  == FAILURE) {
 
 		PHP_MOSQUITTO_RESTORE_ERRORS();
@@ -532,7 +561,7 @@ PHP_METHOD(Mosquitto_Client, onSubscribe
 	PHP_MOSQUITTO_RESTORE_ERRORS();
 
 	if (!ZEND_FCI_INITIALIZED(subscribe_callback)) {
-		zend_throw_exception(mosquitto_ce_exception, "Need a valid callback", 0 TSRMLS_CC);
+		zend_throw_exception(mosquitto_ce_exception, "Need a valid callback", 0);
 	}
 
 	PHP_MOSQUITTO_FREE_CALLBACK(object, subscribe);
@@ -552,7 +581,7 @@ PHP_METHOD(Mosquitto_Client, onUnsubscri
 	zend_fcall_info_cache unsubscribe_callback_cache = empty_fcall_info_cache;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "f!",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "f!",
 				&unsubscribe_callback, &unsubscribe_callback_cache)  == FAILURE) {
 
 		PHP_MOSQUITTO_RESTORE_ERRORS();
@@ -561,7 +590,7 @@ PHP_METHOD(Mosquitto_Client, onUnsubscri
 	PHP_MOSQUITTO_RESTORE_ERRORS();
 
 	if (!ZEND_FCI_INITIALIZED(unsubscribe_callback)) {
-		zend_throw_exception(mosquitto_ce_exception, "Need a valid callback", 0 TSRMLS_CC);
+		zend_throw_exception(mosquitto_ce_exception, "Need a valid callback", 0);
 	}
 
 	PHP_MOSQUITTO_FREE_CALLBACK(object, unsubscribe);
@@ -581,7 +610,7 @@ PHP_METHOD(Mosquitto_Client, onMessage)
 	zend_fcall_info_cache message_callback_cache = empty_fcall_info_cache;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "f!",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "f!",
 				&message_callback, &message_callback_cache)  == FAILURE) {
 
 		PHP_MOSQUITTO_RESTORE_ERRORS();
@@ -590,7 +619,7 @@ PHP_METHOD(Mosquitto_Client, onMessage)
 	PHP_MOSQUITTO_RESTORE_ERRORS();
 
 	if (!ZEND_FCI_INITIALIZED(message_callback)) {
-		zend_throw_exception(mosquitto_ce_exception, "Need a valid callback", 0 TSRMLS_CC);
+		zend_throw_exception(mosquitto_ce_exception, "Need a valid callback", 0);
 	}
 
 	PHP_MOSQUITTO_FREE_CALLBACK(object, message);
@@ -610,7 +639,7 @@ PHP_METHOD(Mosquitto_Client, onPublish)
 	zend_fcall_info_cache publish_callback_cache = empty_fcall_info_cache;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "f!",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "f!",
 				&publish_callback, &publish_callback_cache)  == FAILURE) {
 
 		PHP_MOSQUITTO_RESTORE_ERRORS();
@@ -619,7 +648,7 @@ PHP_METHOD(Mosquitto_Client, onPublish)
 	PHP_MOSQUITTO_RESTORE_ERRORS();
 
 	if (!ZEND_FCI_INITIALIZED(publish_callback)) {
-		zend_throw_exception(mosquitto_ce_exception, "Need a valid callback", 0 TSRMLS_CC);
+		zend_throw_exception(mosquitto_ce_exception, "Need a valid callback", 0);
 	}
 
 	PHP_MOSQUITTO_FREE_CALLBACK(object, publish);
@@ -655,7 +684,7 @@ PHP_METHOD(Mosquitto_Client, setMaxInFli
 	zend_long max = 0;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &max)  == FAILURE) {
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l", &max)  == FAILURE) {
 		PHP_MOSQUITTO_RESTORE_ERRORS();
 		return;
 	}
@@ -663,7 +692,7 @@ PHP_METHOD(Mosquitto_Client, setMaxInFli
 
 	retval = mosquitto_max_inflight_messages_set(object->client, max);
 
-	php_mosquitto_handle_errno(retval, errno TSRMLS_CC);
+	php_mosquitto_handle_errno(retval, errno);
 }
 /* }}} */
 
@@ -674,7 +703,7 @@ PHP_METHOD(Mosquitto_Client, setMessageR
 	zend_long retry = 0;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &retry)  == FAILURE) {
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l", &retry)  == FAILURE) {
 		PHP_MOSQUITTO_RESTORE_ERRORS();
 		return;
 	}
@@ -695,7 +724,7 @@ PHP_METHOD(Mosquitto_Client, publish)
 	char *topic, *payload;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "ss|lb",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "ss|lb",
 				&topic, &topic_len, &payload, &payload_len, &qos, &retain) == FAILURE) {
 		PHP_MOSQUITTO_RESTORE_ERRORS();
 		return;
@@ -704,7 +733,7 @@ PHP_METHOD(Mosquitto_Client, publish)
 
 	retval = mosquitto_publish(object->client, &mid, topic, payload_len, (void *) payload, qos, retain);
 
-	php_mosquitto_handle_errno(retval, errno TSRMLS_CC);
+	php_mosquitto_handle_errno(retval, errno);
 
 	RETURN_LONG(mid);
 }
@@ -720,7 +749,7 @@ PHP_METHOD(Mosquitto_Client, subscribe)
 	zend_long qos;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "sl",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "sl",
 				&sub, &sub_len, &qos) == FAILURE) {
 		PHP_MOSQUITTO_RESTORE_ERRORS();
 		return;
@@ -729,7 +758,7 @@ PHP_METHOD(Mosquitto_Client, subscribe)
 
 	retval = mosquitto_subscribe(object->client, &mid, sub, qos);
 
-	php_mosquitto_handle_errno(retval, errno TSRMLS_CC);
+	php_mosquitto_handle_errno(retval, errno);
 
 	RETURN_LONG(mid);
 }
@@ -744,7 +773,7 @@ PHP_METHOD(Mosquitto_Client, unsubscribe
 	int retval, mid;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "s",
 				&sub, &sub_len) == FAILURE) {
 		PHP_MOSQUITTO_RESTORE_ERRORS();
 		return;
@@ -753,7 +782,7 @@ PHP_METHOD(Mosquitto_Client, unsubscribe
 
 	retval = mosquitto_unsubscribe(object->client, &mid, sub);
 
-	php_mosquitto_handle_errno(retval, errno TSRMLS_CC);
+	php_mosquitto_handle_errno(retval, errno);
 
 	RETURN_LONG(mid);
 }
@@ -767,7 +796,7 @@ PHP_METHOD(Mosquitto_Client, loop)
 	long retval = 0;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "|ll",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "|ll",
 				&timeout, &max_packets) == FAILURE) {
 		PHP_MOSQUITTO_RESTORE_ERRORS();
 		return;
@@ -775,7 +804,7 @@ PHP_METHOD(Mosquitto_Client, loop)
 	PHP_MOSQUITTO_RESTORE_ERRORS();
 
 	retval = mosquitto_loop(object->client, timeout, max_packets);
-	php_mosquitto_handle_errno(retval, errno TSRMLS_CC);
+	php_mosquitto_handle_errno(retval, errno);
 }
 /* }}} */
 
@@ -787,7 +816,7 @@ PHP_METHOD(Mosquitto_Client, loopForever
 	long retval = 0;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "|ll",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "|ll",
 				&timeout, &max_packets) == FAILURE) {
 		PHP_MOSQUITTO_RESTORE_ERRORS();
 		return;
@@ -798,7 +827,7 @@ PHP_METHOD(Mosquitto_Client, loopForever
 
 	while (object->looping) {
 		retval = mosquitto_loop(object->client, timeout, max_packets);
-		php_mosquitto_handle_errno(retval, errno TSRMLS_CC);
+		php_mosquitto_handle_errno(retval, errno);
 
 		if (EG(exception)) {
 			break;
@@ -834,8 +863,8 @@ static int strerror_r(int errnum, char *
 
 PHP_MOSQUITTO_API char *php_mosquitto_strerror_wrapper(int err)
 {
-	char *buf = ecalloc(256, sizeof(char));
-	strerror_r(err, buf, 256);
+	char *ret, *buf = ecalloc(256, sizeof(char));
+	ret = strerror_r(err, buf, 256);
 	if (!buf[0]) {
 		efree(buf);
 		return NULL;
@@ -848,7 +877,7 @@ PHP_MOSQUITTO_API void php_mosquitto_exi
 	object->looping = 0;
 }
 
-static void mosquitto_client_object_destroy(zend_object *object ZO_HANDLE_DC TSRMLS_DC)
+static void mosquitto_client_object_destroy(zend_object *object ZO_HANDLE_DC)
 {
 	mosquitto_client_object *client = mosquitto_client_object_from_zend_object(object);
 
@@ -859,11 +888,6 @@ static void mosquitto_client_object_dest
 	mosquitto_destroy(client->client);
 	client->client = NULL;
 
-	if (MQTTG(client_key_len) > 0) {
-		efree(MQTTG(client_key));
-		MQTTG(client_key) = NULL;
-	}
-
 	PHP_MOSQUITTO_FREE_CALLBACK(client, connect);
 	PHP_MOSQUITTO_FREE_CALLBACK(client, subscribe);
 	PHP_MOSQUITTO_FREE_CALLBACK(client, unsubscribe);
@@ -873,77 +897,32 @@ static void mosquitto_client_object_dest
 	PHP_MOSQUITTO_FREE_CALLBACK(client, log);
 }
 
-static void mosquitto_client_object_free(zend_object *object TSRMLS_DC) {
+static void mosquitto_client_object_free(zend_object *object) {
 	mosquitto_client_object *client = mosquitto_client_object_from_zend_object(object);
-
-#ifdef ZEND_ENGINE_3
 	zend_object_std_dtor(object);
-#else
-	if (object->properties) {
-		zend_hash_destroy(object->properties);
-		FREE_HASHTABLE(object->properties);
-	}
-	efree(object);
-#endif
 }
 
-#ifdef ZEND_ENGINE_3
 static zend_object *mosquitto_client_object_new(zend_class_entry *ce) {
 	mosquitto_client_object *client = ecalloc(1, sizeof(mosquitto_client_object) + zend_object_properties_size(ce));
 	zend_object *ret = mosquitto_client_object_to_zend_object(client);
 
-#ifdef MOSQUITTO_NEED_TSRMLS
-	client->TSRMLS_C = TSRMLS_C;
-#endif
-
 	zend_object_std_init(ret, ce);
 	ret->handlers = &mosquitto_std_object_handlers;
 
 	return ret;
 }
-#else
-static zend_object_value mosquitto_client_object_new(zend_class_entry *ce TSRMLS_DC) {
-
-	zend_object_value retval;
-	mosquitto_client_object *client;
-#if PHP_VERSION_ID < 50399
-	zval *temp;
-#endif
-
-	client = ecalloc(1, sizeof(mosquitto_client_object));
-	client->std.ce = ce;
-	client->client = NULL;
-
-#ifdef MOSQUITTO_NEED_TSRMLS
-	client->TSRMLS_C = TSRMLS_C;
-#endif
-
-	ALLOC_HASHTABLE(client->std.properties);
-	zend_hash_init(client->std.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-	zend_hash_copy(client->std.properties, &ce->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
-#else
-	object_properties_init(&client->std, ce);
-#endif
-	retval.handle = zend_objects_store_put(client,
-		(zend_objects_store_dtor_t)mosquitto_client_object_destroy,
-		(zend_objects_free_object_storage_t)mosquitto_client_object_free, NULL TSRMLS_CC);
-	retval.handlers = &mosquitto_std_object_handlers;
-	return retval;
-}
-#endif
 
-void php_mosquitto_handle_errno(int retval, int err TSRMLS_DC) {
+void php_mosquitto_handle_errno(int retval, int err) {
 	if (retval == MOSQ_ERR_ERRNO) {
 		char *message = php_mosquitto_strerror_wrapper(errno);
 		if (message) {
-			zend_throw_exception(mosquitto_ce_exception, message, 0 TSRMLS_CC);
+			zend_throw_exception(mosquitto_ce_exception, message, 0);
 			efree(message);
 		}
 	} else if (retval != MOSQ_ERR_SUCCESS) {
 		const char *message = mosquitto_strerror(retval);
 		if (message && *message) {
-			zend_throw_exception(mosquitto_ce_exception, message, 0 TSRMLS_CC);
+			zend_throw_exception(mosquitto_ce_exception, message, 0);
 		}
 	}
 }
@@ -951,199 +930,100 @@ void php_mosquitto_handle_errno(int retv
 PHP_MOSQUITTO_API void php_mosquitto_connect_callback(struct mosquitto *mosq, void *obj, int rc)
 {
 	mosquitto_client_object *object = (mosquitto_client_object*)obj;
-#ifdef ZEND_ENGINE_3
 	zval params[2], retval;
-#else
-	zval *retval_ptr = NULL, *rc_zval = NULL, *message_zval = NULL;
-	zval **params[2];
-#endif
 	const char *message;
-#ifdef MOSQUITTO_NEED_TSRMLS
-	TSRMLS_D = object->TSRMLS_C;
-#endif
 
 	if (!ZEND_FCI_INITIALIZED(object->connect_callback)) {
 		return;
 	}
 
 	message = mosquitto_connack_string(rc);
-#ifdef ZEND_ENGINE_3
 	ZVAL_LONG(&params[0], rc);
 	ZVAL_STRING(&params[1], message);
 
 	ZVAL_UNDEF(&retval);
 	object->connect_callback.retval = &retval;
-#else
-	MAKE_STD_ZVAL(rc_zval);
-	ZVAL_LONG(rc_zval, rc);
-	params[0] = &rc_zval;
-
-	MAKE_STD_ZVAL(message_zval);
-	ZVAL_STRING(message_zval, message, 1);
-	params[1] = &message_zval;
-
-	object->connect_callback.retval_ptr_ptr = &retval_ptr;
-#endif
-
 	object->connect_callback.params = params;
 	object->connect_callback.param_count = 2;
 
-	if (zend_call_function(&object->connect_callback, &object->connect_callback_cache TSRMLS_CC) == FAILURE) {
+	if (zend_call_function(&object->connect_callback, &object->connect_callback_cache) == FAILURE) {
 		if (!EG(exception)) {
-			zend_throw_exception_ex(mosquitto_ce_exception, 0 TSRMLS_CC, "Failed to invoke connect callback %s()", mosquitto_finfo_name(&object->connect_callback));
+			zend_throw_exception_ex(mosquitto_ce_exception, 0, "Failed to invoke connect callback %s()", mosquitto_finfo_name(&object->connect_callback));
 		}
 	}
 
-#ifdef ZEND_ENGINE_3
 	zval_ptr_dtor(&params[0]);
 	zval_ptr_dtor(&params[1]);
 	zval_ptr_dtor(&retval);
-#else
-	zval_ptr_dtor(&rc_zval);
-	zval_ptr_dtor(&message_zval);
-
-	if (retval_ptr != NULL) {
-		zval_ptr_dtor(&retval_ptr);
-	}
-#endif
 }
 
 PHP_MOSQUITTO_API void php_mosquitto_disconnect_callback(struct mosquitto *mosq, void *obj, int rc)
 {
 	mosquitto_client_object *object = (mosquitto_client_object*)obj;
-#ifdef ZEND_ENGINE_3
 	zval params[1], retval;
-#else
-	zval *retval_ptr = NULL, *rc_zval = NULL;
-	zval **params[1];
-#endif
-#ifdef MOSQUITTO_NEED_TSRMLS
-	TSRMLS_D = object->TSRMLS_C;
-#endif
 
 	if (!ZEND_FCI_INITIALIZED(object->disconnect_callback)) {
 		return;
 	}
 
-#ifdef ZEND_ENGINE_3
 	ZVAL_LONG(&params[0], rc);
 	ZVAL_UNDEF(&retval);
 
 	object->disconnect_callback.retval = &retval;
-#else
-	MAKE_STD_ZVAL(rc_zval);
-	ZVAL_LONG(rc_zval, rc);
-	params[0] = &rc_zval;
-
-	object->disconnect_callback.retval_ptr_ptr = &retval_ptr;
-#endif
-
 	object->disconnect_callback.params = params;
 	object->disconnect_callback.param_count = 1;
 
-	if (zend_call_function(&object->disconnect_callback, &object->disconnect_callback_cache TSRMLS_CC) == FAILURE) {
+	if (zend_call_function(&object->disconnect_callback, &object->disconnect_callback_cache) == FAILURE) {
 		if (!EG(exception)) {
-			zend_throw_exception_ex(mosquitto_ce_exception, 0 TSRMLS_CC, "Failed to invoke disconnect callback %s()", mosquitto_finfo_name(&object->disconnect_callback));
+			zend_throw_exception_ex(mosquitto_ce_exception, 0, "Failed to invoke disconnect callback %s()", mosquitto_finfo_name(&object->disconnect_callback));
 		}
 	}
 
-#ifdef ZEND_ENGINE_3
 	zval_ptr_dtor(&params[0]);
 	zval_ptr_dtor(&retval);
-#else
-	zval_ptr_dtor(&rc_zval);
-
-	if (retval_ptr != NULL) {
-		zval_ptr_dtor(&retval_ptr);
-	}
-#endif
 }
 
 PHP_MOSQUITTO_API void php_mosquitto_log_callback(struct mosquitto *mosq, void *obj, int level, const char *str)
 {
 	mosquitto_client_object *object = (mosquitto_client_object*)obj;
-#ifdef ZEND_ENGINE_3
 	zval params[2], retval;
-#else
-	zval *retval_ptr = NULL, *level_zval = NULL, *str_zval = NULL;
-	zval **params[2];
-#endif
-#ifdef MOSQUITTO_NEED_TSRMLS
-	TSRMLS_D = object->TSRMLS_C;
-#endif
 
 	if (!ZEND_FCI_INITIALIZED(object->log_callback)) {
 		return;
 	}
 
-#ifdef ZEND_ENGINE_3
 	ZVAL_LONG(&params[0], level);
 	ZVAL_STRING(&params[1], str);
 	ZVAL_UNDEF(&retval);
 
 	object->log_callback.retval = &retval;
-#else
-	MAKE_STD_ZVAL(level_zval);
-	ZVAL_LONG(level_zval, level);
-	MAKE_STD_ZVAL(str_zval);
-	ZVAL_STRING(str_zval, str, 1);
-
-	params[0] = &level_zval;
-	params[1] = &str_zval;
-
-	object->log_callback.retval_ptr_ptr = &retval_ptr;
-#endif
-
 	object->log_callback.params = params;
 	object->log_callback.param_count = 2;
 
-	if (zend_call_function(&object->log_callback, &object->log_callback_cache TSRMLS_CC) == FAILURE) {
+	if (zend_call_function(&object->log_callback, &object->log_callback_cache) == FAILURE) {
 		if (!EG(exception)) {
-			zend_throw_exception_ex(mosquitto_ce_exception, 0 TSRMLS_CC, "Failed to invoke log callback %s()", mosquitto_finfo_name(&object->log_callback));
+			zend_throw_exception_ex(mosquitto_ce_exception, 0, "Failed to invoke log callback %s()", mosquitto_finfo_name(&object->log_callback));
 		}
 	}
 
-#ifdef ZEND_ENGINE_3
 	zval_ptr_dtor(&params[0]);
 	zval_ptr_dtor(&params[1]);
 	zval_ptr_dtor(&retval);
-#else
-	zval_ptr_dtor(params[0]);
-	zval_ptr_dtor(params[1]);
-
-	if (retval_ptr != NULL) {
-		zval_ptr_dtor(&retval_ptr);
-	}
-#endif
 }
 
 PHP_MOSQUITTO_API void php_mosquitto_message_callback(struct mosquitto *mosq, void *client_obj, const struct mosquitto_message *message)
 {
 	mosquitto_client_object *object = (mosquitto_client_object*)client_obj;
 	mosquitto_message_object *message_object;
-#ifdef ZEND_ENGINE_3
 	zval params[1], retval, *message_zval;
-#else
-	zval *retval_ptr = NULL, *message_zval = NULL;
-	zval **params[1];
-#endif
-#ifdef MOSQUITTO_NEED_TSRMLS
-	TSRMLS_D = object->TSRMLS_C;
-#endif
 
 	if (!ZEND_FCI_INITIALIZED(object->message_callback)) {
 		return;
 	}
 
-#ifdef ZEND_ENGINE_3
 	message_zval = &params[0];
 	ZVAL_UNDEF(&retval);
 	object->message_callback.retval = &retval;
-#else
-	MAKE_STD_ZVAL(message_zval);
-	params[0] = &message_zval;
-	object->message_callback.retval_ptr_ptr = &retval_ptr;
-#endif
 
 	object_init_ex(message_zval, mosquitto_ce_message);
 	message_object = mosquitto_message_object_from_zend_object(Z_OBJ_P(message_zval));
@@ -1161,86 +1041,46 @@ PHP_MOSQUITTO_API void php_mosquitto_mes
 	object->message_callback.params = params;
 	object->message_callback.param_count = 1;
 
-	if (zend_call_function(&object->message_callback, &object->message_callback_cache TSRMLS_CC) == FAILURE) {
+	if (zend_call_function(&object->message_callback, &object->message_callback_cache) == FAILURE) {
 		if (!EG(exception)) {
-			zend_throw_exception_ex(mosquitto_ce_exception, 0 TSRMLS_CC, "Failed to invoke message callback %s()", mosquitto_finfo_name(&object->message_callback));
+			zend_throw_exception_ex(mosquitto_ce_exception, 0, "Failed to invoke message callback %s()", mosquitto_finfo_name(&object->message_callback));
 		}
 	}
 
-#ifdef ZEND_ENGINE_3
 	zval_ptr_dtor(&params[0]);
 	zval_ptr_dtor(&retval);
-#else
-	zval_ptr_dtor(&message_zval);
-
-	if (retval_ptr != NULL) {
-		zval_ptr_dtor(&retval_ptr);
-	}
-#endif
 }
 
 
 PHP_MOSQUITTO_API void php_mosquitto_publish_callback(struct mosquitto *mosq, void *client_obj, int mid)
 {
 	mosquitto_client_object *object = (mosquitto_client_object*)client_obj;
-#ifdef ZEND_ENGINE_3
 	zval params[1], retval;
-#else
-	zval *retval_ptr = NULL, *mid_zval;
-	zval **params[1];
-#endif
-#ifdef MOSQUITTO_NEED_TSRMLS
-	TSRMLS_D = object->TSRMLS_C;
-#endif
 
 	if (!ZEND_FCI_INITIALIZED(object->publish_callback)) {
 		return;
 	}
 
-#ifdef ZEND_ENGINE_3
 	ZVAL_LONG(&params[0], mid);
 	ZVAL_UNDEF(&retval);
 	object->publish_callback.retval = &retval;
-#else
-	MAKE_STD_ZVAL(mid_zval);
-	ZVAL_LONG(mid_zval, mid);
-	params[0] = &mid_zval;
-	object->publish_callback.retval_ptr_ptr = &retval_ptr;
-#endif
-
 	object->publish_callback.params = params;
 	object->publish_callback.param_count = 1;
 
-	if (zend_call_function(&object->publish_callback, &object->publish_callback_cache TSRMLS_CC) == FAILURE) {
+	if (zend_call_function(&object->publish_callback, &object->publish_callback_cache) == FAILURE) {
 		if (!EG(exception)) {
-			zend_throw_exception_ex(mosquitto_ce_exception, 0 TSRMLS_CC, "Failed to invoke publish callback %s()", mosquitto_finfo_name(&object->publish_callback));
+			zend_throw_exception_ex(mosquitto_ce_exception, 0, "Failed to invoke publish callback %s()", mosquitto_finfo_name(&object->publish_callback));
 		}
 	}
 
-#ifdef ZEND_ENGINE_3
 	zval_ptr_dtor(&params[0]);
 	zval_ptr_dtor(&retval);
-#else
-	zval_ptr_dtor(params[0]);
-
-	if (retval_ptr != NULL) {
-		zval_ptr_dtor(&retval_ptr);
-	}
-#endif
 }
 
 PHP_MOSQUITTO_API void php_mosquitto_subscribe_callback(struct mosquitto *mosq, void *client_obj, int mid, int qos_count, const int *granted_qos)
 {
 	mosquitto_client_object *object = (mosquitto_client_object*)client_obj;
-#ifdef ZEND_ENGINE_3
 	zval params[3], retval;
-#else
-	zval *retval_ptr = NULL, *mid_zval, *qos_count_zval, *granted_qos_zval;
-	zval **params[3];
-#endif
-#ifdef MOSQUITTO_NEED_TSRMLS
-	TSRMLS_D = object->TSRMLS_C;
-#endif
 
 	if (!ZEND_FCI_INITIALIZED(object->subscribe_callback)) {
 		return;
@@ -1248,105 +1088,54 @@ PHP_MOSQUITTO_API void php_mosquitto_sub
 
 	/* Since we can only subscribe to one topic per message, it seems reasonable to
 	 * take just the first entry from granted_qos as the granted QoS value */
-#ifdef ZEND_ENGINE_3
 	ZVAL_LONG(&params[0], mid);
 	ZVAL_LONG(&params[1], qos_count);
 	ZVAL_LONG(&params[2], *granted_qos);
 	ZVAL_UNDEF(&retval);
 
 	object->subscribe_callback.retval = &retval;
-#else
-	MAKE_STD_ZVAL(mid_zval);
-	MAKE_STD_ZVAL(qos_count_zval);
-	MAKE_STD_ZVAL(granted_qos_zval);
-	ZVAL_LONG(mid_zval, mid);
-	ZVAL_LONG(qos_count_zval, qos_count);
-	ZVAL_LONG(granted_qos_zval, *granted_qos);
-	params[0] = &mid_zval;
-	params[1] = &qos_count_zval;
-	params[2] = &granted_qos_zval;
-
-	object->subscribe_callback.retval_ptr_ptr = &retval_ptr;
-#endif
-
 	object->subscribe_callback.params = params;
 	object->subscribe_callback.param_count = 3;
 
-	if (zend_call_function(&object->subscribe_callback, &object->subscribe_callback_cache TSRMLS_CC) == FAILURE) {
+	if (zend_call_function(&object->subscribe_callback, &object->subscribe_callback_cache) == FAILURE) {
 		if (!EG(exception)) {
-			zend_throw_exception_ex(mosquitto_ce_exception, 0 TSRMLS_CC, "Failed to invoke subscribe callback %s()", mosquitto_finfo_name(&object->subscribe_callback));
+			zend_throw_exception_ex(mosquitto_ce_exception, 0, "Failed to invoke subscribe callback %s()", mosquitto_finfo_name(&object->subscribe_callback));
 		}
 	}
 
-#ifdef ZEND_ENGINE_3
 	zval_ptr_dtor(&params[0]);
 	zval_ptr_dtor(&params[1]);
 	zval_ptr_dtor(&params[2]);
 	zval_ptr_dtor(&retval);
-#else
-	zval_ptr_dtor(params[0]);
-	zval_ptr_dtor(params[1]);
-	zval_ptr_dtor(params[2]);
-
-	if (retval_ptr != NULL) {
-		zval_ptr_dtor(&retval_ptr);
-	}
-#endif
 }
 
 PHP_MOSQUITTO_API void php_mosquitto_unsubscribe_callback(struct mosquitto *mosq, void *client_obj, int mid)
 {
 	mosquitto_client_object *object = (mosquitto_client_object*)client_obj;
-#ifdef ZEND_ENGINE_3
 	zval params[1], retval;
-#else
-	zval *retval_ptr = NULL, *mid_zval;
-	zval **params[1];
-#endif
-#ifdef MOSQUITTO_NEED_TSRMLS
-	TSRMLS_D = object->TSRMLS_C;
-#endif
 
 	if (!ZEND_FCI_INITIALIZED(object->unsubscribe_callback)) {
 		return;
 	}
 
-#ifdef ZEND_ENGINE_3
 	ZVAL_LONG(&params[0], mid);
 	ZVAL_UNDEF(&retval);
 
 	object->unsubscribe_callback.retval = &retval;
-#else
-	MAKE_STD_ZVAL(mid_zval);
-	ZVAL_LONG(mid_zval, mid);
-	params[0] = &mid_zval;
-
-	object->unsubscribe_callback.retval_ptr_ptr = &retval_ptr;
-#endif
-
 	object->unsubscribe_callback.params = params;
 	object->unsubscribe_callback.param_count = 1;
 
-	if (zend_call_function(&object->unsubscribe_callback, &object->unsubscribe_callback_cache TSRMLS_CC) == FAILURE) {
+	if (zend_call_function(&object->unsubscribe_callback, &object->unsubscribe_callback_cache) == FAILURE) {
 		if (!EG(exception)) {
-			zend_throw_exception_ex(mosquitto_ce_exception, 0 TSRMLS_CC, "Failed to invoke unsubscribe callback %s()", mosquitto_finfo_name(&object->unsubscribe_callback));
+			zend_throw_exception_ex(mosquitto_ce_exception, 0, "Failed to invoke unsubscribe callback %s()", mosquitto_finfo_name(&object->unsubscribe_callback));
 		}
 	}
 
-#ifdef ZEND_ENGINE_3
 	zval_ptr_dtor(&params[0]);
 	zval_ptr_dtor(&retval);
-#else
-	zval_ptr_dtor(params[0]);
-
-	if (retval_ptr != NULL) {
-		zval_ptr_dtor(&retval_ptr);
-	}
-#endif
 }
 
 static int php_mosquitto_pw_callback(char *buf, int size, int rwflag, void *userdata) {
-	TSRMLS_FETCH();
 	int key_len;
 
 	strncpy(buf, MQTTG(client_key), size);
@@ -1360,32 +1149,32 @@ static int php_mosquitto_pw_callback(cha
 /* {{{ mosquitto_client_methods */
 const zend_function_entry mosquitto_client_methods[] = {
 	PHP_ME(Mosquitto_Client, __construct, Mosquitto_Client___construct_args, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
-	PHP_ME(Mosquitto_Client, onConnect, Mosquitto_Client_callback_args, ZEND_ACC_PUBLIC)
-	PHP_ME(Mosquitto_Client, onDisconnect, Mosquitto_Client_callback_args, ZEND_ACC_PUBLIC)
-	PHP_ME(Mosquitto_Client, onLog, Mosquitto_Client_callback_args, ZEND_ACC_PUBLIC)
-	PHP_ME(Mosquitto_Client, onSubscribe, Mosquitto_Client_callback_args, ZEND_ACC_PUBLIC)
-	PHP_ME(Mosquitto_Client, onUnsubscribe, Mosquitto_Client_callback_args, ZEND_ACC_PUBLIC)
-	PHP_ME(Mosquitto_Client, onMessage, Mosquitto_Client_callback_args, ZEND_ACC_PUBLIC)
-	PHP_ME(Mosquitto_Client, onPublish, Mosquitto_Client_callback_args, ZEND_ACC_PUBLIC)
-	PHP_ME(Mosquitto_Client, getSocket, NULL, ZEND_ACC_PUBLIC)
-	PHP_ME(Mosquitto_Client, setTlsCertificates, NULL, ZEND_ACC_PUBLIC)
-	PHP_ME(Mosquitto_Client, setTlsInsecure, NULL, ZEND_ACC_PUBLIC)
-	PHP_ME(Mosquitto_Client, setTlsOptions, NULL, ZEND_ACC_PUBLIC)
-	PHP_ME(Mosquitto_Client, setTlsPSK, NULL, ZEND_ACC_PUBLIC)
+	PHP_ME(Mosquitto_Client, onConnect, Mosquitto_Client_onConnect_args, ZEND_ACC_PUBLIC)
+	PHP_ME(Mosquitto_Client, onDisconnect, Mosquitto_Client_onDisconnect_args, ZEND_ACC_PUBLIC)
+	PHP_ME(Mosquitto_Client, onLog, Mosquitto_Client_onLog_args, ZEND_ACC_PUBLIC)
+	PHP_ME(Mosquitto_Client, onSubscribe, Mosquitto_Client_onSubscribe_args, ZEND_ACC_PUBLIC)
+	PHP_ME(Mosquitto_Client, onUnsubscribe, Mosquitto_Client_onUnsubscribe_args, ZEND_ACC_PUBLIC)
+	PHP_ME(Mosquitto_Client, onMessage, Mosquitto_Client_onMessage_args, ZEND_ACC_PUBLIC)
+	PHP_ME(Mosquitto_Client, onPublish, Mosquitto_Client_onPublish_args, ZEND_ACC_PUBLIC)
+	PHP_ME(Mosquitto_Client, getSocket, Mosquitto_Client_getSocket_args, ZEND_ACC_PUBLIC)
+	PHP_ME(Mosquitto_Client, setTlsCertificates, Mosquitto_Client_setTlsCertificates_args, ZEND_ACC_PUBLIC)
+	PHP_ME(Mosquitto_Client, setTlsInsecure, Mosquitto_Client_setTlsInsecure_args, ZEND_ACC_PUBLIC)
+	PHP_ME(Mosquitto_Client, setTlsOptions, Mosquitto_Client_setTlsOptions_args, ZEND_ACC_PUBLIC)
+	PHP_ME(Mosquitto_Client, setTlsPSK, Mosquitto_Client_setTlsPSK_args, ZEND_ACC_PUBLIC)
 	PHP_ME(Mosquitto_Client, setCredentials, Mosquitto_Client_setCredentials_args, ZEND_ACC_PUBLIC)
 	PHP_ME(Mosquitto_Client, setWill, Mosquitto_Client_setWill_args, ZEND_ACC_PUBLIC)
-	PHP_ME(Mosquitto_Client, clearWill, NULL, ZEND_ACC_PUBLIC)
+	PHP_ME(Mosquitto_Client, clearWill, Mosquitto_Client_void_args, ZEND_ACC_PUBLIC)
 	PHP_ME(Mosquitto_Client, setReconnectDelay, Mosquitto_Client_setReconnectDelay_args, ZEND_ACC_PUBLIC)
 	PHP_ME(Mosquitto_Client, setMessageRetry, Mosquitto_Client_setMessageRetry_args, ZEND_ACC_PUBLIC)
 	PHP_ME(Mosquitto_Client, connect, Mosquitto_Client_connect_args, ZEND_ACC_PUBLIC)
-	PHP_ME(Mosquitto_Client, disconnect, NULL, ZEND_ACC_PUBLIC)
+	PHP_ME(Mosquitto_Client, disconnect, Mosquitto_Client_void_args, ZEND_ACC_PUBLIC)
 	PHP_ME(Mosquitto_Client, setMaxInFlightMessages, Mosquitto_Client_setMaxInFlightMessages_args, ZEND_ACC_PUBLIC)
 	PHP_ME(Mosquitto_Client, publish, Mosquitto_Client_publish_args, ZEND_ACC_PUBLIC)
 	PHP_ME(Mosquitto_Client, subscribe, Mosquitto_Client_subscribe_args, ZEND_ACC_PUBLIC)
 	PHP_ME(Mosquitto_Client, unsubscribe, Mosquitto_Client_unsubscribe_args, ZEND_ACC_PUBLIC)
 	PHP_ME(Mosquitto_Client, loop, Mosquitto_Client_loop_args, ZEND_ACC_PUBLIC)
 	PHP_ME(Mosquitto_Client, loopForever, Mosquitto_Client_loopForever_args, ZEND_ACC_PUBLIC)
-	PHP_ME(Mosquitto_Client, exitLoop, NULL, ZEND_ACC_PUBLIC)
+	PHP_ME(Mosquitto_Client, exitLoop, Mosquitto_Client_void_args, ZEND_ACC_PUBLIC)
 	{NULL, NULL, NULL}
 };
 /* }}} */
@@ -1398,9 +1187,7 @@ const zend_function_entry mosquitto_func
 
 /* {{{ mosquitto_module_entry */
 zend_module_entry mosquitto_module_entry = {
-#if ZEND_MODULE_API_NO >= 20010901
 	STANDARD_MODULE_HEADER,
-#endif
 	"mosquitto",
 	NULL,
 	PHP_MINIT(mosquitto),
@@ -1408,9 +1195,7 @@ zend_module_entry mosquitto_module_entry
 	NULL,
 	NULL,
 	PHP_MINFO(mosquitto),
-#if ZEND_MODULE_API_NO >= 20010901
 	PHP_MOSQUITTO_VERSION,
-#endif
 	PHP_MODULE_GLOBALS(mosquitto),
 	NULL,
 	NULL,
@@ -1430,25 +1215,19 @@ PHP_MINIT_FUNCTION(mosquitto)
 
 	memcpy(&mosquitto_std_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
 	mosquitto_std_object_handlers.clone_obj = NULL;
-#ifdef ZEND_ENGINE_3
 	mosquitto_std_object_handlers.offset    = XtOffsetOf(mosquitto_client_object, std);
 	mosquitto_std_object_handlers.free_obj  = mosquitto_client_object_free;
 	mosquitto_std_object_handlers.dtor_obj  = mosquitto_client_object_destroy;
-#endif
 
 	INIT_NS_CLASS_ENTRY(client_ce, "Mosquitto", "Client", mosquitto_client_methods);
-	mosquitto_ce_client = zend_register_internal_class(&client_ce TSRMLS_CC);
+	mosquitto_ce_client = zend_register_internal_class(&client_ce);
 	mosquitto_ce_client->create_object = mosquitto_client_object_new;
 
 	INIT_NS_CLASS_ENTRY(exception_ce, "Mosquitto", "Exception", NULL);
-	mosquitto_ce_exception = zend_register_internal_class_ex(&exception_ce, zend_exception_get_default(TSRMLS_C)
-#ifndef ZEND_ENGINE_3
-			, "Exception" TSRMLS_CC
-#endif
-	);
+	mosquitto_ce_exception = zend_register_internal_class_ex(&exception_ce, zend_exception_get_default());
 
 	#define REGISTER_MOSQUITTO_LONG_CONST(const_name, value) \
-	zend_declare_class_constant_long(mosquitto_ce_client, const_name, sizeof(const_name)-1, (long)value TSRMLS_CC); \
+	zend_declare_class_constant_long(mosquitto_ce_client, const_name, sizeof(const_name)-1, (long)value); \
 	REGISTER_LONG_CONSTANT(#value,  value,  CONST_CS | CONST_PERSISTENT);
 
 	REGISTER_MOSQUITTO_LONG_CONST("LOG_INFO", MOSQ_LOG_INFO);
@@ -1456,9 +1235,9 @@ PHP_MINIT_FUNCTION(mosquitto)
 	REGISTER_MOSQUITTO_LONG_CONST("LOG_WARNING", MOSQ_LOG_WARNING);
 	REGISTER_MOSQUITTO_LONG_CONST("LOG_ERR", MOSQ_LOG_ERR);
 	REGISTER_MOSQUITTO_LONG_CONST("LOG_DEBUG", MOSQ_LOG_DEBUG);
-	
-	REGISTER_MOSQUITTO_LONG_CONST("SSL_VERIFY_NONE", 0);
-	REGISTER_MOSQUITTO_LONG_CONST("SSL_VERIFY_PEER", 1);
+
+	zend_declare_class_constant_long(mosquitto_ce_client, "SSL_VERIFY_NONE", sizeof("SSL_VERIFY_NONE")-1, 0);
+	zend_declare_class_constant_long(mosquitto_ce_client, "SSL_VERIFY_PEER", sizeof("SSL_VERIFY_PEER")-1, 1);
 
 	mosquitto_lib_init();
 
--- a/mosquitto_message.c
+++ b/mosquitto_message.c
@@ -14,24 +14,20 @@ zend_class_entry *mosquitto_ce_message;
 static zend_object_handlers mosquitto_message_object_handlers;
 static HashTable php_mosquitto_message_properties;
 
-#ifdef ZEND_ENGINE_3
 typedef size_t mosquitto_strlen_type;
-#else
-# ifndef Z_OBJ_P
-#  define Z_OBJ_P(pzv) ((zend_object*)zend_object_store_get_object(pzv TSRMLS_CC))
-# endif
-typedef int mosquitto_strlen_type;
-#endif
 
 /* {{{ Arginfo */
 
-ZEND_BEGIN_ARG_INFO(Mosquitto_Message_topicMatchesSub_args, ZEND_SEND_BY_VAL)
-	ZEND_ARG_INFO(0, topic)
-	ZEND_ARG_INFO(0, subscription)
+ZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(Mosquitto_Message_topicMatchesSub_args, 0, 2, _IS_BOOL, 0)
+	ZEND_ARG_TYPE_INFO(0, topic, IS_STRING, 0)
+	ZEND_ARG_TYPE_INFO(0, subscription, IS_STRING, 0)
 ZEND_END_ARG_INFO()
 
-ZEND_BEGIN_ARG_INFO(Mosquitto_Message_tokeniseTopic_args, ZEND_SEND_BY_VAL)
-	ZEND_ARG_INFO(0, topic)
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Message_tokeniseTopic_args, 0, 0, 1)
+	ZEND_ARG_TYPE_INFO(0, topic, IS_STRING, 0)
+ZEND_END_ARG_INFO()
+
+ZEND_BEGIN_ARG_INFO_EX(Mosquitto_Message_void_args, 0, 0, 0)
 ZEND_END_ARG_INFO()
 
 /* }}} */
@@ -54,7 +50,7 @@ PHP_METHOD(Mosquitto_Message, topicMatch
 	zend_bool result;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "ss",
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "ss",
 				&topic, &topic_len, &subscription, &subscription_len) == FAILURE) {
 		PHP_MOSQUITTO_RESTORE_ERRORS();
 		return;
@@ -73,7 +69,7 @@ PHP_METHOD(Mosquitto_Message, tokeniseTo
 	mosquitto_strlen_type topic_len = 0, retval = 0, count = 0, i = 0;
 
 	PHP_MOSQUITTO_ERROR_HANDLING();
-	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &topic, &topic_len) == FAILURE) {
+	if (zend_parse_parameters(ZEND_NUM_ARGS(), "s", &topic, &topic_len) == FAILURE) {
 		PHP_MOSQUITTO_RESTORE_ERRORS();
 		return;
 	}
@@ -82,7 +78,7 @@ PHP_METHOD(Mosquitto_Message, tokeniseTo
 	retval = mosquitto_sub_topic_tokenise(topic, &topics, (int*)&count);
 
 	if (retval == MOSQ_ERR_NOMEM) {
-		zend_throw_exception_ex(mosquitto_ce_exception, 0 TSRMLS_CC, "Failed to tokenise topic");
+		zend_throw_exception_ex(mosquitto_ce_exception, 0, "Failed to tokenise topic");
 		return;
 	}
 
@@ -91,11 +87,7 @@ PHP_METHOD(Mosquitto_Message, tokeniseTo
 		if (topics[i] == NULL) {
 			add_next_index_null(return_value);
 		} else {
-#ifdef ZEND_ENGINE_3
 			add_next_index_string(return_value, topics[i]);
-#else
-			add_next_index_string(return_value, topics[i], 1);
-#endif
 		}
 	}
 
@@ -106,7 +98,6 @@ PHP_METHOD(Mosquitto_Message, tokeniseTo
 PHP_MOSQUITTO_MESSAGE_LONG_PROPERTY_READER_FUNCTION(mid);
 PHP_MOSQUITTO_MESSAGE_LONG_PROPERTY_READER_FUNCTION(qos);
 
-#ifdef ZEND_ENGINE_3
 static int php_mosquitto_message_read_retain(mosquitto_message_object *mosquitto_object, zval *retval)
 {
 	ZVAL_BOOL(retval, mosquitto_object->message.retain);
@@ -129,46 +120,18 @@ static int php_mosquitto_message_read_pa
 	ZVAL_STRINGL(retval, mosquitto_object->message.payload, mosquitto_object->message.payloadlen);
 	return SUCCESS;
 }
-#else
-static int php_mosquitto_message_read_retain(mosquitto_message_object *mosquitto_object, zval **retval TSRMLS_DC)
-{
-	MAKE_STD_ZVAL(*retval);
-	ZVAL_BOOL(*retval, mosquitto_object->message.retain);
-	return SUCCESS;
-}
-
-static int php_mosquitto_message_read_topic(mosquitto_message_object *mosquitto_object, zval **retval TSRMLS_DC)
-{
-	MAKE_STD_ZVAL(*retval);
-
-	if (mosquitto_object->message.topic != NULL) {
-		ZVAL_STRING(*retval, mosquitto_object->message.topic, 1);
-	} else {
-		ZVAL_NULL(*retval);
-	}
-
-	return SUCCESS;
-}
-
-static int php_mosquitto_message_read_payload(mosquitto_message_object *mosquitto_object, zval **retval TSRMLS_DC)
-{
-	MAKE_STD_ZVAL(*retval);
-	ZVAL_STRINGL(*retval, mosquitto_object->message.payload, mosquitto_object->message.payloadlen, 1);
-	return SUCCESS;
-}
-#endif
 
 PHP_MOSQUITTO_MESSAGE_LONG_PROPERTY_WRITER_FUNCTION(mid);
 PHP_MOSQUITTO_MESSAGE_LONG_PROPERTY_WRITER_FUNCTION(qos);
 
-static int php_mosquitto_message_write_retain(mosquitto_message_object *mosquitto_object, zval *newval TSRMLS_DC)
+static int php_mosquitto_message_write_retain(mosquitto_message_object *mosquitto_object, zval *newval)
 {
 	mosquitto_object->message.retain = zend_is_true(newval);
 
 	return SUCCESS;
 }
 
-static int php_mosquitto_message_write_topic(mosquitto_message_object *mosquitto_object, zval *newval TSRMLS_DC)
+static int php_mosquitto_message_write_topic(mosquitto_message_object *mosquitto_object, zval *newval)
 {
 	zval ztmp;
 	if (Z_TYPE_P(newval) != IS_STRING) {
@@ -192,7 +155,7 @@ static int php_mosquitto_message_write_t
 	return SUCCESS;
 }
 
-static int php_mosquitto_message_write_payload(mosquitto_message_object *mosquitto_object, zval *newval TSRMLS_DC)
+static int php_mosquitto_message_write_payload(mosquitto_message_object *mosquitto_object, zval *newval)
 {
 	zval ztmp;
 	if (Z_TYPE_P(newval) != IS_STRING) {
@@ -227,125 +190,66 @@ const php_mosquitto_prop_handler php_mos
 	{NULL, 0, NULL, NULL}
 };
 
-#ifdef ZEND_ENGINE_3
-# define READ_PROPERTY_DC , void **cache_slot, zval *retval
-# define READ_PROPERTY_CC , cache_slot, retval
-# define WRITE_PROPERTY_DC , void **cache_slot
-# define WRITE_PROPERTY_CC , cache_slot
-# define HAS_PROPERTY_DC , void **cache_slot
-# define HAS_PROPERTY_CC , cache_slot
+#define READ_PROPERTY_DC , void **cache_slot, zval *retval
+#define READ_PROPERTY_CC , cache_slot, retval
+#define WRITE_PROPERTY_DC , void **cache_slot
+#define WRITE_PROPERTY_CC , cache_slot
+#define HAS_PROPERTY_DC , void **cache_slot
+#define HAS_PROPERTY_CC , cache_slot
 
-static php_mosquitto_prop_handler *mosquitto_get_prop_handler(zval *prop) {
-	zval *ret = zend_hash_find(&php_mosquitto_message_properties, Z_STR_P(prop));
+static php_mosquitto_prop_handler *mosquitto_get_prop_handler(zend_string *prop) {
+	zval *ret = zend_hash_find(&php_mosquitto_message_properties, prop); //Z_STR_P(prop)
 	if (!ret || Z_TYPE_P(ret) != IS_PTR) {
 		return NULL;
 	}
 	return (php_mosquitto_prop_handler*)Z_PTR_P(ret);
 }
-#else
-# define READ_PROPERTY_DC ZEND_LITERAL_KEY_DC TSRMLS_DC
-# define READ_PROPERTY_CC ZEND_LITERAL_KEY_CC TSRMLS_CC
-# define WRITE_PROPERTY_DC ZEND_LITERAL_KEY_DC TSRMLS_DC
-# define WRITE_PROPERTY_CC ZEND_LITERAL_KEY_CC TSRMLS_CC
-# define HAS_PROPERTY_DC ZEND_LITERAL_KEY_DC TSRMLS_DC
-# define HAS_PROPERTY_CC ZEND_LITERAL_KEY_CC TSRMLS_CC
-
-static php_mosquitto_prop_handler *mosquitto_get_prop_handler(zval *prop) {
-	php_mosquitto_prop_handler *hnd;
-	if (FAILURE == zend_hash_find(&php_mosquitto_message_properties, Z_STRVAL_P(prop), Z_STRLEN_P(prop)+1, (void**) &hnd)) {
-		return NULL;
-	}
-	return hnd;
-}
-#endif
 
-zval *php_mosquitto_message_read_property(zval *object, zval *member, int type READ_PROPERTY_DC) {
-	zval tmp_member;
-#ifndef ZEND_ENGINE_3
-	zval *retval;
-#endif
-	mosquitto_message_object *message_object = mosquitto_message_object_from_zend_object(Z_OBJ_P(object));
+zval *php_mosquitto_message_read_property(zend_object *object, zend_string *member, int type READ_PROPERTY_DC) {
+	mosquitto_message_object *message_object = mosquitto_message_object_from_zend_object(object); //Z_OBJ_P(object)
 	php_mosquitto_prop_handler *hnd;
 
-	if (Z_TYPE_P(member) != IS_STRING) {
-		tmp_member = *member;
-		zval_copy_ctor(&tmp_member);
-		convert_to_string(&tmp_member);
-		member = &tmp_member;
-	}
 	hnd = mosquitto_get_prop_handler(member);
 
 	if (hnd && hnd->read_func) {
-#ifdef ZEND_ENGINE_3
 		if (FAILURE == hnd->read_func(message_object, retval)) {
 			ZVAL_NULL(retval);
 		}
-#else
-		if (SUCCESS == hnd->read_func(message_object, &retval TSRMLS_CC)) {
-			/* ensure we're creating a temporary variable */
-			Z_SET_REFCOUNT_P(retval, 0);
-		} else {
-			retval = EG(uninitialized_zval_ptr);
-		}
-#endif
 	} else {
-		zend_object_handlers * std_hnd = zend_get_std_object_handlers();
+		const zend_object_handlers *std_hnd = zend_get_std_object_handlers();
 		retval = std_hnd->read_property(object, member, type READ_PROPERTY_CC);
 	}
 
-	if (member == &tmp_member) {
-		zval_dtor(member);
-	}
-
 	return(retval);
 }
 
-void php_mosquitto_message_write_property(zval *object, zval *member, zval *value WRITE_PROPERTY_DC)
+zval *php_mosquitto_message_write_property(zend_object *object, zend_string *member, zval *value WRITE_PROPERTY_DC)
 {
-	zval tmp_member;
-	mosquitto_message_object *obj = mosquitto_message_object_from_zend_object(Z_OBJ_P(object));
+	mosquitto_message_object *obj = mosquitto_message_object_from_zend_object(object); // Z_OBJ_P(object)
 	php_mosquitto_prop_handler *hnd;
 
-	if (Z_TYPE_P(member) != IS_STRING) {
-		tmp_member = *member;
-		zval_copy_ctor(&tmp_member);
-		convert_to_string(&tmp_member);
-		member = &tmp_member;
-	}
-
 	hnd = mosquitto_get_prop_handler(member);
 
 	if (hnd && hnd->write_func) {
-		hnd->write_func(obj, value TSRMLS_CC);
-#ifdef ZEND_ENGINE_3
+		hnd->write_func(obj, value);
 		if (Z_REFCOUNTED_P(value)) {
 			Z_ADDREF_P(value);
 			zval_ptr_dtor(value);
 		}
-#else
-		if (! PZVAL_IS_REF(value) && Z_REFCOUNT_P(value) == 0) {
-			Z_ADDREF_P(value);
-			zval_ptr_dtor(&value);
-		}
-#endif
 	} else {
-		zend_object_handlers * std_hnd = zend_get_std_object_handlers();
+		const zend_object_handlers *std_hnd = zend_get_std_object_handlers();
 		std_hnd->write_property(object, member, value WRITE_PROPERTY_CC);
 	}
 
-	if (member == &tmp_member) {
-		zval_dtor(member);
-	}
+	return (value);
 }
 
-static int php_mosquitto_message_has_property(zval *object, zval *member, int has_set_exists HAS_PROPERTY_DC)
+static int php_mosquitto_message_has_property(zend_object *object, zend_string *member, int has_set_exists HAS_PROPERTY_DC)
 {
 	php_mosquitto_prop_handler *hnd = mosquitto_get_prop_handler(member);
 	int ret = 0;
-#ifdef ZEND_ENGINE_3
 	zval rv;
 	zval *retval = &rv;
-#endif
 
 	if (hnd) {
 		switch (has_set_exists) {
@@ -354,85 +258,39 @@ static int php_mosquitto_message_has_pro
 				break;
 			case 0: {
 				zval *value = php_mosquitto_message_read_property(object, member, BP_VAR_IS READ_PROPERTY_CC);
-#ifdef ZEND_ENGINE_3
 				if (Z_REFCOUNTED_P(value)) {
 					Z_ADDREF_P(value);
 					zval_ptr_dtor(value);
 				}
-#else
-				if (value != EG(uninitialized_zval_ptr)) {
-					ret = Z_TYPE_P(value) != IS_NULL? 1:0;
-					/* refcount is 0 */
-					Z_ADDREF_P(value);
-					zval_ptr_dtor(&value);
-				}
-#endif
 				break;
 			}
 			default: {
 				zval *value = php_mosquitto_message_read_property(object, member, BP_VAR_IS READ_PROPERTY_CC);
-#ifdef ZEND_ENGINE_3
 				if (Z_REFCOUNTED_P(value)) {
 					Z_ADDREF_P(value);
 					zval_ptr_dtor(value);
 				}
-#else
-				if (value != EG(uninitialized_zval_ptr)) {
-					convert_to_boolean(value);
-					ret = Z_BVAL_P(value)? 1:0;
-					/* refcount is 0 */
-					Z_ADDREF_P(value);
-					zval_ptr_dtor(&value);
-				}
-#endif
 				break;
 			}
 		}
 	} else {
-		zend_object_handlers * std_hnd = zend_get_std_object_handlers();
+		const zend_object_handlers *std_hnd = zend_get_std_object_handlers();
 		ret = std_hnd->has_property(object, member, has_set_exists HAS_PROPERTY_CC);
 	}
 	return ret;
 }
 
-#ifndef ZEND_ENGINE_3
-# ifndef ZEND_HASH_FOREACH_PTR
-#  define ZEND_HASH_FOREACH_KEY_PTR(ht, idx, key, ptr) \
-   { \
-     HashPosition pos; \
-     for (zend_hash_internal_pointer_reset_ex(ht, &pos); \
-          zend_hash_get_current_data_ex(ht, (void**)&ptr, &pos) == SUCCESS; \
-          zend_hash_move_forward_ex(ht, &pos)) { \
-       key = NULL; \
-       zend_hash_get_current_key_ex(ht, &key, &key##_len, &idx, 0, &pos); \
-       {
-# endif
-# ifndef ZEND_HASH_FOREACH_END
-#  define ZEND_HASH_FOREACH_END() \
-       } \
-     } \
-   }
-# endif
-#endif
-
-static HashTable *php_mosquitto_message_get_properties(zval *object TSRMLS_DC)
+static HashTable *php_mosquitto_message_get_properties(zend_object *object)
 {
-	mosquitto_message_object *obj = mosquitto_message_object_from_zend_object(Z_OBJ_P(object));
+	mosquitto_message_object *obj = mosquitto_message_object_from_zend_object(object);
 	php_mosquitto_prop_handler *hnd;
 	HashTable *props;
-#ifdef ZEND_ENGINE_3
 	zend_string *key;
 	zend_long num_key;
-#else
-	char *key;
-	uint key_len;
-	ulong num_key;
-#endif
 
-	props = zend_std_get_properties(object TSRMLS_CC);
+	props = zend_std_get_properties(object);
 
 	ZEND_HASH_FOREACH_KEY_PTR(&php_mosquitto_message_properties, num_key, key, hnd) {
-#ifdef ZEND_ENGINE_3
 		zval val;
 		if (!hnd->read_func || (hnd->read_func(obj, &val) != SUCCESS)) {
 			ZVAL_NULL(&val);
@@ -442,57 +300,32 @@ static HashTable *php_mosquitto_message_
 		} else {
 			zend_hash_index_update(props, num_key, &val);
 		}
-#else
-		zval *val;
-		if (!hnd->read_func || hnd->read_func(obj, &val TSRMLS_CC) != SUCCESS) {
-			val = EG(uninitialized_zval_ptr);
-			Z_ADDREF_P(val);
-		}
-		if (key) {
-			zend_hash_update(props, key, key_len, (void *)&val, sizeof(zval*), NULL);
-        } else {
-			zend_hash_index_update(props, num_key, (void *)&val, sizeof(zval*), NULL);
-        }
-#endif
 	} ZEND_HASH_FOREACH_END();
 
 	return obj->std.properties;
 }
 
 
-void php_mosquitto_message_add_property(HashTable *h, const char *name, size_t name_length, php_mosquitto_read_t read_func, php_mosquitto_write_t write_func TSRMLS_DC)
+void php_mosquitto_message_add_property(HashTable *h, const char *name, size_t name_length, php_mosquitto_read_t read_func, php_mosquitto_write_t write_func)
 {
-#ifdef ZEND_ENGINE_3
 	php_mosquitto_prop_handler *p = (php_mosquitto_prop_handler*)pemalloc(sizeof(php_mosquitto_prop_handler), 1);
-#else
-	php_mosquitto_prop_handler val, *p = &val;
-#endif
 
 	p->name = (char*) name;
 	p->name_length = name_length;
 	p->read_func = read_func;
 	p->write_func = write_func;
-#ifdef ZEND_ENGINE_3
 	{
 		zend_string *key = zend_string_init(name, name_length, 1);
 		zval hnd;
 		ZVAL_PTR(&hnd, p);
 		zend_hash_add(h, key, &hnd);
 	}
-#else
-	zend_hash_add(h, (char *)name, name_length + 1, p, sizeof(php_mosquitto_prop_handler), NULL);
-#endif
 }
 
-static void mosquitto_message_object_destroy(zend_object *object TSRMLS_DC)
+static void mosquitto_message_object_destroy(zend_object *object)
 {
 	mosquitto_message_object *message = mosquitto_message_object_from_zend_object(object);
-#ifdef ZEND_ENGINE_3
-        zend_object_std_dtor(object);
-#else
-	zend_hash_destroy(message->std.properties);
-	FREE_HASHTABLE(message->std.properties);
-#endif
+	zend_object_std_dtor(object);
 	if (message->owned_topic == 1) {
 		efree(message->message.topic);
 	}
@@ -501,56 +334,21 @@ static void mosquitto_message_object_des
 		efree(message->message.payload);
 	}
 
-#ifndef ZEND_ENGINE_3
-	efree(object);
-#endif
 }
 
-#ifdef ZEND_ENGINE_3
 static zend_object *mosquitto_message_object_new(zend_class_entry *ce) {
 	mosquitto_message_object *msg = ecalloc(1, sizeof(mosquitto_message_object) + zend_object_properties_size(ce));
 	zend_object *ret = mosquitto_message_object_to_zend_object(msg);
 
-#ifdef MOSQUITTO_NEED_TSRMLS
-	message_obj->TSRMLS_C = TSRMLS_C;
-#endif
 
 	zend_object_std_init(ret, ce);
 	ret->handlers = &mosquitto_message_object_handlers;
 
 	return ret;
 }
-#else
-static zend_object_value mosquitto_message_object_new(zend_class_entry *ce TSRMLS_DC) {
-
-	zend_object_value retval;
-	mosquitto_message_object *message_obj;
-#if PHP_VERSION_ID < 50399
-	zval *temp;
-#endif
-
-	message_obj = ecalloc(1, sizeof(mosquitto_message_object));
-	message_obj->std.ce = ce;
-
-#ifdef MOSQUITTO_NEED_TSRMLS
-	message_obj->TSRMLS_C = TSRMLS_C;
-#endif
-
-	ALLOC_HASHTABLE(message_obj->std.properties);
-	zend_hash_init(message_obj->std.properties, 0, NULL, ZVAL_PTR_DTOR, 0);
-#if PHP_VERSION_ID < 50399
-	zend_hash_copy(message_obj->std.properties, &mosquitto_ce_message->default_properties, (copy_ctor_func_t) zval_add_ref,(void *) &temp, sizeof(zval *));
-#else
-	object_properties_init(&message_obj->std, mosquitto_ce_message);
-#endif
-	retval.handle = zend_objects_store_put(message_obj, NULL, (zend_objects_free_object_storage_t) mosquitto_message_object_destroy, NULL TSRMLS_CC);
-	retval.handlers = &mosquitto_message_object_handlers;
-	return retval;
-}
-#endif
 
 const zend_function_entry mosquitto_message_methods[] = {
-	PHP_ME(Mosquitto_Message, __construct, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
+	PHP_ME(Mosquitto_Message, __construct, Mosquitto_Message_void_args, ZEND_ACC_PUBLIC|ZEND_ACC_CTOR)
 	PHP_ME(Mosquitto_Message, topicMatchesSub, Mosquitto_Message_topicMatchesSub_args, ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	PHP_ME(Mosquitto_Message, tokeniseTopic, Mosquitto_Message_tokeniseTopic_args, ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
 	PHP_FE_END
@@ -564,13 +362,11 @@ PHP_MINIT_FUNCTION(mosquitto_message)
 	mosquitto_message_object_handlers.write_property = php_mosquitto_message_write_property;
 	mosquitto_message_object_handlers.has_property = php_mosquitto_message_has_property;
 	mosquitto_message_object_handlers.get_properties = php_mosquitto_message_get_properties;
-#ifdef ZEND_ENGINE_3
-    mosquitto_message_object_handlers.offset    = XtOffsetOf(mosquitto_message_object, std);
-    mosquitto_message_object_handlers.free_obj  = mosquitto_message_object_destroy;
-#endif
+	mosquitto_message_object_handlers.offset    = XtOffsetOf(mosquitto_message_object, std);
+	mosquitto_message_object_handlers.free_obj  = mosquitto_message_object_destroy;
 
 	INIT_NS_CLASS_ENTRY(message_ce, "Mosquitto", "Message", mosquitto_message_methods);
-	mosquitto_ce_message = zend_register_internal_class(&message_ce TSRMLS_CC);
+	mosquitto_ce_message = zend_register_internal_class(&message_ce);
 	mosquitto_ce_message->create_object = mosquitto_message_object_new;
 
 	zend_hash_init(&php_mosquitto_message_properties, 0, NULL, NULL, 1);
--- a/php_mosquitto.h
+++ b/php_mosquitto.h
@@ -36,14 +36,7 @@ extern zend_module_entry mosquitto_modul
 
 #include <mosquitto.h>
 
-#if defined(ZEND_ENGINE_2) && defined(ZTS)
-# define MOSQUITTO_NEED_TSRMLS
-#endif
-
 typedef struct _mosquitto_client_object {
-#ifndef ZEND_ENGINE_3
-	zend_object std;
-#endif
 	struct mosquitto *client;
 
 	zend_fcall_info connect_callback;
@@ -63,27 +56,14 @@ typedef struct _mosquitto_client_object
 
 	int looping;
 
-#ifdef MOSQUITTO_NEED_TSRMLS
-	TSRMLS_D;
-#endif
-#ifdef ZEND_ENGINE_3
 	zend_object std; /* Must be last */
-#endif
 } mosquitto_client_object;
 
 typedef struct _mosquitto_message_object {
-#ifndef ZEND_ENGINE_3
-	zend_object std;
-#endif
 	struct mosquitto_message message;
 	zend_bool owned_topic;
 	zend_bool owned_payload;
-#ifdef MOSQUITTO_NEED_TSRMLS
-	TSRMLS_D;
-#endif
-#ifdef ZEND_ENGINE_3
 	zend_object std; /* Must be last */
-#endif
 } mosquitto_message_object;
 
 static inline
@@ -110,12 +90,8 @@ zend_object *mosquitto_message_object_to
 	return &(msg->std);
 }
 
-#ifdef ZEND_ENGINE_3
 typedef int (*php_mosquitto_read_t)(mosquitto_message_object *mosquitto_object, zval *retval);
-#else
-typedef int (*php_mosquitto_read_t)(mosquitto_message_object *mosquitto_object, zval **retval TSRMLS_DC);
-#endif
-typedef int (*php_mosquitto_write_t)(mosquitto_message_object *mosquitto_object, zval *newval TSRMLS_DC);
+typedef int (*php_mosquitto_write_t)(mosquitto_message_object *mosquitto_object, zval *newval);
 
 typedef struct _php_mosquitto_prop_handler {
 	const char *name;
@@ -126,12 +102,11 @@ typedef struct _php_mosquitto_prop_handl
 
 
 #define PHP_MOSQUITTO_ERROR_HANDLING() \
-	zend_replace_error_handling(EH_THROW, mosquitto_ce_exception, &MQTTG(mosquitto_original_error_handling) TSRMLS_CC)
+	zend_replace_error_handling(EH_THROW, mosquitto_ce_exception, &MQTTG(mosquitto_original_error_handling))
 
 #define PHP_MOSQUITTO_RESTORE_ERRORS() \
-	zend_restore_error_handling(&MQTTG(mosquitto_original_error_handling) TSRMLS_CC)
+	zend_restore_error_handling(&MQTTG(mosquitto_original_error_handling))
 
-#ifdef ZEND_ENGINE_3
 # define PHP_MOSQUITTO_FREE_CALLBACK(client, CALLBACK) \
     if (ZEND_FCI_INITIALIZED(client->CALLBACK ## _callback)) { \
         zval_ptr_dtor(&client->CALLBACK ## _callback.function_name); \
@@ -144,18 +119,6 @@ typedef struct _php_mosquitto_prop_handl
     } \
 	client->CALLBACK ## _callback = empty_fcall_info; \
 	client->CALLBACK ## _callback_cache = empty_fcall_info_cache;
-#else
-# define PHP_MOSQUITTO_FREE_CALLBACK(client, CALLBACK) \
-    if (ZEND_FCI_INITIALIZED(client->CALLBACK ## _callback)) { \
-        zval_ptr_dtor(&client->CALLBACK ## _callback.function_name); \
-    } \
- \
-	if (client->CALLBACK ## _callback.object_ptr != NULL) { \
-		zval_ptr_dtor(&client->CALLBACK ## _callback.object_ptr); \
-	} \
-	client->CALLBACK ## _callback = empty_fcall_info; \
-	client->CALLBACK ## _callback_cache = empty_fcall_info_cache;
-#endif
 
 #define PHP_MOSQUITTO_MESSAGE_PROPERTY_ENTRY_RECORD(name) \
 	{ "" #name "",		sizeof("" #name "") - 1,	php_mosquitto_message_read_##name,	php_mosquitto_message_write_##name }
@@ -165,28 +128,19 @@ typedef struct _php_mosquitto_prop_handl
 	int i = 0; \
 	while (b[i].name != NULL) { \
 		php_mosquitto_message_add_property((a), (b)[i].name, (b)[i].name_length, \
-							(php_mosquitto_read_t)(b)[i].read_func, (php_mosquitto_write_t)(b)[i].write_func TSRMLS_CC); \
+							(php_mosquitto_read_t)(b)[i].read_func, (php_mosquitto_write_t)(b)[i].write_func); \
 		i++; \
 	} \
 }
 
-#ifdef ZEND_ENGINE_3
 # define PHP_MOSQUITTO_MESSAGE_LONG_PROPERTY_READER_FUNCTION(name) \
 	static int php_mosquitto_message_read_##name(mosquitto_message_object *mosquitto_object, zval *retval) { \
 		ZVAL_LONG(retval, mosquitto_object->message.name); \
 		return SUCCESS; \
 	}
-#else
-# define PHP_MOSQUITTO_MESSAGE_LONG_PROPERTY_READER_FUNCTION(name) \
-	static int php_mosquitto_message_read_##name(mosquitto_message_object *mosquitto_object, zval **retval TSRMLS_DC) { \
-		MAKE_STD_ZVAL(*retval); \
-		ZVAL_LONG(*retval, mosquitto_object->message.name); \
-		return SUCCESS; \
-	}
-#endif
 
 #define PHP_MOSQUITTO_MESSAGE_LONG_PROPERTY_WRITER_FUNCTION(name) \
-static int php_mosquitto_message_write_##name(mosquitto_message_object *mosquitto_object, zval *newval TSRMLS_DC) \
+static int php_mosquitto_message_write_##name(mosquitto_message_object *mosquitto_object, zval *newval) \
 { \
 	zval ztmp; \
 	if (Z_TYPE_P(newval) != IS_LONG) { \
@@ -233,7 +187,7 @@ PHP_MOSQUITTO_API void php_mosquitto_pub
 PHP_MOSQUITTO_API void php_mosquitto_disconnect_callback(struct mosquitto *mosq, void *obj, int rc);
 
 PHP_MOSQUITTO_API char *php_mosquitto_strerror_wrapper(int err);
-void php_mosquitto_handle_errno(int retval, int err TSRMLS_DC);
+void php_mosquitto_handle_errno(int retval, int err);
 void php_mosquitto_exit_loop(mosquitto_client_object *object);
 
 PHP_MINIT_FUNCTION(mosquitto);
