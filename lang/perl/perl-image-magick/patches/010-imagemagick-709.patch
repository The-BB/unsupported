--- a/Magick.xs
+++ b/Magick.xs
@@ -23,7 +23,7 @@
 %                             February 1997                                   %
 %                                                                             %
 %                                                                             %
-%  Copyright 1999-2020 ImageMagick Studio LLC, a non-profit organization      %
+%  Copyright 1999-2019 ImageMagick Studio LLC, a non-profit organization      %
 %  dedicated to making software imaging solutions freely available.           %
 %                                                                             %
 %  You may not use this file except in compliance with the License.  You may  %
@@ -440,7 +440,7 @@ static struct
       {"sigma", RealReference}, {"x", IntegerReference},
       {"y", IntegerReference} } },
     { "Identify", { {"file", FileReference}, {"features", StringReference},
-      {"moments", MagickBooleanOptions}, {"unique", MagickBooleanOptions} } },
+      {"unique", MagickBooleanOptions} } },
     { "SepiaTone", { {"threshold", RealReference} } },
     { "SigmoidalContrast", { {"geometry", StringReference},
       {"contrast", RealReference}, {"mid-point", RealReference},
@@ -575,16 +575,6 @@ static struct
     { "CLAHE", { {"geometry", StringReference}, {"width", IntegerReference},
       {"height", IntegerReference}, {"number-bins", IntegerReference},
       {"clip-limit", RealReference} } },
-    { "Kmeans", { {"geometry", StringReference}, {"colors", IntegerReference},
-      {"iterations", IntegerReference}, {"tolerance", RealReference} } },
-    { "ColorThreshold", { {"start-color", StringReference},
-      {"stop-color", StringReference}, {"channel", MagickChannelOptions} } },
-    { "WhiteBalance", { { (const char *) NULL, NullReference } } },
-    { "BilateralBlur", { {"geometry", StringReference},
-      {"width", IntegerReference}, {"height", IntegerReference},
-      {"intensity-sigma", RealReference}, {"spatial-sigma", RealReference},
-      {"channel", MagickChannelOptions} } },
-    { "SortPixels", { { (const char *) NULL, NullReference } } },
   };
 
 static SplayTreeInfo
@@ -1930,11 +1920,6 @@ static void SetAttribute(pTHX_ struct Pa
             }
           break;
         }
-      if (LocaleCompare(attribute,"precision") == 0)
-        {
-          (void) SetMagickPrecision(SvIV(sval));
-          break;
-        }
       if (info)
         SetImageOption(info->image_info,attribute,SvPV(sval,na));
       for ( ; image; image=image->next)
@@ -5066,9 +5051,6 @@ Get(ref,...)
             {
               j=info ? info->image_info->endian : image ? image->endian :
                 UndefinedEndian;
-              if (info)
-                if (info->image_info->endian == UndefinedEndian)
-                  j=image->endian;
               s=newSViv(j);
               (void) sv_setpv(s,CommandOptionToMnemonic(MagickEndianOptions,j));
               SvIOK_on(s);
@@ -5327,9 +5309,6 @@ Get(ref,...)
             {
               j=info ? info->image_info->interlace : image ? image->interlace :
                 UndefinedInterlace;
-              if (info)
-                if (info->image_info->interlace == UndefinedInterlace)
-                  j=image->interlace;
               s=newSViv(j);
               (void) sv_setpv(s,CommandOptionToMnemonic(MagickInterlaceOptions,
                 j));
@@ -5486,9 +5465,6 @@ Get(ref,...)
             {
               j=info ? info->image_info->orientation : image ?
                 image->orientation : UndefinedOrientation;
-              if (info)
-                if (info->image_info->orientation == UndefinedOrientation)
-                  j=image->orientation;
               s=newSViv(j);
               (void) sv_setpv(s,CommandOptionToMnemonic(MagickOrientationOptions,
                 j));
@@ -5579,12 +5555,6 @@ Get(ref,...)
               PUSHs(s ? sv_2mortal(s) : &sv_undef);
               continue;
             }
-          if (LocaleCompare(attribute,"precision") == 0)
-            {
-              s=newSViv((ssize_t) GetMagickPrecision());
-              PUSHs(s ? sv_2mortal(s) : &sv_undef);
-              continue;
-            }
           ThrowPerlException(exception,OptionError,"UnrecognizedAttribute",
             attribute);
           break;
@@ -5762,8 +5732,8 @@ Get(ref,...)
             {
               j=info ? info->image_info->units : image ? image->units :
                 UndefinedResolution;
-              if (info)
-                if (info->image_info->units == UndefinedResolution)
+              if (info && (info->image_info->units == UndefinedResolution))
+                if (image)
                   j=image->units;
               if (j == UndefinedResolution)
                 s=newSVpv("undefined units",0);
@@ -6880,18 +6850,14 @@ GetPixels(ref,...)
         float
           *pixels;
 
-        MemoryInfo
-          *pixels_info;
-
-        pixels_info=AcquireVirtualMemory(strlen(map)*region.width,
+        pixels=(float *) AcquireQuantumMemory(strlen(map)*region.width,
           region.height*sizeof(*pixels));
-        if (pixels_info == (MemoryInfo *) NULL)
+        if (pixels == (float *) NULL)
           {
             ThrowPerlException(exception,ResourceLimitError,
               "MemoryAllocationFailed",PackageName);
             goto PerlException;
           }
-        pixels=(float *) GetVirtualMemoryBlob(pixels_info);
         status=ExportImagePixels(image,region.x,region.y,region.width,
           region.height,map,FloatPixel,pixels,exception);
         if (status == MagickFalse)
@@ -6902,25 +6868,21 @@ GetPixels(ref,...)
             for (i=0; i < (ssize_t) (strlen(map)*region.width*region.height); i++)
               PUSHs(sv_2mortal(newSVnv(pixels[i])));
           }
-        pixels_info=RelinquishVirtualMemory(pixels_info);
+        pixels=(float *) RelinquishMagickMemory(pixels);
       }
     else
       {
-        MemoryInfo
-          *pixels_info;
-
         Quantum
           *pixels;
 
-        pixels_info=AcquireVirtualMemory(strlen(map)*region.width,
+        pixels=(Quantum *) AcquireQuantumMemory(strlen(map)*region.width,
           region.height*sizeof(*pixels));
-        if (pixels_info == (MemoryInfo *) NULL)
+        if (pixels == (Quantum *) NULL)
           {
             ThrowPerlException(exception,ResourceLimitError,
               "MemoryAllocationFailed",PackageName);
             goto PerlException;
           }
-        pixels=(Quantum *) GetVirtualMemoryBlob(pixels_info);
         status=ExportImagePixels(image,region.x,region.y,region.width,
           region.height,map,QuantumPixel,pixels,exception);
         if (status == MagickFalse)
@@ -6931,7 +6893,7 @@ GetPixels(ref,...)
             for (i=0; i < (ssize_t) (strlen(map)*region.width*region.height); i++)
               PUSHs(sv_2mortal(newSViv(pixels[i])));
           }
-        pixels_info=RelinquishVirtualMemory(pixels_info);
+        pixels=(Quantum *) RelinquishMagickMemory(pixels);
       }
 
   PerlException:
@@ -7685,16 +7647,6 @@ Mogrify(ref,...)
     RangeThresholdImage= 296
     CLAHE              = 297
     CLAHEImage         = 298
-    Kmeans             = 299
-    KMeansImage        = 300
-    ColorThreshold     = 301
-    ColorThresholdImage= 302
-    WhiteBalance       = 303
-    WhiteBalanceImage  = 304
-    BilateralBlur      = 305
-    BilateralBlurImage = 306
-    SortPixels         = 307
-    SortPixelsImage    = 308
     MogrifyRegion      = 666
   PPCODE:
   {
@@ -10146,6 +10098,9 @@ Mogrify(ref,...)
         {
           if (attribute_flag[0] == 0)
             argument_list[0].file_reference=(FILE *) NULL;
+          if (attribute_flag[1] != 0)
+            (void) SetImageArtifact(image,"identify:features",
+              argument_list[1].string_reference);
           (void) IdentifyImage(image,argument_list[0].file_reference,
             MagickTrue,exception);
           break;
@@ -10157,7 +10112,7 @@ Mogrify(ref,...)
           if (attribute_flag[2] != 0)
             channel=(ChannelType) argument_list[2].integer_reference;
           channel_mask=SetImageChannelMask(image,channel);
-          (void) BlackThresholdImage(image,argument_list[0].string_reference,
+          BlackThresholdImage(image,argument_list[0].string_reference,
             exception);
           (void) SetImageChannelMask(image,channel_mask);
           break;
@@ -10300,9 +10255,6 @@ Mogrify(ref,...)
               argument_list[1].string_reference);
           if ((attribute_flag[2] != 0) &&
               (argument_list[2].integer_reference != 0))
-            (void) SetImageArtifact(image,"identify:moments","true");
-          if ((attribute_flag[3] != 0) &&
-              (argument_list[3].integer_reference != 0))
             (void) SetImageArtifact(image,"identify:unique","true");
           (void) IdentifyImage(image,argument_list[0].file_reference,
             MagickTrue,exception);
@@ -11549,90 +11501,6 @@ Mogrify(ref,...)
             geometry_info.psi,exception);
           break;
         }
-        case 150:  /* Kmeans */
-        {
-          if (attribute_flag[0] != 0)
-            {
-              flags=ParseGeometry(argument_list[0].string_reference,
-                &geometry_info);
-              if ((flags & SigmaValue) == 0)
-                geometry_info.sigma=100.0;
-              if ((flags & XiValue) == 0)
-                geometry_info.xi=0.01;
-            }
-          if (attribute_flag[1] != 0)
-            geometry_info.rho=argument_list[1].integer_reference;
-          if (attribute_flag[2] != 0)
-            geometry_info.sigma=argument_list[2].integer_reference;
-          if (attribute_flag[3] != 0)
-            geometry_info.xi=(ChannelType) argument_list[3].real_reference;
-          (void) KmeansImage(image,geometry_info.rho,geometry_info.sigma,
-            geometry_info.xi,exception);
-          break;
-        }
-        case 151:  /* ColorThreshold */
-        {
-          PixelInfo
-            start_color,
-            stop_color;
-
-          (void) QueryColorCompliance("black",AllCompliance,&start_color,
-            exception);
-          (void) QueryColorCompliance("white",AllCompliance,&stop_color,
-            exception);
-          if (attribute_flag[0] != 0)
-            (void) QueryColorCompliance(argument_list[0].string_reference,
-              AllCompliance,&start_color,exception);
-          if (attribute_flag[1] != 0)
-            (void) QueryColorCompliance(argument_list[1].string_reference,
-              AllCompliance,&stop_color,exception);
-          channel_mask=SetImageChannelMask(image,channel);
-          (void) ColorThresholdImage(image,&start_color,&stop_color,exception);
-          (void) SetImageChannelMask(image,channel_mask);
-          break;
-        }
-        case 152:  /* WhiteBalance */
-        {
-          (void) WhiteBalanceImage(image,exception);
-          break;
-        }
-        case 153:  /* BilateralBlur */
-        {
-          if (attribute_flag[0] != 0)
-            {
-              flags=ParseGeometry(argument_list[0].string_reference,
-                &geometry_info);
-              if ((flags & SigmaValue) == 0)
-                geometry_info.sigma=geometry_info.rho;
-              if ((flags & XiValue) == 0)
-                geometry_info.xi=2.0*sqrt(geometry_info.rho*geometry_info.rho+
-                  geometry_info.sigma*geometry_info.sigma);
-              if ((flags & PsiValue) == 0)
-                geometry_info.psi=0.5*sqrt(geometry_info.rho*geometry_info.rho+
-                  geometry_info.sigma*geometry_info.sigma);
-            }
-          if (attribute_flag[1] != 0)
-            geometry_info.rho=argument_list[1].integer_reference;
-          if (attribute_flag[2] != 0)
-            geometry_info.sigma=argument_list[2].integer_reference;
-          if (attribute_flag[3] != 0)
-            geometry_info.xi=argument_list[3].real_reference;
-          if (attribute_flag[4] != 0)
-            geometry_info.psi=argument_list[4].real_reference;
-          if (attribute_flag[5] != 0)
-            channel=(ChannelType) argument_list[5].integer_reference;
-          channel_mask=SetImageChannelMask(image,channel);
-          image=BilateralBlurImage(image,(size_t) geometry_info.rho,(size_t)
-            geometry_info.sigma,geometry_info.xi,geometry_info.psi,exception);
-          if (image != (Image *) NULL)
-            (void) SetImageChannelMask(image,channel_mask);
-          break;
-        }
-        case 154:  /* SortPixels */
-        {
-          (void) SortImagePixels(image,exception);
-          break;
-        }
       }
       if (next != (Image *) NULL)
         (void) CatchImageException(next);
