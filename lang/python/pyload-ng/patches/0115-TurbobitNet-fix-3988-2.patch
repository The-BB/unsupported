From 98bcfdf7c3a51a21e0b4e9eb8f3bd10916d0747f Mon Sep 17 00:00:00 2001
From: GammaC0de <gammac0de@users.noreply.github.com>
Date: Wed, 23 Jun 2021 21:55:15 +0300
Subject: [PATCH 115/150] [TurbobitNet] fix #3988 (2)

---
 src/pyload/plugins/downloaders/TurbobitNet.py | 28 +++++++++++++++----
 1 file changed, 23 insertions(+), 5 deletions(-)

--- a/src/pyload/plugins/downloaders/TurbobitNet.py
+++ b/src/pyload/plugins/downloaders/TurbobitNet.py
@@ -6,13 +6,14 @@ import pycurl
 from pyload.core.utils.misc import eval_js
 
 from ..anticaptchas.HCaptcha import HCaptcha
+from ..anticaptchas.ReCaptcha import ReCaptcha
 from ..base.simple_downloader import SimpleDownloader
 
 
 class TurbobitNet(SimpleDownloader):
     __name__ = "TurbobitNet"
     __type__ = "downloader"
-    __version__ = "0.38"
+    __version__ = "0.39"
     __status__ = "testing"
 
     __pattern__ = r'https?://(?:(?:www|m)\.)?(?:turbobit\.net|turbo?\.(?:to|cc))/(?:download/free/)?(?P<ID>\w+)'
@@ -92,10 +93,27 @@ class TurbobitNet(SimpleDownloader):
         if inputs is None:
             self.fail(self._("Captcha form not found"))
 
-        self.captcha = HCaptcha(self.pyfile)
-        inputs["g-recaptcha-response"] = inputs["h-captcha-response"] = self.captcha.challenge()
+        else:
+            recaptcha = ReCaptcha(self.pyfile)
+            captcha_key = recaptcha.detect_key()
+            if captcha_key:
+                self.captcha = recaptcha
+                response, _ = recaptcha.challenge(captcha_key)
+                inputs["g-recaptcha-response"] = response
+
+            else:
+                hcaptcha = HCaptcha(self.pyfile)
+                captcha_key = hcaptcha.detect_key()
+                if captcha_key:
+                    self.captcha = hcaptcha
+                    response = hcaptcha.challenge(captcha_key)
+                    inputs["g-recaptcha-response"] = inputs["h-captcha-response"] = response
 
-        self.data = self.load(self.free_url, post=inputs, ref=self.free_url)
+            if captcha_key:
+                self.data = self.load(self.free_url, post=inputs, ref=self.free_url)
+
+            else:
+                self.fail(self._("Could not detect captcha type"))
 
     def handle_premium(self, pyfile):
         m = re.search(self.LINK_PREMIUM_PATTERN, self.data)
