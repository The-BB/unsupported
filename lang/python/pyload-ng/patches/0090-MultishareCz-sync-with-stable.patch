From 7669b687ffbac2e762a064d5ee9f89767bff5414 Mon Sep 17 00:00:00 2001
From: GammaC0de <gammac0de@users.noreply.github.com>
Date: Tue, 15 Jun 2021 01:57:38 +0300
Subject: [PATCH 090/150] [MultishareCz] sync with stable

---
 src/pyload/plugins/accounts/MultishareCz.py   | 66 +++++++++------
 .../plugins/downloaders/MultishareCz.py       | 83 ++++++++++---------
 2 files changed, 84 insertions(+), 65 deletions(-)

--- a/src/pyload/plugins/accounts/MultishareCz.py
+++ b/src/pyload/plugins/accounts/MultishareCz.py
@@ -1,6 +1,9 @@
 # -*- coding: utf-8 -*-
 
-import re
+import json
+
+import pycurl
+from pyload.core.network.http.exceptions import BadHeader
 
 from ..base.multi_account import MultiAccount
 
@@ -8,7 +11,7 @@ from ..base.multi_account import MultiAc
 class MultishareCz(MultiAccount):
     __name__ = "MultishareCz"
     __type__ = "account"
-    __version__ = "0.14"
+    __version__ = "0.15"
     __status__ = "testing"
 
     __config__ = [
@@ -19,36 +22,51 @@ class MultishareCz(MultiAccount):
 
     __description__ = """Multishare.cz account plugin"""
     __license__ = "GPLv3"
-    __authors__ = [("zoidberg", "zoidberg@mujmail.cz")]
+    __authors__ = [
+        ("zoidberg", "zoidberg@mujmail.cz"),
+        ("GammaC0de", "nitzo2001[AT]yahoo[DOT]com"),
+    ]
 
-    TRAFFIC_LEFT_PATTERN = r'<span class="profil-zvyrazneni">Kredit:</span>\s*<strong>(?P<S>[\d.,]+)&nbsp;(?P<U>[\w^_]+)</strong>'
-    ACCOUNT_INFO_PATTERN = (
-        r'<input type="hidden" id="(u_ID|u_hash)" name=".+?" value="(.+?)">'
-    )
+    #: See https://multishare.cz/api/
+    API_URL = "https://www.multishare.cz/api/"
 
-    PLUGIN_PATTERN = r'<img class="logo-shareserveru"[^>]*?alt="(.+?)"></td>\s*<td class="stav">[^>]*?alt="OK"'
+    def api_response(self, method, **kwargs):
+        get = {"sub": method}
+        get.update(kwargs)
+        self.req.http.c.setopt(pycurl.USERAGENT, "JDownloader")
+        json_data = self.load(self.API_URL, get=get)
+
+        if not json_data.startswith("{"):
+            if json_data.startswith("ERR:"):
+                json_data = json_data[4:].strip()
+            return {"err": json_data}
+
+        else:
+            return json.loads(json_data)
 
     def grab_hosters(self, user, password, data):
-        html = self.load("http://www.multishare.cz/monitoring/")
-        return re.findall(self.PLUGIN_PATTERN, html)
+        api_data = self.api_response("supported-hosters")
+        return api_data["server"]
 
     def grab_info(self, user, password, data):
-        html = self.load("http://www.multishare.cz/profil/")
-
-        m = re.search(self.TRAFFIC_LEFT_PATTERN, html)
-        trafficleft = self.parse_traffic(m.group("S"), m.group("U")) if m else 0
-        self.premium = True if trafficleft else False
+        api_data = self.api_response("account-details", login=user, password=password)
+        trafficleft = self.parse_traffic(api_data["credit"], "MB")
 
-        html = self.load("http://www.multishare.cz/")
-        mms_info = dict(re.findall(self.ACCOUNT_INFO_PATTERN, html))
+        premium = True if trafficleft else False
 
-        return dict(mms_info, **{"validuntil": -1, "trafficleft": trafficleft})
+        return {"validuntil": -1, "trafficleft": trafficleft, "premium": premium}
 
     def signin(self, user, password, data):
-        html = self.load(
-            "https://www.multishare.cz/html/prihlaseni_process.php",
-            post={"akce": "Přihlásit", "heslo": password, "jmeno": user},
-        )
+        try:
+            api_data = self.api_response(
+                "account-details", login=user, password=password
+            )
+
+        except BadHeader as exc:
+            if exc.code == 403:
+                self.fail_login(_("IP is banned"))
+            else:
+                raise
 
-        if '<div class="akce-chyba akce">' in html:
-            self.fail_login()
+        if "err" in api_data:
+            self.fail_login(api_data["err"])
--- a/src/pyload/plugins/downloaders/MultishareCz.py
+++ b/src/pyload/plugins/downloaders/MultishareCz.py
@@ -1,13 +1,16 @@
 # -*- coding: utf-8 -*-
-import random
 
-from ..base.simple_downloader import SimpleDownloader
+import json
 
+import pycurl
 
-class MultishareCz(SimpleDownloader):
+from ..base.multi_downloader import MultiDownloader
+
+
+class MultishareCz(MultiDownloader):
     __name__ = "MultishareCz"
     __type__ = "downloader"
-    __version__ = "0.48"
+    __version__ = "0.49"
     __status__ = "testing"
 
     __pattern__ = r"http://(?:www\.)?multishare\.cz/stahnout/(?P<ID>\d+)"
@@ -19,50 +22,48 @@ class MultishareCz(SimpleDownloader):
         ("max_wait", "int", "Reconnect if waiting time is greater than minutes", 10),
     ]
 
-    __description__ = """MultiShare.cz downloader plugin"""
+    __description__ = """MultiShare.cz multi-downloader plugin"""
     __license__ = "GPLv3"
-    __authors__ = [("zoidberg", "zoidberg@mujmail.cz")]
+    __authors__ = [
+        ("zoidberg", "zoidberg@mujmail.cz"),
+        ("GammaC0de", "nitzo2001[AT]yahoo[DOT]com"),
+    ]
 
-    SIZE_REPLACEMENTS = [("&nbsp;", "")]
+    #: See https://multishare.cz/api/
+    API_URL = "https://www.multishare.cz/api/"
 
-    CHECK_TRAFFIC = True
-    LEECH_HOSTER = True
+    def api_response(self, method, **kwargs):
+        get = {"sub": method}
+        get.update(kwargs)
+        self.req.http.c.setopt(pycurl.USERAGENT, "JDownloader")
+        json_data = self.load(self.API_URL, get=get)
+
+        if not json_data.startswith("{"):
+            if json_data.startswith("ERR:"):
+                json_data = json_data[4:].strip()
+            return {"err": json_data}
 
-    INFO_PATTERN = r"(?:<li>Název|Soubor): <strong>(?P<N>.+?)</strong><(?:/li><li|br)>Velikost: <strong>(?P<S>.+?)</strong>"
-    OFFLINE_PATTERN = (
-        r"<h1>Stáhnout soubor</h1><p><strong>Požadovaný soubor neexistuje.</strong></p>"
-    )
-
-    def handle_free(self, pyfile):
-        self.download(
-            "http://www.multishare.cz/html/download_free.php",
-            get={"ID": self.info["pattern"]["ID"]},
-        )
+        else:
+            return json.loads(json_data)
 
     def handle_premium(self, pyfile):
-        self.download(
-            "http://www.multishare.cz/html/download_premium.php",
-            get={"ID": self.info["pattern"]["ID"]},
+        api_data = self.api_response("check-file", link=pyfile.url)
+        if "err" in api_data:
+            if "Given link is dead" in api_data["err"]:
+                self.offline()
+
+            else:
+                self.fail(api_data["err"])
+
+        pyfile.name = api_data["file_name"]
+        pyfile.size = api_data["file_size"]
+
+        api_data = self.api_response(
+            "download-link",
+            link=pyfile.url,
+            login=self.account.user,
+            password=self.account.info["login"]["password"],
         )
 
-    def handle_multi(self, pyfile):
-        self.data = self.load(
-            "http://www.multishare.cz/html/mms_ajax.php", post={"link": pyfile.url}
-        )
-
-        infodata = self.account.get_data()
-
-        if self.out_of_traffic():
-            self.fail(self._("Not enough credit left to download file"))
-
-        self.download(
-            "http://dl{}.mms.multishare.cz/html/mms_process.php".format(
-                round(random.random() * 10000 * random.random())
-            ),
-            get={
-                "u_ID": infodata["u_ID"],
-                "u_hash": infodata["u_hash"],
-                "link": pyfile.url,
-            },
-            disposition=True,
-        )
+        self.chunk_limit = api_data["chunks"]
+        self.link = api_data["link"]
