From 6e1ea3aaac13a7330377d27d55ab72d407874e51 Mon Sep 17 00:00:00 2001
From: GammaC0de <gammac0de@users.noreply.github.com>
Date: Sat, 30 Jul 2022 13:45:34 +0300
Subject: [PATCH 15/25] [DebridlinkFrTorrent] fix #4178

---
 .../plugins/decrypters/DebridlinkFrTorrent.py | 273 +++++++++++-------
 1 file changed, 168 insertions(+), 105 deletions(-)

diff --git a/src/pyload/plugins/decrypters/DebridlinkFrTorrent.py b/src/pyload/plugins/decrypters/DebridlinkFrTorrent.py
index 37771a5da..08614e8be 100644
--- a/src/pyload/plugins/decrypters/DebridlinkFrTorrent.py
+++ b/src/pyload/plugins/decrypters/DebridlinkFrTorrent.py
@@ -20,7 +20,7 @@ from ..helpers import exists
 class DebridlinkFrTorrent(SimpleDecrypter):
     __name__ = "DebridlinkFrTorrent"
     __type__ = "decrypter"
-    __version__ = "0.03"
+    __version__ = "0.04"
     __status__ = "testing"
 
     __pattern__ = r'^unmatchable$'
@@ -41,34 +41,43 @@ class DebridlinkFrTorrent(SimpleDecrypter):
     #: See https://debrid-link.fr/api_doc/v2
     API_URL = "https://debrid-link.fr/api/"
 
-    def api_request(self, method, get={}, post={}):
-        self.req.http.c.setopt(pycurl.HTTPHEADER, ["Authorization: Bearer " + self.api_token])
-        self.req.http.c.setopt(pycurl.USERAGENT, "pyLoad/{}".format(self.pyload.version))
+    def api_request(self, method, get={}, post={}, multipart=False):
+        self.req.http.c.setopt(
+            pycurl.HTTPHEADER, ["Authorization: Bearer " + self.api_token]
+        )
+        self.req.http.c.setopt(
+            pycurl.USERAGENT, "pyLoad/{}".format(self.pyload.version)
+        )
         try:
-            json_data = self.load(self.API_URL + method, get=get, post=post)
+            json_data = self.load(self.API_URL + method, get=get, post=post, multipart=multipart)
         except BadHeader as exc:
             json_data = exc.content
 
         return json.loads(json_data)
 
-    def api_request_safe(self, method, get={}, post={}):
+    def api_request_safe(self, method, get={}, post={}, multipart=False):
         for _i in range(2):
-            api_data = self.api_request(method, get=get, post=post)
+            api_data = self.api_request(method, get=get, post=post, multipart=multipart)
 
             if "error" in api_data:
-                if api_data["error"] == "badToken":  #: token expired, refresh the token and retry
+                if (
+                    api_data["error"] == "badToken"
+                ):  #: token expired, refresh the token and retry
                     self.account.relogin()
                     if not self.account.info["login"]["valid"]:
                         return api_data
 
                     else:
-                        self.api_token = self.account.accounts[list(self.account.accounts.keys())[0]]["api_token"]
+                        self.api_token = self.account.accounts[
+                            list(self.account.accounts.keys())[0]
+                        ]["api_token"]
                         continue
 
                 else:
                     return api_data
 
-            return api_data
+            else:
+                return api_data
 
     def sleep(self, sec):
         for _i in range(sec):
@@ -88,48 +97,64 @@ class DebridlinkFrTorrent(SimpleDecrypter):
         if self.pyfile.url.endswith(".torrent"):
             #: torrent URL
             if self.pyfile.url.startswith("http"):
-                #: remote URL, download the torrent to tmp directory
-                torrent_content = self.load(self.pyfile.url, decode=False)
-                torrent_filename = safejoin(self.pyload.tempdir, "tmp_{}.torrent".format(self.pyfile.package().name))
-                with open(torrent_filename, "wb") as f:
-                    f.write(torrent_content)
+                #: torrent URL, send to the server
+                api_data = self.api_request_safe(
+                    "v2/seedbox/add",
+                    post={
+                        "url": self.pyfile.url,
+                        "wait": True,
+                        "async": True,
+                    },
+                )
 
             else:
                 #: URL is local torrent file (uploaded container)
-                torrent_filename = urllib.request.url2pathname(self.pyfile.url[7:])  #: trim the starting `file://`
+                torrent_filename = urllib.request.url2pathname(
+                    self.pyfile.url[7:]
+                )  #: trim the starting `file://`
                 if not exists(torrent_filename):
                     self.fail(self._("Torrent file does not exist"))
 
-            self.tmp_file = torrent_filename
-
-            #: Check if the torrent file path is inside pyLoad's temp directory
-            if os.path.abspath(torrent_filename).startswith(self.pyload.tempdir + os.sep):
-                #: send the torrent content to the server
-                api_data = json.loads(self.load("https://up1.debrid.link/seedbox",
-                                                post={'file': FormFile(torrent_filename, mimetype="application/x-bittorrent")},
-                                                multipart=True))
-                if api_data["result"] != "OK":
-                    self.exit_error(api_data["ERR"])
+                self.tmp_file = torrent_filename
+
+                #: Check if the torrent file path is inside pyLoad's temp directory
+                if os.path.abspath(torrent_filename).startswith(
+                    self.pyload.tempdir + os.sep
+                ):
+                    #: send the torrent content to the server
+                    api_data = self.api_request_safe(
+                        "v2/seedbox/add",
+                        post={
+                            "file": FormFile(
+                                torrent_filename, mimetype="application/x-bittorrent"
+                            ),
+                            "wait": True,
+                            "async": True,
+                        },
+                        multipart=True,
+                    )
 
-                api_data = self.api_request_safe("v2/seedbox/add",
-                                                 post={"url": api_data["link"],
-                                                        "wait": True,
-                                                        "async": True})
-
-            else:
-                self.exit_error(self._("Illegal URL"))  #: We don't allow files outside pyLoad's config directory
+                else:
+                    self.exit_error(
+                        self._("Illegal URL")
+                    )  #: We don't allow files outside pyLoad's config directory
 
         else:
             #: magnet URL, send to the server
-            api_data = self.api_request_safe("v2/seedbox/add",
-                                             post={"url": self.pyfile.url,
-                                                    "wait": True,
-                                                    "async": True})
+            api_data = self.api_request_safe(
+                "v2/seedbox/add",
+                post={"url": self.pyfile.url, "wait": True, "async": True},
+            )
 
         if not api_data["success"]:
-            self.exit_error("{} (code: {})".format(api_data.get("error_description",
-                                                                error_description(api_data["error"])),
-                                                   api_data["error"]))
+            self.exit_error(
+                "{} (code: {})".format(
+                    api_data.get(
+                        "error_description", error_description(api_data["error"])
+                    ),
+                    api_data["error"],
+                )
+            )
 
         torrent_id = api_data["value"]["id"]
 
@@ -140,25 +165,37 @@ class DebridlinkFrTorrent(SimpleDecrypter):
         page = 0
         files = []
         while True:
-            api_data = self.api_request_safe("v2/seedbox/list",
-                                             get={"ids": torrent_id,
-                                                   "page": page,
-                                                   "perPage": 50})
-
-            if not api_data['success']:
-                self.exit_error("{} (code: {})".format(api_data.get("error_description",
-                                                                    error_description(api_data["error"])),
-                                                       api_data["error"]))
+            api_data = self.api_request_safe(
+                "v2/seedbox/list", get={"ids": torrent_id, "page": page, "perPage": 50}
+            )
 
-            if api_data["value"][0]["status"] == 1:
-                files.extend([{"id": _file["id"], "name": _file["name"], "size": _file["size"], "url": _file["downloadUrl"]}
-                              for _file in api_data["value"][0]["files"]])
+            if not api_data["success"]:
+                self.exit_error(
+                    "{} (code: {})".format(
+                        api_data.get(
+                            "error_description", error_description(api_data["error"])
+                        ),
+                        api_data["error"],
+                    )
+                )
+
+            api_files = api_data["value"][0]["files"]
+            if api_files:
+                files.extend(
+                    [
+                        {
+                            "id": _file["id"],
+                            "name": _file["name"],
+                            "size": _file["size"],
+                            "url": _file["downloadUrl"],
+                        }
+                        for _file in api_files
+                    ]
+                )
 
                 page = api_data["pagination"]["next"]
                 if page == -1:
                     break
-                else:
-                    continue
 
             self.sleep(5)
 
@@ -168,76 +205,91 @@ class DebridlinkFrTorrent(SimpleDecrypter):
         exclude_filters = self.config.get("exclude_filter").split(";")
         excluded_ids = []
         for _filter in exclude_filters:
-            excluded_ids.extend([_file["id"] for _file in files
-                                 if fnmatch.fnmatch(_file["name"], _filter)])
+            excluded_ids.extend(
+                [
+                    _file["id"]
+                    for _file in files
+                    if fnmatch.fnmatch(_file["name"], _filter)
+                ]
+            )
 
         excluded_ids = uniquify(excluded_ids)
 
         include_filters = self.config.get("include_filter").split(";")
         included_ids = []
         for _filter in include_filters:
-            included_ids.extend([_file["id"] for _file in files
-                                 if fnmatch.fnmatch(_file["name"], _filter)])
+            included_ids.extend(
+                [
+                    _file["id"]
+                    for _file in files
+                    if fnmatch.fnmatch(_file["name"], _filter)
+                ]
+            )
 
         included_ids = uniquify(included_ids)
 
-        selected_ids = [_id for _id in included_ids
-                        if _id not in excluded_ids]
+        selected_ids = [_id for _id in included_ids if _id not in excluded_ids]
 
-        unwanted_ids = [_file["id"] for _file in files
-                        if _file["id"] not in selected_ids]
+        unwanted_ids = [
+            _file["id"] for _file in files if _file["id"] not in selected_ids
+        ]
 
-        self.pyfile.size = sum([_file["size"] for _file in files
-                               if _file["id"] in selected_ids])
+        self.pyfile.size = sum(
+            [_file["size"] for _file in files if _file["id"] in selected_ids]
+        )
 
-        api_data = self.api_request_safe("v2/seedbox/{}/config".format(torrent_id),
-                                         post={'files-unwanted': json.dumps(unwanted_ids)})
+        api_data = self.api_request_safe(
+            "v2/seedbox/{}/config".format(torrent_id),
+            post={"files-unwanted": json.dumps(unwanted_ids)},
+        )
 
         if not api_data["success"]:
-            self.exit_error("{} (code: {})".format(api_data.get("error_description",
-                                                                error_description(api_data["error"])),
-                                                   api_data["error"]))
-
-        if self.tmp_file:
-            os.remove(self.tmp_file)
-
-        return torrent_id, [_file["url"] for _file in files
-                            if _file["id"] in selected_ids]
+            self.exit_error(
+                "{} (code: {})".format(
+                    api_data.get(
+                        "error_description", error_description(api_data["error"])
+                    ),
+                    api_data["error"],
+                )
+            )
+
+        return torrent_id, [
+            _file["url"] for _file in files if _file["id"] in selected_ids
+        ]
 
     def wait_for_server_dl(self, torrent_id):
         """ Show progress while the server does the download """
 
-        api_data = self.api_request_safe("v2/seedbox/activity",
-                                         get={"ids": torrent_id})
-
-        if not api_data["success"]:
-            self.fail("{} (code: {})".format(api_data.get("error_description",
-                                                         api_data.get("error_description",
-                                                                      error_description(api_data["error"]))),
-                                            api_data["error"]))
-
         self.pyfile.set_custom_status("torrent")
         self.pyfile.set_progress(0)
 
-        progress = int(api_data["value"][torrent_id]["downloadPercent"])
-        while progress != 100:
-            progress = int(api_data["value"][torrent_id]["downloadPercent"])
-            self.pyfile.set_progress(progress)
-
-            self.sleep(5)
-
-            api_data = self.api_request_safe("v2/seedbox/activity",
-                                             get={'ids': torrent_id})
+        while True:
+            api_data = self.api_request_safe("v2/seedbox/activity", get={"ids": torrent_id})
 
             if not api_data["success"]:
-                self.fail("{} (code: {})".format(api_data.get("error_description",
-                                                             api_data.get("error_description",
-                                                                          error_description(api_data["error"]))),
-                                                api_data["error"]))
+                self.fail(
+                    "{} (code: {})".format(
+                        api_data.get(
+                            "error_description",
+                            api_data.get(
+                                "error_description", error_description(api_data["error"])
+                            ),
+                        ),
+                        api_data["error"],
+                    )
+                )
 
             if not api_data["value"]:
                 self.fail("Torrent deleted from server")
 
+            progress = int(api_data["value"][torrent_id]["downloadPercent"])
+            self.pyfile.set_progress(progress)
+
+            if progress == 100:
+                break
+
+            self.sleep(5)
+
         self.pyfile.set_progress(100)
 
     def delete_torrent_from_server(self, torrent_id):
@@ -248,13 +300,18 @@ class DebridlinkFrTorrent(SimpleDecrypter):
         c.setopt(pycurl.URL, url)
         c.setopt(pycurl.SSL_VERIFYPEER, 0)
         c.setopt(pycurl.USERAGENT, "pyLoad/{}".format(self.pyload.version))
-        c.setopt(pycurl.HTTPHEADER, ["Authorization: Bearer " + self.api_token,
-                                     "Accept: */*",
-                                     "Accept-Language: en-US,en",
-                                     "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7",
-                                     "Connection: keep-alive",
-                                     "Keep-Alive: 300",
-                                     "Expect:"])
+        c.setopt(
+            pycurl.HTTPHEADER,
+            [
+                "Authorization: Bearer " + self.api_token,
+                "Accept: */*",
+                "Accept-Language: en-US,en",
+                "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7",
+                "Connection: keep-alive",
+                "Keep-Alive: 300",
+                "Expect:",
+            ],
+        )
         c.setopt(pycurl.CUSTOMREQUEST, "DELETE")
         c.perform()
         code = c.getinfo(pycurl.RESPONSE_CODE)
@@ -271,9 +328,15 @@ class DebridlinkFrTorrent(SimpleDecrypter):
         if len(self.account.accounts) == 0:
             self.fail(self._("This plugin requires an active Debrid-slink.fr account"))
 
-        self.api_token = self.account.accounts[list(self.account.accounts.keys())[0]]["api_token"]
+        self.api_token = self.account.accounts[list(self.account.accounts.keys())[0]][
+            "api_token"
+        ]
 
         torrent_id, torrent_urls = self.send_request_to_server()
         self.wait_for_server_dl(torrent_id)
 
         self.packages = [(pyfile.package().name, torrent_urls, pyfile.package().name)]
+
+        if self.tmp_file:
+            os.remove(self.tmp_file)
+
-- 
2.30.2

