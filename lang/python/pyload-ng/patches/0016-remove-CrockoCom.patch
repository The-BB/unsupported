From d39e6163d4148732dbe84abeae59f212d1dca199 Mon Sep 17 00:00:00 2001
From: GammaC0de <gammac0de@users.noreply.github.com>
Date: Tue, 23 Nov 2021 21:33:05 +0200
Subject: [PATCH 16/73] remove CrockoCom

---
 .../plugins/decrypters/CrockoComFolder.py     | 29 --------
 src/pyload/plugins/downloaders/CrockoCom.py   | 68 -------------------
 2 files changed, 97 deletions(-)
 delete mode 100644 src/pyload/plugins/decrypters/CrockoComFolder.py
 delete mode 100644 src/pyload/plugins/downloaders/CrockoCom.py

diff --git a/src/pyload/plugins/decrypters/CrockoComFolder.py b/src/pyload/plugins/decrypters/CrockoComFolder.py
deleted file mode 100644
index 965cd7bb6..000000000
--- a/src/pyload/plugins/decrypters/CrockoComFolder.py
+++ /dev/null
@@ -1,29 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from ..base.simple_decrypter import SimpleDecrypter
-
-
-class CrockoComFolder(SimpleDecrypter):
-    __name__ = "CrockoComFolder"
-    __type__ = "decrypter"
-    __version__ = "0.07"
-    __status__ = "testing"
-
-    __pattern__ = r"http://(?:www\.)?crocko\.com/f/.+"
-    __config__ = [
-        ("enabled", "bool", "Activated", True),
-        ("use_premium", "bool", "Use premium account if available", True),
-        (
-            "folder_per_package",
-            "Default;Yes;No",
-            "Create folder for each package",
-            "Default",
-        ),
-        ("max_wait", "int", "Reconnect if waiting time is greater than minutes", 10),
-    ]
-
-    __description__ = """Crocko.com folder decrypter plugin"""
-    __license__ = "GPLv3"
-    __authors__ = [("zoidberg", "zoidberg@mujmail.cz")]
-
-    LINK_PATTERN = r'<td class="last"><a href="(.+?)">download</a>'
diff --git a/src/pyload/plugins/downloaders/CrockoCom.py b/src/pyload/plugins/downloaders/CrockoCom.py
deleted file mode 100644
index 159bef65f..000000000
--- a/src/pyload/plugins/downloaders/CrockoCom.py
+++ /dev/null
@@ -1,68 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import re
-import urllib.parse
-
-from ..anticaptchas.ReCaptcha import ReCaptcha
-from ..base.simple_downloader import SimpleDownloader
-
-
-class CrockoCom(SimpleDownloader):
-    __name__ = "CrockoCom"
-    __type__ = "downloader"
-    __version__ = "0.27"
-    __status__ = "testing"
-
-    __pattern__ = r"http://(?:www\.)?(crocko|easy-share)\.com/\w+"
-    __config__ = [
-        ("enabled", "bool", "Activated", True),
-        ("use_premium", "bool", "Use premium account if available", True),
-        ("fallback", "bool", "Fallback to free download if premium fails", True),
-        ("chk_filesize", "bool", "Check file size", True),
-        ("max_wait", "int", "Reconnect if waiting time is greater than minutes", 10),
-    ]
-
-    __description__ = """Crocko downloader plugin"""
-    __license__ = "GPLv3"
-    __authors__ = [("zoidberg", "zoidberg@mujmail.cz")]
-
-    NAME_PATTERN = r'<span class="fz24">Download:\s*<strong>(?P<N>.*)'
-    SIZE_PATTERN = r'<span class="tip1"><span class="inner">(?P<S>.+?)</span></span>'
-    OFFLINE_PATTERN = r"<h1>Sorry,<br />the page you\'re looking for <br />isn\'t here.</h1>|File not found"
-
-    CAPTCHA_PATTERN = r"u='(/file_contents/captcha/\w+)';\s*w='(\d+)';"
-
-    FORM_PATTERN = r'<form  method="post" action="(.+?)">(.*?)</form>'
-    FORM_INPUT_PATTERN = r'<input[^>]* name="?([^" ]+)"? value="?([^" ]+)"?.*?>'
-
-    NAME_REPLACEMENTS = [(r"<.*?>", "")]
-
-    def handle_free(self, pyfile):
-        if "You need Premium membership to download this file." in self.data:
-            self.fail(self._("You need Premium membership to download this file"))
-
-        for _ in range(5):
-            m = re.search(self.CAPTCHA_PATTERN, self.data)
-            if m is not None:
-                url = urllib.parse.urljoin("http://crocko.com/", m.group(1))
-                self.wait(m.group(2))
-                self.data = self.load(url)
-            else:
-                break
-
-        m = re.search(self.FORM_PATTERN, self.data, re.S)
-        if m is None:
-            self.error(self._("FORM_PATTERN not found"))
-
-        action, form = m.groups()
-        inputs = dict(re.findall(self.FORM_INPUT_PATTERN, form))
-        self.captcha = ReCaptcha(pyfile)
-
-        (
-            inputs["recaptcha_response_field"],
-            inputs["recaptcha_challenge_field"],
-        ) = self.captcha.challenge()
-        self.download(action, post=inputs)
-
-        if self.scan_download({"captcha": self.captcha.KEY_V1_PATTERN}):
-            self.retry_captcha()
-- 
2.30.2

