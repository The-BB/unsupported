From 540532e195721515f0a19f342b4ce6b942680f68 Mon Sep 17 00:00:00 2001
From: GammaC0de <gammac0de@users.noreply.github.com>
Date: Fri, 14 May 2021 18:11:23 +0300
Subject: [PATCH 030/150] [Keep2ShareCc] sync with stable

---
 src/pyload/plugins/accounts/Keep2ShareCc.py   | 154 +++++++++++++++++-
 .../plugins/downloaders/Keep2ShareCc.py       |   4 +-
 2 files changed, 147 insertions(+), 11 deletions(-)

--- a/src/pyload/plugins/accounts/Keep2ShareCc.py
+++ b/src/pyload/plugins/accounts/Keep2ShareCc.py
@@ -1,17 +1,21 @@
 # -*- coding: utf-8 -*-
 
 import json
+import re
 
+from pyload.core.datatypes.pyfile import PyFile
 from pyload.core.network.http.exceptions import BadHeader
 from pyload.core.network.request_factory import get_url
 
+from ..anticaptchas.ReCaptcha import ReCaptcha
 from ..base.account import BaseAccount
+from ..base.captcha import BaseCaptcha
 
 
 class Keep2ShareCc(BaseAccount):
     __name__ = "Keep2ShareCc"
     __type__ = "account"
-    __version__ = "0.15"
+    __version__ = "0.17"
     __status__ = "testing"
 
     __description__ = """Keep2Share.cc account plugin"""
@@ -22,8 +26,10 @@ class Keep2ShareCc(BaseAccount):
         ("GammaC0de", "nitzo2001[AT]yahoo[DOT]com"),
     ]
 
+    RECAPTCHA_KEY = "6LcYcN0SAAAAABtMlxKj7X0hRxOY8_2U86kI1vbb"
+
     API_URL = "https://keep2share.cc/api/v2/"
-    #: See https://github.com/keep2share/api
+    #: See https://keep2share.github.io/api/ https://github.com/keep2share/api
 
     @classmethod
     def api_response(cls, method, **kwargs):
@@ -35,9 +41,8 @@ class Keep2ShareCc(BaseAccount):
 
         return {
             "validuntil": json_data["account_expires"],
-            # TODO: Remove `>> 10` in 0.6.x
-            "trafficleft": json_data["available_traffic"] >> 10,
-            "premium": True,
+            "trafficleft": json_data["available_traffic"],
+            "premium": True if json_data["account_expires"] else False,
         }
 
     def signin(self, user, password, data):
@@ -46,7 +51,7 @@ class Keep2ShareCc(BaseAccount):
                 json_data = self.api_response("test", auth_token=data["token"])
 
             except BadHeader as exc:
-                if exc.code == 403:
+                if exc.code == 403:  #: Session expired
                     pass
 
                 else:
@@ -58,11 +63,142 @@ class Keep2ShareCc(BaseAccount):
             json_data = self.api_response("login", username=user, password=password)
 
         except BadHeader as exc:
-            if exc.code == 406:
-                self.fail_login()
+            if exc.code == 406:  #: Captcha needed
+                # dummy pyfile
+                pyfile = PyFile(
+                    self.pyload.files,
+                    -1,
+                    "https://k2s.cc",
+                    "https://k2s.cc",
+                    0,
+                    0,
+                    "",
+                    self.classname,
+                    -1,
+                    -1,
+                )
+                pyfile.plugin = self
+
+                errors = [
+                    json.loads(m.group(0)).get("errorCode", 0)
+                    for m in re.finditer(r"{[^}]+}", exc.content)
+                ]
+                if 33 in errors:  #: ERROR_RE_CAPTCHA_REQUIRED
+                    #: Recaptcha
+                    self.captcha = ReCaptcha(pyfile)
+                    for i in range(10):
+                        json_data = self.api_response("RequestReCaptcha")
+                        if json_data["code"] != 200:
+                            self.log_error(_("Request reCAPTCHA API failed"))
+                            self.fail_login(_("Request reCAPTCHA API failed"))
+
+                        re_captcha_response, _ = self.captcha.challenge(
+                            self.RECAPTCHA_KEY, version="2js", secure_token=False
+                        )
+                        try:
+                            json_data = self.api_response(
+                                "login",
+                                username=user,
+                                password=password,
+                                re_captcha_challenge=json_data["challenge"],
+                                re_captcha_response=re_captcha_response,
+                            )
+
+                        except BadHeader as exc:
+                            if exc.code == 406:
+                                errors = [
+                                    json.loads(m.group(0)).get("errorCode", 0)
+                                    for m in re.finditer(r"{[^}]+}", exc.content)
+                                ]
+                                if 31 in errors:  #: ERROR_CAPTCHA_INVALID
+                                    self.captcha.invalid()
+                                    continue
+
+                                else:
+                                    self.log_error(exc.content)
+                                    self.fail_login(exc.content)
+
+                            else:
+                                self.log_error(exc.content)
+                                self.fail_login(exc.content)
+
+                        else:
+                            self.captcha.correct()
+                            data["token"] = json_data["auth_token"]
+                            break
+
+                    else:
+                        self.log_error(_("Max captcha retries reached"))
+                        self.fail_login(_("Max captcha retries reached"))
+
+                elif 30 in errors:  #: ERROR_CAPTCHA_REQUIRED
+                    #: Normal captcha
+                    self.captcha = BaseCaptcha(pyfile)
+                    for i in range(10):
+                        json_data = self.api_response("RequestCaptcha")
+                        if json_data["code"] != 200:
+                            self.log_error(self._("Request captcha API failed"))
+                            self.fail_login(self._("Request captcha API failed"))
+
+                        captcha_response = self.captcha.decrypt(
+                            json_data["captcha_url"]
+                        )
+                        try:
+                            json_data = self.api_response(
+                                "login",
+                                username=user,
+                                password=password,
+                                captcha_challenge=json_data["challenge"],
+                                captcha_response=captcha_response,
+                            )
+
+                        except BadHeader as exc:
+                            if exc.code == 406:
+                                errors = [
+                                    json.loads(m.group(0)).get("errorCode", 0)
+                                    for m in re.finditer(r"{[^}]+}", exc.content)
+                                ]
+                                if 31 in errors:  #: ERROR_CAPTCHA_INVALID
+                                    self.captcha.invalid()
+                                    continue
+
+                                else:
+                                    self.log_error(exc.content)
+                                    self.fail_login(exc.content)
+
+                            else:
+                                self.log_error(exc.content)
+                                self.fail_login(exc.content)
+
+                        else:
+                            self.captcha.correct()
+                            data["token"] = json_data["auth_token"]
+                            break
+
+                    else:
+                        self.log_error(self._("Max captcha retries reached"))
+                        self.fail_login(self._("Max captcha retries reached"))
+
+                else:
+                    self.log_error(exc.content)
+                    self.fail_login(exc.content)
 
             else:
-                raise
+                self.log_error(exc.content)
+                self.fail_login(exc.content)
 
         else:
+            #: No captcha
             data["token"] = json_data["auth_token"]
+
+    """
+     @NOTE: below are methods
+      necessary for captcha to work with account plugins
+    """
+
+    def check_status(self):
+        pass
+
+    def retry_captcha(self, attemps=10, wait=1, msg="Max captcha retries reached"):
+        self.captcha.invalid()
+        self.fail_login(msg=self._("Invalid captcha"))
--- a/src/pyload/plugins/downloaders/Keep2ShareCc.py
+++ b/src/pyload/plugins/downloaders/Keep2ShareCc.py
@@ -12,7 +12,7 @@ from ..base.simple_downloader import Sim
 class Keep2ShareCc(SimpleDownloader):
     __name__ = "Keep2ShareCc"
     __type__ = "downloader"
-    __version__ = "0.43"
+    __version__ = "0.45"
     __status__ = "testing"
 
     __pattern__ = r"https?://(?:www\.)?(keep2share|k2s|keep2s)\.cc/file/(?P<ID>\w+)"
@@ -37,7 +37,7 @@ class Keep2ShareCc(SimpleDownloader):
     URL_REPLACEMENTS = [(__pattern__ + ".*", r"https://k2s.cc/file/\g<ID>")]
 
     API_URL = "https://keep2share.cc/api/v2/"
-    #: See https://github.com/keep2share/api
+    #: See https://keep2share.github.io/api/ https://github.com/keep2share/api
 
     @classmethod
     def api_response(cls, method, **kwargs):
