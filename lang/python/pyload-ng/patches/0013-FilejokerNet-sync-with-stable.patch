From c24d9c75e394b16ca9c6a75cb4d148a657d47995 Mon Sep 17 00:00:00 2001
From: GammaC0de <gammac0de@users.noreply.github.com>
Date: Tue, 4 May 2021 23:52:58 +0300
Subject: [PATCH 013/150] [FilejokerNet] sync with stable

---
 src/pyload/plugins/accounts/FilejokerNet.py   | 47 ++++++++++++++--
 .../plugins/downloaders/FilejokerNet.py       | 55 +++++++++++--------
 2 files changed, 74 insertions(+), 28 deletions(-)

--- a/src/pyload/plugins/accounts/FilejokerNet.py
+++ b/src/pyload/plugins/accounts/FilejokerNet.py
@@ -1,16 +1,55 @@
 # -*- coding: utf-8 -*-
 
-from ..base.xfs_account import XFSAccount
+import json
+import time
 
+from ..base.account import BaseAccount
 
-class FilejokerNet(XFSAccount):
+
+class FilejokerNet(BaseAccount):
     __name__ = "FilejokerNet"
     __type__ = "account"
-    __version__ = "0.02"
+    __version__ = "0.04"
     __status__ = "testing"
 
     __description__ = """Filejoker.net account plugin"""
     __license__ = "GPLv3"
     __authors__ = [("GammaC0de", "nitzo2001[AT]yahoo[DOT]com")]
 
-    PLUGIN_DOMAIN = "filejoker.net"
+    API_URL = "https://filejoker.net/zapi"
+
+    def api_request(self, op, **kwargs):
+        args = {"op": op}
+        args.update(kwargs)
+        return json.loads(self.load(self.API_URL, get=args))
+
+    def grab_info(self, user, password, data):
+        api_data = self.api_request("my_account", session=data["session"])
+        premium_expire = api_data.get("usr_premium_expire")
+
+        validuntil = (
+            time.mktime(time.strptime(premium_expire, "%Y-%m-%d %H:%M:%S"))
+            if premium_expire
+            else -1
+        )
+        trafficleft = (
+            int(api_data["traffic_left"]) * 1024 ** 2 if "traffic_left" in api_data else None
+        )
+        premium = bool(premium_expire)
+
+        return {
+            "validuntil": validuntil,
+            "trafficleft": trafficleft,
+            "premium": premium,
+        }
+
+    def signin(self, user, password, data):
+        session = data.get("session")
+        if session and "error" not in self.api_request("my_account", session=session):
+            self.skip_login()
+
+        api_data = self.api_request("login", **{"email": user, "pass": password})
+        if "error" in api_data:
+            self.fail_login()
+
+        data["session"] = api_data["session"]
--- a/src/pyload/plugins/downloaders/FilejokerNet.py
+++ b/src/pyload/plugins/downloaders/FilejokerNet.py
@@ -51,12 +51,12 @@ class FilejokerNet(XFSDownloader):
         return ".js" not in action if action else False
 
     FORM_PATTERN = filter_form
-    FORM_INPUTS_MAP = {'op': re.compile(r'^download')}
+    FORM_INPUTS_MAP = {"op": re.compile(r"^download")}
 
     API_URL = "https://filejoker.net/zapi"
 
-    def api_response(self, op, **kwargs):
-        args = {'op': op}
+    def api_request(self, op, **kwargs):
+        args = {"op": op}
         args.update(kwargs)
         return json.loads(self.load(self.API_URL, get=args))
 
@@ -78,18 +78,21 @@ class FilejokerNet(XFSDownloader):
 
             if captcha_key:
                 captcha_inputs = {}
-                for _i in m.group(1).split(','):
-                    _k, _v = _i.split(':', 1)
+                for _i in m.group(1).split(","):
+                    _k, _v = _i.split(":", 1)
                     _k = _k.strip('" ')
                     if "g-recaptcha-response" in _v:
                         _v = response + "1111"
 
                     captcha_inputs[_k] = _v.strip('" ')
 
-                self.req.http.c.setopt(pycurl.HTTPHEADER, ["X-Requested-With: XMLHttpRequest"])
-
-                html = self.load(urllib.parse.urljoin(self.pyfile.url, "/ddl"),
-                                 post=captcha_inputs)
+                self.req.http.c.setopt(
+                    pycurl.HTTPHEADER, ["X-Requested-With: XMLHttpRequest"]
+                )
+
+                html = self.load(
+                    urllib.parse.urljoin(self.pyfile.url, "/ddl"), post=captcha_inputs
+                )
 
                 self.req.http.c.setopt(pycurl.HTTPHEADER, ["X-Requested-With:"])
 
@@ -100,26 +103,30 @@ class FilejokerNet(XFSDownloader):
                     self.retry_captcha()
 
     def handle_premium(self, pyfile):
-        res = self.api_response("download1",
-                                file_code=self.info['pattern']['ID'],
-                                session=self.account.info['data']['session'])
+        api_data = self.api_request(
+            "download1",
+            file_code=self.info["pattern"]["ID"],
+            session=self.account.info["data"]["session"],
+        )
 
-        if 'error' in res:
-            if res['error'] == "no file":
+        if "error" in api_data:
+            if api_data["error"] == "no file":
                 self.offline()
 
             else:
-                self.fail(res['error'])
+                self.fail(api_data["error"])
 
-        pyfile.name = res['file_name']
-        pyfile.size = res['file_size']
+        pyfile.name = api_data["file_name"]
+        pyfile.size = api_data["file_size"]
 
-        res = self.api_response("download2",
-                                file_code=self.info['pattern']['ID'],
-                                download_id=res['download_id'],
-                                session=self.account.info['data']['session'])
+        api_data = self.api_request(
+            "download2",
+            file_code=self.info["pattern"]["ID"],
+            download_id=api_data["download_id"],
+            session=self.account.info["data"]["session"],
+        )
 
-        if 'error' in res:
-            self.fail(res['error'])
+        if "error" in api_data:
+            self.fail(api_data["error"])
 
-        self.link = res['direct_link']
+        self.link = api_data["direct_link"]
