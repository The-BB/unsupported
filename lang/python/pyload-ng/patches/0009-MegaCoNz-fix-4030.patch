From 7d4545327de4f4b1fbf5e96669d3368b6ed9a580 Mon Sep 17 00:00:00 2001
From: GammaC0de <gammac0de@users.noreply.github.com>
Date: Fri, 5 Nov 2021 15:44:49 +0200
Subject: [PATCH 09/73] [MegaCoNz] fix #4030

---
 .../plugins/decrypters/MegaCoNzFolder.py      | 23 ++-----
 src/pyload/plugins/downloaders/MegaCoNz.py    | 60 +++++++++++--------
 2 files changed, 39 insertions(+), 44 deletions(-)

diff --git a/src/pyload/plugins/decrypters/MegaCoNzFolder.py b/src/pyload/plugins/decrypters/MegaCoNzFolder.py
index 8609e0cda..52995bd83 100644
--- a/src/pyload/plugins/decrypters/MegaCoNzFolder.py
+++ b/src/pyload/plugins/decrypters/MegaCoNzFolder.py
@@ -12,10 +12,10 @@ from ..downloaders.MegaCoNz import MegaClient, MegaCrypto
 class MegaCoNzFolder(BaseDecrypter):
     __name__ = "MegaCoNzFolder"
     __type__ = "decrypter"
-    __version__ = "0.24"
+    __version__ = "0.25"
     __status__ = "testing"
 
-    __pattern__ = r"(?:https?://(?:www\.)?mega(?:\.co)?\.nz/|mega:|chrome:.+?)(?:folder/|#F!)(?P<ID>[\w^_]+)[!#](?P<KEY>[\w,\-=]+)"
+    __pattern__ = r"https?://(?:www\.)?mega(?:\.co)?\.nz/folder/(?P<ID>[\w^_]+)#(?P<KEY>[\w,\-=]+)/?$"
     __config__ = [
         ("enabled", "bool", "Activated", True),
         ("use_premium", "bool", "Use premium account if available", True),
@@ -54,32 +54,19 @@ class MegaCoNzFolder(BaseDecrypter):
             "ID: {}".format(id), "Key: {}".format(master_key), "Type: public folder"
         )
 
-        master_key = MegaCrypto.base64_to_a32(master_key)
-
         mega = MegaClient(self, id)
 
         #: F is for requesting folder listing (kind like a `ls` command)
         res = mega.api_request(a="f", c=1, r=1, ca=1, ssl=1)
-
         if isinstance(res, int):
             mega.check_error(res)
         elif "e" in res:
             mega.check_error(res["e"])
 
-        def get_node_key(k):
-            return to_str(
-                MegaCrypto.base64_encode(
-                    MegaCrypto.a32_to_bytes(MegaCrypto.decrypt_key(k, master_key))
-                ),
-                "ascii",
-            )
-
         urls = [
-            "https://mega.co.nz/#N!{}!{}###n={}".format(
-                f["h"], get_node_key(f["k"][f["k"].index(":") + 1 :]), id
-            )
-            for f in res["f"]
-            if f["t"] == 0 and ":" in f["k"]
+            "https://mega.co.nz/folder/{}#{}/file/{}".format(id, master_key, node["h"])
+            for node in res["f"]
+            if node["t"] == 0 and ":" in node["k"]
         ]
 
         if urls:
diff --git a/src/pyload/plugins/downloaders/MegaCoNz.py b/src/pyload/plugins/downloaders/MegaCoNz.py
index 99decaa51..471214bd6 100644
--- a/src/pyload/plugins/downloaders/MegaCoNz.py
+++ b/src/pyload/plugins/downloaders/MegaCoNz.py
@@ -310,10 +310,10 @@ class MegaClient:
 class MegaCoNz(BaseDownloader):
     __name__ = "MegaCoNz"
     __type__ = "downloader"
-    __version__ = "0.55"
+    __version__ = "0.56"
     __status__ = "testing"
 
-    __pattern__ = r"(?:https?://(?:www\.)?mega(?:\.co)?\.nz/|mega:|chrome:.+?)(?:file/|#(?P<TYPE>N|)!)(?P<ID>[\w^_]+)[!#](?P<KEY>[\w\-,=]+)(?:###n=(?P<OWNER>[\w^_]+))?"
+    __pattern__ = r"https?://(?:www\.)?mega(?:\.co)?\.nz/(?:file/(?P<ID1>[\w^_]+)#(?P<K1>[\w\-,=]+)|folder/(?P<ID2>[\w^_]+)#(?P<K2>[\w\-,=]+)/file/(?P<NID>[\w^_]+))"
     __config__ = [("enabled", "bool", "Activated", True)]
 
     __description__ = """Mega.co.nz downloader plugin"""
@@ -456,43 +456,51 @@ class MegaCoNz(BaseDownloader):
                 self.skip(self._("File exists."))
 
     def process(self, pyfile):
-        id = self.info["pattern"]["ID"]
-        key = self.info["pattern"]["KEY"]
-        public = self.info["pattern"]["TYPE"] in ("", None)
-        owner = self.info["pattern"]["OWNER"]
-
-        if not public and not owner:
-            self.log_error(self._("Missing owner in URL"))
-            self.fail(self._("Missing owner in URL"))
-
-        self.log_debug(
-            "ID: {}".format(id),
-            self._("Key: {}").format(key),
-            self._("Type: {}").format("public" if public else "node"),
-            self._("Owner: {}").format(owner),
-        )
+        node_id = self.info['pattern']['NID']
+        public = node_id in ("", None)
+        id = self.info['pattern']['ID1'] or self.info['pattern']['ID2']
+        key = self.info['pattern']['K1'] or self.info['pattern']['K2']
+
+        self.log_debug("ID: {},".format(id),
+                       "Key: {}".format(key),
+                       "Type: {}".format('public' if public else 'node'),
+                       "Owner: {}".format(node_id))
+
+        mega = MegaClient(self, id)
+
+        master_key = MegaCrypto.base64_to_a32(key)
+        if not public:
+            #: F is for requesting folder listing (kind like a `ls` command)
+            res = mega.api_request(a="f", c=1, r=1, ca=1, ssl=1)
+            if isinstance(res, int):
+                mega.check_error(res)
+            elif isinstance(res, dict) and 'e' in res:
+                mega.check_error(res['e'])
+
+            for node in res['f']:
+                if node['t'] == 0 and ":" in node["k"] and node['h'] == node_id:
+                    master_key = MegaCrypto.decrypt_key(node['k'][node['k'].index(':') + 1:], master_key)
+                    break
+
+            else:
+                self.offline()
 
-        key = MegaCrypto.base64_to_a32(key)
-        if len(key) != 8:
+        if len(master_key) != 8:
             self.log_error(self._("Invalid key length"))
             self.fail(self._("Invalid key length"))
 
-        mega = MegaClient(
-            self, self.info["pattern"]["OWNER"] or self.info["pattern"]["ID"]
-        )
-
         #: G is for requesting a download url
         if public:
             res = mega.api_request(a="g", g=1, p=id, ssl=1)
         else:
-            res = mega.api_request(a="g", g=1, n=id, ssl=1)
+            res = mega.api_request(a="g", g=1, n=node_id, ssl=1)
 
         if isinstance(res, int):
             mega.check_error(res)
         elif isinstance(res, dict) and "e" in res:
             mega.check_error(res["e"])
 
-        attr = MegaCrypto.decrypt_attr(res["at"], key)
+        attr = MegaCrypto.decrypt_attr(res["at"], master_key)
         if not attr:
             self.fail(self._("Decryption failed"))
 
@@ -522,7 +530,7 @@ class MegaCoNz(BaseDownloader):
             else:
                 raise
 
-        self.decrypt_file(key)
+        self.decrypt_file(master_key)
 
         #: Everything is finished and final name can be set
         pyfile.name = name
-- 
2.30.2

