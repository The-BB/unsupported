From 77024710476db792572d6ac05d15df9dfd2dae7d Mon Sep 17 00:00:00 2001
From: GammaC0de <gammac0de@users.noreply.github.com>
Date: Wed, 29 Dec 2021 00:12:41 +0200
Subject: [PATCH 63/73] [API] fix "legacy" decorator (fixes #4037)

---
 src/pyload/core/api/__init__.py | 55 +++++++++++++++++++--------------
 1 file changed, 31 insertions(+), 24 deletions(-)

diff --git a/src/pyload/core/api/__init__.py b/src/pyload/core/api/__init__.py
index 02e6f3163..c4da29f0a 100644
--- a/src/pyload/core/api/__init__.py
+++ b/src/pyload/core/api/__init__.py
@@ -8,30 +8,26 @@
 #           \  /
 #            \/
 
-import re
-
+import json
 import os
+import re
 import time
+from enum import IntFlag
 
-from functools import wraps
-
+from ..datatypes.data import *
+from ..datatypes.enums import *
+from ..datatypes.exceptions import *
 from ..datatypes.pyfile import PyFile
 from ..log_factory import LogFactory
 from ..network.request_factory import get_url
+from ..utils import fs, seconds
 from ..utils.old.packagetools import parse_names
-from ..utils import seconds, fs
-
-import json
-from enum import IntFlag
-
-from ..datatypes.exceptions import *
-from ..datatypes.enums import *
-from ..datatypes.data import *
 
 # contains function names mapped to their permissions
 # unlisted functions are for admins only
 perm_map = {}
 
+
 # decorator only called on init, never initialized, so has no effect on runtime
 def permission(bits):
     class Wrapper:
@@ -67,21 +63,17 @@ class Role(IntFlag):
 
 
 def has_permission(userperms, perms):
-    # bytewise or perms before if needed
+    # bitwise or perms before if needed
     return perms == (userperms & perms)
 
 
-def legacy(func_name):
-    def decorator(func):
-        @wraps(func)
-        def wrapper(self, *args, **kwargs):
-            if not hasattr(self, func_name):
-                setattr(self, func_name, func.__get__(self, self.__class__))
-            return func(self, *args, **kwargs)
-
-        return wrapper
+def legacy(legacy_name):
+    class Wrapper:
+        def __new__(cls, func, *args, **kwargs):
+            setattr(func, "__legacy__", legacy_name)
+            return func
 
-    return decorator
+    return Wrapper
 
 
 # API VERSION
@@ -102,6 +94,21 @@ class Api:
     Admin user have all permissions, and are the only ones who can access the methods with no specific permission.
     """
 
+    def __new__(cls, core):
+        obj = super(Api, cls).__new__(cls)
+
+        # add methods specified by the @legacy decorator
+        for func_name in dir(obj):
+            if func_name[0] == "_":
+                continue
+
+            func = getattr(obj, func_name)
+            if callable(func) and hasattr(func, "__legacy__"):
+                legacy_name = getattr(func, "__legacy__")
+                setattr(obj, legacy_name, func)
+
+        return obj
+
     def __init__(self, core):
         self.pyload = core
         self._ = core._
@@ -1337,7 +1344,7 @@ class Api:
     @permission(Perms.STATUS)
     def has_service(self, plugin, func):
         """
-        Checks wether a service is available.
+        Checks whether a service is available.
 
         :param plugin:
         :param func:
-- 
2.30.2

