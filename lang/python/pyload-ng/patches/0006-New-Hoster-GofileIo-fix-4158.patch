From f545419b1f116f9bdb8c6267a3e0aae1fb7c03c2 Mon Sep 17 00:00:00 2001
From: GammaC0de <gammac0de@users.noreply.github.com>
Date: Sun, 12 Jun 2022 23:56:27 +0300
Subject: [PATCH 06/25] [New Hoster] GofileIo (fix #4158)

---
 .../plugins/decrypters/GofileIoFolder.py      | 86 +++++++++++++++++++
 src/pyload/plugins/downloaders/GofileIo.py    | 62 +++++++++++++
 2 files changed, 148 insertions(+)
 create mode 100644 src/pyload/plugins/decrypters/GofileIoFolder.py
 create mode 100644 src/pyload/plugins/downloaders/GofileIo.py

diff --git a/src/pyload/plugins/decrypters/GofileIoFolder.py b/src/pyload/plugins/decrypters/GofileIoFolder.py
new file mode 100644
index 000000000..ca7ab0a71
--- /dev/null
+++ b/src/pyload/plugins/decrypters/GofileIoFolder.py
@@ -0,0 +1,86 @@
+# -*- coding: utf-8 -*-
+
+import base64
+import json
+
+from ..base.decrypter import BaseDecrypter
+
+
+class GofileIoFolder(BaseDecrypter):
+    __name__ = "GofileIoFolder"
+    __type__ = "decrypter"
+    __version__ = "0.01"
+    __status__ = "testing"
+
+    __pattern__ = r"https?://(?:www\.)?gofile\.io/d/(?P<ID>\w+)"
+    __config__ = [
+        ("enabled", "bool", "Activated", True),
+        ("use_premium", "bool", "Use premium account if available", True),
+        (
+            "folder_per_package",
+            "Default;Yes;No",
+            "Create folder for each package",
+            "Default",
+        ),
+        ("max_wait", "int", "Reconnect if waiting time is greater than minutes", 10),
+    ]
+
+    __description__ = """Gofile.io decrypter plugin"""
+    __license__ = "GPLv3"
+    __authors__ = [("GammaC0de", "nitzo2001[AT]yahoo[DOT]com")]
+
+    URL_REPLACEMENTS = [("http://", "https://")]
+
+    API_URL = "https://api.gofile.io/"
+
+    def api_request(self, method, **kwargs):
+        json_data = self.load(self.API_URL + method, get=kwargs)
+        return json.loads(json_data)
+
+    def decrypt(self, pyfile):
+        api_data = self.api_request("createAccount")
+        if api_data["status"] != "ok":
+            self.fail(
+                self._("createAccount API failed | {}").format(api_data["status"])
+            )
+
+        token = api_data["data"]["token"]
+        api_data = self.api_request(
+            "getContent",
+            contentId=self.info["pattern"]["ID"],
+            token=token,
+            websiteToken=12345,
+        )
+        status = api_data["status"]
+        if status == "ok":
+            pack_links = [
+                "https://gofile.io/dl?q={}".format(
+                    base64.b64encode(
+                        json.dumps(
+                            {
+                                "t": token,
+                                "u": file_data["link"],
+                                "n": file_data["name"],
+                                "s": file_data["size"],
+                                "m": file_data["md5"],
+                            }
+                        ).encode("utf-8")
+                    ).decode("utf-8")
+                )
+                for file_data in api_data["data"]["contents"].values()
+                if file_data["type"] == "file"
+            ]
+
+            if pack_links:
+                self.packages.append(
+                    (pyfile.package().name, pack_links, pyfile.package().folder)
+                )
+
+            else:
+                self.offline()
+
+        elif status == "error-notFound":
+            self.offline()
+
+        else:
+            self.fail("getContent API failed | {}".format(status))
diff --git a/src/pyload/plugins/downloaders/GofileIo.py b/src/pyload/plugins/downloaders/GofileIo.py
new file mode 100644
index 000000000..8c05b1f35
--- /dev/null
+++ b/src/pyload/plugins/downloaders/GofileIo.py
@@ -0,0 +1,62 @@
+# -*- coding: utf-8 -*-
+
+import base64
+import json
+import re
+
+from ..base.downloader import BaseDownloader
+from ..helpers import set_cookie
+
+
+class GofileIo(BaseDownloader):
+    __name__ = "GofileIo"
+    __type__ = "downloader"
+    __version__ = "0.01"
+    __status__ = "testing"
+
+    __pattern__ = r"https?://(?:www\.)?gofile\.io/dl\?q=(?P<QS>.+)"
+    __config__ = [
+        ("enabled", "bool", "Activated", True),
+        ("use_premium", "bool", "Use premium account if available", True),
+        ("fallback", "bool", "Fallback to free download if premium fails", True),
+        ("chk_filesize", "bool", "Check file size", True),
+        ("max_wait", "int", "Reconnect if waiting time is greater than minutes", 10),
+    ]
+
+    __description__ = """Gofile.io downloader plugin"""
+    __license__ = "GPLv3"
+    __authors__ = [("GammaC0de", "nitzo2001[AT]yahoo[DOT]com")]
+
+    URL_REPLACEMENTS = [("http://", "https://")]
+
+    API_URL = "https://api.gofile.io/"
+
+    def api_request(self, method, **kwargs):
+        json_data = self.load(self.API_URL + method, get=kwargs)
+        return json.loads(json_data)
+
+    def get_info(self, url="", html=""):
+        info = super().get_info(url, html)
+
+        qs = re.match(self.__pattern__, url).group('QS')
+        file_info = json.loads(base64.b64decode(qs).decode("utf-8"))
+
+        info.update({
+            'name': file_info['n'],
+            'size': file_info['s'],
+            'md5': file_info['m'],
+            'u': file_info['u'],
+            "token": file_info["t"]
+        })
+
+        return info
+
+    def setup(self):
+        self.chunk_limit = -1
+        self.resume_download = True
+        self.multi_dl = True
+
+    def process(self, pyfile):
+        token = self.info["token"]
+        set_cookie(self.req.cj, "gofile.io", "accountToken", token)
+        self.download(self.info["u"], disposition=False)
-- 
2.30.2

