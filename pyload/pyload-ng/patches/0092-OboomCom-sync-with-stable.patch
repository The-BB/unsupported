From 8c57fb4e12f47c53d128f25d9398c40071588914 Mon Sep 17 00:00:00 2001
From: GammaC0de <gammac0de@users.noreply.github.com>
Date: Tue, 15 Jun 2021 03:30:24 +0300
Subject: [PATCH 092/150] [OboomCom] sync with stable

---
 src/pyload/plugins/accounts/OboomCom.py    |  77 ++++----
 src/pyload/plugins/downloaders/OboomCom.py | 216 +++++++++++----------
 2 files changed, 162 insertions(+), 131 deletions(-)

--- a/src/pyload/plugins/accounts/OboomCom.py
+++ b/src/pyload/plugins/accounts/OboomCom.py
@@ -1,64 +1,75 @@
 # -*- coding: utf-8 -*-
 
-import hashlib
 import json
+from binascii import b2a_hex
+
+from beaker.crypto.pbkdf2 import pbkdf2
+from pyload.core.network.request_factory import get_url
 
 from ..base.account import BaseAccount
 
 
+class PBKDF2:
+    def __init__(self, passphrase, salt, iterations=1000):
+        self.passphrase = passphrase
+        self.salt = salt
+        self.iterations = iterations
+
+    def hexread(self, octets):
+        return b2a_hex(pbkdf2(self.passphrase, self.salt, self.iterations, octets))
+
+
 class OboomCom(BaseAccount):
     __name__ = "OboomCom"
     __type__ = "account"
-    __version__ = "0.32"
+    __version__ = "0.34"
     __status__ = "testing"
 
     __description__ = """Oboom.com account plugin"""
     __license__ = "GPLv3"
-    __authors__ = [("stanley", "stanley.foerster@gmail.com")]
+    __authors__ = [
+        ("stanley", "stanley.foerster@gmail.com"),
+        ("GammaC0de", "nitzo2001[AT]yahoo[DOT]com"),
+    ]
+
+    #: See https://www.oboom.com/api
+    API_URL = "https://%s.oboom.com/1/"
+
+    @classmethod
+    def api_request(cls, subdomain, method, args={}):
+        return json.loads(get_url(cls.API_URL % subdomain + method, post=args))
 
-    def load_account_data(self, user, password):
+    def grab_info(self, user, password, data):
         salt = password[::-1]
-        pw = hashlib.pbkdf2_hmac(password.encode(), salt.encode(), 1000).hex()[16]
+        pbkdf2 = PBKDF2(password, salt, 1000).hexread(16)
 
-        html = self.load(
-            "http://www.oboom.com/1/login",  # TODO: Revert to `https` in 0.6.x
-            get={"auth": user, "pass": pw},
-        )
-        result = json.loads(html)
-
-        if result[0] != 200:
-            self.log_warning(self._("Failed to log in: {}").format(result[1]))
-            self.fail_login()
+        res = self.api_request("www", "login", {"auth": user, "pass": pbkdf2})
 
-        return result[1]
+        user_data = res[1]["user"]
 
-    def grab_info(self, user, password, data):
-        account_data = self.load_account_data(user, password)
+        premium = user_data["premium"] != "null"
 
-        userData = account_data["user"]
+        if user_data["premium_unix"] == "null":
+            validuntil = -1
 
-        premium = userData["premium"] != "null"
-
-        if userData["premium_unix"] == "null":
-            validUntil = -1
         else:
-            validUntil = float(userData["premium_unix"])
-
-        traffic = userData["traffic"]
+            validuntil = float(user_data["premium_unix"])
 
-        # TODO: Remove `>> 10` in 0.6.x
-        trafficLeft = traffic["current"] >> 10
-        maxTraffic = traffic["max"] >> 10  # TODO: Remove `>> 10` in 0.6.x
+        trafficleft = user_data["traffic"]["current"]
 
-        session = account_data["session"]
+        data["session"] = res[1]["session"]
 
         return {
             "premium": premium,
-            "validuntil": validUntil,
-            "trafficleft": trafficLeft,
-            "maxtraffic": maxTraffic,
-            "session": session,
+            "validuntil": validuntil,
+            "trafficleft": trafficleft,
         }
 
     def signin(self, user, password, data):
-        self.load_account_data(user, password)
+        salt = password[::-1]
+        pbkdf2 = PBKDF2(password, salt, 1000).hexread(16)
+
+        res = self.api_request("www", "login", {"auth": user, "pass": pbkdf2})
+
+        if res[0] != 200:
+            self.fail_login(res[1])
--- a/src/pyload/plugins/downloaders/OboomCom.py
+++ b/src/pyload/plugins/downloaders/OboomCom.py
@@ -2,152 +2,172 @@
 
 import json
 import re
-from datetime import timedelta
 
-from ..anticaptchas.ReCaptcha import ReCaptcha
-from ..base.downloader import BaseDownloader
+from pyload.core.network.request_factory import get_url
 
-#
-# Test links:
-# https://www.oboom.com/B7CYZIEB/10Mio.dat
+from ..anticaptchas.ReCaptcha import ReCaptcha
+from ..base.simple_downloader import SimpleDownloader
 
 
-class OboomCom(BaseDownloader):
+class OboomCom(SimpleDownloader):
     __name__ = "OboomCom"
     __type__ = "downloader"
-    __version__ = "0.46"
+    __version__ = "0.47"
     __status__ = "testing"
 
     __pattern__ = r"https?://(?:www\.)?oboom\.com/(?:#(?:id=|/)?)?(?P<ID>\w{8})"
-    __config__ = [("enabled", "bool", "Activated", True)]
+    __config__ = [
+        ("enabled", "bool", "Activated", True),
+        ("use_premium", "bool", "Use premium account if available", True),
+        ("fallback", "bool", "Fallback to free download if premium fails", True),
+        ("chk_filesize", "bool", "Check file size", True),
+        ("max_wait", "int", "Reconnect if waiting time is greater than minutes", 10),
+    ]
 
     __description__ = """Oboom.com downloader plugin"""
     __license__ = "GPLv3"
-    __authors__ = [("stanley", "stanley.foerster@gmail.com")]
+    __authors__ = [
+        ("stanley", "stanley.foerster@gmail.com"),
+        ("GammaC0de", "nitzo2001[AT]yahoo[DOT]com"),
+    ]
+
+    RECAPTCHA_KEY = "6Lc7b0IUAAAAAJ7LJfEl9rYKtcxoqyOpuiCzw0eI"
+
+    #: See https://www.oboom.com/api
+    API_URL = "https://%s.oboom.com/1/"
+
+    @classmethod
+    def api_request(cls, subdomain, method, args={}):
+        return json.loads(get_url(cls.API_URL % subdomain + method, post=args))
+
+    @classmethod
+    def api_info(cls, url):
+        info = {}
+
+        file_id = re.match(cls.__pattern__, url).group("ID")
+        res = cls.api_request("api", "info", {"items": file_id})
+        if res[0] == 200:
+            item = res[1][0]
+            if item["state"] == "online":
+                info["status"] = 2
+                info["name"] = item["name"]
+                info["size"] = item["size"]
+
+            else:
+                info["status"] = 1
+        else:
+            info["status"] = 8
+            info["error"] = "Could not retrieve file info. Error %s: %s" % (
+                res[0],
+                res[1],
+            )
 
-    RECAPTCHA_KEY = "6LdqpO0SAAAAAJGHXo63HyalP7H4qlRs_vff0kJX"
+        return info
 
     def setup(self):
         self.chunk_limit = 1
         self.multi_dl = self.resume_download = self.premium
 
-    def process(self, pyfile):
-        self.pyfile.url.replace(".com/#id=", ".com/#")
-        self.pyfile.url.replace(".com/#/", ".com/#")
-        self.data = self.load(pyfile.url)
-        self.get_file_id(self.pyfile.url)
-        self.get_session_token()
-        self.get_file_info(self.session_token, self.file_id)
-        self.pyfile.name = self.file_name
-        self.pyfile.size = self.file_size
-        if not self.premium:
-            self.solve_captcha()
-        self.get_download_ticket()
-        self.download(
-            f"http://{self.download_domain}/1.0/dlh",
-            get={"ticket": self.download_ticket, "http_errors": 0},
-        )
-
-    def load_url(self, url, get={}):
-        return json.loads(self.load(url, get))
-
-    def get_file_id(self, url):
-        self.file_id = re.match(OboomCom.__pattern__, url).group("ID")
-
     def get_session_token(self):
-        if self.premium:
-            accountInfo = self.account.get_data()
-            if "session" in accountInfo:
-                self.session_token = accountInfo["session"]
-            else:
-                self.fail(self._("Could not retrieve premium session"))
+        if self.account:
+            self.session_token = self.account.info["data"]["session"]
+
         else:
-            apiUrl = "http://www.oboom.com/1.0/guestsession"
-            result = self.load_url(apiUrl)
-            if result[0] == 200:
-                self.session_token = result[1]
+            res = self.api_request("www", "guestsession")
+            if res[0] == 200:
+                self.session_token = res[1]
+
             else:
                 self.fail(
-                    self._(
-                        "Could not retrieve token for guest session. Error code: {}"
-                    ).format(result[0])
+                    self._("Could not retrieve token for guest session. Error %s: %s")
+                    % (res[0], res[1])
                 )
 
-    def solve_captcha(self):
+    def handle_captcha(self):
         self.captcha = ReCaptcha(self.pyfile)
         response, challenge = self.captcha.challenge(self.RECAPTCHA_KEY)
 
-        apiUrl = "http://www.oboom.com/1.0/download/ticket"
-        params = {
-            "recaptcha_challenge_field": challenge,
-            "recaptcha_response_field": response,
-            "download_id": self.file_id,
-            "token": self.session_token,
-        }
-
-        result = self.load_url(apiUrl, params)
+        res = self.api_request(
+            "www",
+            "dl/ticket",
+            {
+                "recaptcha_response_field": "",
+                "g-recaptcha-response": response,
+                "download_id": self.info["pattern"]["ID"],
+                "token": self.session_token,
+            },
+        )
 
-        if result[0] == 200:
-            self.download_token = result[1]
-            self.download_auth = result[2]
+        if res[0] == 200:
+            self.download_token = res[1]
+            self.download_auth = res[2]
             self.captcha.correct()
             self.wait(30)
 
-        elif result[0] == 403:
-            if result[1] == -1:  #: Another download is running
-                wait_time = timedelta(minutes=15).seconds
+        elif res[0] == 403:
+            if res[1] == -1:  #: Another download is running
+                wait_time = 15 * 60
                 reconnect = None
+
             else:
-                wait_time = result[1]
+                wait_time = res[1]
                 reconnect = True
 
             self.wait(wait_time, reconnect=reconnect)
 
             self.retry()
 
-        elif result[0] == 400 and result[1] == "forbidden":
-            self.retry(5, timedelta(minutes=15).seconds, self._("Service unavailable"))
+        elif res[0] == 400:
+            if res[1] == "forbidden":
+                self.retry(wait=15 * 60, msg=self._("Service unavailable"))
 
-        else:
-            self.retry_captcha()
+            elif res[1] in ("incorrect-captcha-sol", "captcha-timeout"):
+                self.retry_captcha()
 
-    def get_file_info(self, token, fileId):
-        apiUrl = "http://api.oboom.com/1.0/info"
-        params = {"token": token, "items": fileId, "http_errors": 0}
-
-        result = self.load_url(apiUrl, params)
-        if result[0] == 200:
-            item = result[1][0]
-            if item["state"] == "online":
-                self.file_size = item["size"]
-                self.file_name = item["name"]
             else:
-                self.offline()
+                self.fail(self._("Unknown API Error %s") % res[1])
+
         else:
-            self.fail(
-                self._("Could not retrieve file info. Error code {}: {}").format(
-                    result[0], result[1]
-                )
-            )
+            self.fail(self._("Unknown API error, Error %s: %s") % (res[0], res[1]))
 
     def get_download_ticket(self):
-        apiUrl = "http://api.oboom.com/1/dl"
-        params = {"item": self.file_id, "http_errors": 0}
+        params = {
+            "item": self.info["pattern"]["ID"],
+            "http_errors": 0,
+            "redirect": False,
+        }
+
         if self.premium:
             params["token"] = self.session_token
+
         else:
-            params["token"] = self.download_token
-            params["auth"] = self.download_auth
+            params.update({"token": self.download_token, "auth": self.download_auth})
+
+        res = self.api_request("api", "dl", params)
+
+        if res[0] == 200:
+            self.download_domain = res[1]
+            self.download_ticket = res[2]
+
+        elif res[0] == 421:
+            self.log_warning(self._("Connection limit exceeded"))
+            self.retry(wait=res[2] + 60)
 
-        result = self.load_url(apiUrl, params)
-        if result[0] == 200:
-            self.download_domain = result[1]
-            self.download_ticket = result[2]
-        elif result[0] == 421:
-            self.retry(wait=result[2] + 60, msg=self._("Connection limit exceeded"))
         else:
             self.fail(
-                self._("Could not retrieve download ticket. Error code: {}").format(
-                    result[0]
-                )
+                self._("Could not retrieve download ticket. Error %s: %s")
+                % (res[0], res[1])
             )
+
+    def handle_free(self, pyfile):
+        self.get_session_token()
+        if not self.premium:
+            self.handle_captcha()
+        self.get_download_ticket()
+        self.download(
+            "http://%s/1/dlh" % self.download_domain,
+            get={"ticket": self.download_ticket},
+        )
+
+    def handle_premium(self, pyfile):
+        self.handle_free(self, pyfile)
