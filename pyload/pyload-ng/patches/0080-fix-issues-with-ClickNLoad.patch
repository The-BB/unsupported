From 150a3864b5e03fb468147083940559ddca8a415f Mon Sep 17 00:00:00 2001
From: GammaC0de <gammac0de@users.noreply.github.com>
Date: Sun, 13 Jun 2021 02:28:56 +0300
Subject: [PATCH 080/150] fix issues with ClickNLoad

---
 src/pyload/core/utils/misc.py           | 13 ---------
 src/pyload/plugins/addons/ClickNLoad.py | 36 ++++++++++++-------------
 src/pyload/plugins/helpers.py           | 29 +++++++++++---------
 3 files changed, 34 insertions(+), 44 deletions(-)

--- a/src/pyload/core/utils/misc.py
+++ b/src/pyload/core/utils/misc.py
@@ -45,19 +45,6 @@ def reversemap(obj):
     return obj.__class__(reversed(item) for item in obj.items())
 
 
-def forward(source, destination, buffering=1024):
-    """
-    Forward data from one socket to another
-    """
-    try:
-        rawdata = source.recv(buffering)
-        while rawdata:
-            destination.sendall(rawdata)
-            rawdata = source.recv(buffering)
-    finally:
-        destination.shutdown(socket.SHUT_WR)
-
-
 # def get_translation(domain, localedir=None, languages=None, class_=None,
 # fallback=False, codeset=None):
 # try:
--- a/src/pyload/plugins/addons/ClickNLoad.py
+++ b/src/pyload/plugins/addons/ClickNLoad.py
@@ -11,6 +11,7 @@ from ..base.addon import BaseAddon, thre
 from ..helpers import forward
 
 
+# TODO: IPv6 support
 class ClickNLoad(BaseAddon):
     __name__ = "ClickNLoad"
     __type__ = "addon"
@@ -77,8 +78,10 @@ class ClickNLoad(BaseAddon):
                 self.web_af = addr[0]
 
                 self.log_debug(
-                    self._("Backend found on {}:{}").format(
-                        self.web_addr[0], self.web_addr[1]
+                    self._("Backend found on {}://{}:{}").format(
+                        "https" if self.pyload.config.get("webui", "use_ssl") else "http",
+                        f"[{self.web_addr[0]}]" if ":" in self.web_addr[0] else self.web_addr[0],
+                        self.web_addr[1]
                     )
                 )
                 self.backend_found.set()
@@ -115,7 +118,7 @@ class ClickNLoad(BaseAddon):
                 wakeup_socket.connect(
                     (
                         "127.0.0.1"
-                        if any(ip == self.cnl_ip for ip in ("0.0.0.0", ""))
+                        if any(ip == self.cnl_ip for ip in ("0.0.0.0", "", "::"))
                         else self.cnl_ip,
                         self.cnl_port,
                     )
@@ -134,17 +137,21 @@ class ClickNLoad(BaseAddon):
 
     @lock
     @threaded
-    def forward(self, source, destination, queue=False):
+    def forward(self, client_socket, backend_socket, queue=False):
         if queue:
             old_ids = set(pack.pid for pack in self.pyload.api.get_collector())
 
-        forward(source, destination)
+        forward(client_socket, backend_socket, recv_timeout=0.5)
+        forward(backend_socket, client_socket)
 
         if queue:
             new_ids = set(pack.pid for pack in self.pyload.api.get_collector())
             for id in new_ids - old_ids:
                 self.pyload.api.push_to_queue(id)
 
+        backend_socket.close()
+        client_socket.close()
+
     @threaded
     def proxy(self):
         self.log_info(
@@ -162,7 +169,7 @@ class ClickNLoad(BaseAddon):
             with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as dock_socket:
                 dock_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                 dock_socket.bind((self.cnl_ip, self.cnl_port))
-                dock_socket.listen(5)
+                dock_socket.listen()
 
                 self.server_running = True
 
@@ -173,35 +180,26 @@ class ClickNLoad(BaseAddon):
                         host, port = client_addr
                         self.log_debug(f"Connection from {host}:{port}")
 
-                        server_socket = socket.socket(
+                        backend_socket = socket.socket(
                             self.web_af, socket.SOCK_STREAM
                         )
 
                         if self.pyload.config.get("webui", "use_ssl"):
                             try:
-                                server_socket = ssl.wrap_socket(server_socket)
-
-                            except NameError:
-                                self.log_error(
-                                    self._("Missing SSL lib"),
-                                    self._("Please disable HTTPS in pyLoad settings"),
-                                )
-                                client_socket.close()
-                                continue
+                                backend_socket = ssl.wrap_socket(backend_socket)
 
                             except Exception as exc:
                                 self.log_error(self._("SSL error: {}").format(exc))
                                 client_socket.close()
                                 continue
 
-                        server_socket.connect(self.web_addr)
+                        backend_socket.connect(self.web_addr)
 
                         self.forward(
                             client_socket,
-                            server_socket,
+                            backend_socket,
                             self.config.get("dest") == "queue",
                         )
-                        self.forward(server_socket, client_socket)
 
                     else:
                         break
--- a/src/pyload/plugins/helpers.py
+++ b/src/pyload/plugins/helpers.py
@@ -553,20 +553,25 @@ def renice(pid, value):
         pass
 
 
-def forward(source, destination):
+def forward(source, destination, recv_timeout=None, buffering=1024):
+    """
+    Forward data from one socket to another
+    """
+    timeout = source.gettimeout()
+    source.settimeout(recv_timeout)
     try:
-        bufsize = 1 << 10
-        bufdata = source.recv(bufsize)
-        while bufdata:
-            destination.sendall(bufdata)
-            bufdata = source.recv(bufsize)
-    except ConnectionResetError:
+        raw_data = source.recv(buffering)
+    except socket.timeout:
         pass
-    finally:
-        try:
-            destination.shutdown(socket.SHUT_WR)
-        except OSError:
-            pass
+    else:
+        while raw_data:
+            destination.sendall(raw_data)
+            try:
+                raw_data = source.recv(buffering)
+            except socket.timeout:
+                break
+
+    source.settimeout(timeout)
 
 
 def compute_checksum(filename, hashtype):
