From 54820d41db8e270ad97d8f01381f8946f5dc02ea Mon Sep 17 00:00:00 2001
From: GammaC0de <gammac0de@users.noreply.github.com>
Date: Wed, 16 Jun 2021 00:50:11 +0300
Subject: [PATCH 095/150] [UploadgigCom] sync with stable

---
 .../plugins/downloaders/UploadgigCom.py       | 37 ++++++++++++++++---
 1 file changed, 31 insertions(+), 6 deletions(-)

--- a/src/pyload/plugins/downloaders/UploadgigCom.py
+++ b/src/pyload/plugins/downloaders/UploadgigCom.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 
+import json
 
 from ..anticaptchas.ReCaptcha import ReCaptcha
 from ..base.simple_downloader import SimpleDownloader
@@ -8,7 +9,7 @@ from ..base.simple_downloader import Sim
 class UploadgigCom(SimpleDownloader):
     __name__ = "UploadgigCom"
     __type__ = "downloader"
-    __version__ = "0.04"
+    __version__ = "0.06"
     __status__ = "testing"
 
     __pattern__ = r"https?://(?:www\.)?uploadgig.com/file/download/\w+"
@@ -31,10 +32,6 @@ class UploadgigCom(SimpleDownloader):
 
     OFFLINE_PATTERN = r"File not found"
 
-    LOGIN_PREMIUM = (
-        True  #: Free download is not possible because they blocked noscript ReCaptcha
-    )
-
     def handle_free(self, pyfile):
         url, inputs = self.parse_html_form('id="dl_captcha_form"')
         if inputs is None:
@@ -50,4 +47,32 @@ class UploadgigCom(SimpleDownloader):
         response, challenge = recaptcha.challenge(captcha_key)
 
         inputs["g-recaptcha-response"] = response
-        self.data = self.load(self.fixurl(url), post=inputs)
+        self.data = self.load(self.fixurl(url),
+                              post=inputs)
+
+        if self.data == "m":
+            self.log_warning(self._("Max downloads for this hour reached"))
+            self.retry(wait=60*60)
+
+        elif self.data in ("fl", "rfd"):
+            self.fail(self._("File can be downloaded by premium users only"))
+
+        elif self.data == "e":
+            self.retry()
+
+        elif self.data == "0":
+            self.retry_captcha()
+
+        else:
+            try:
+                res = json.loads(self.data)
+
+            except:
+                self.fail(self._("Illegal response from the server"))
+
+            if any([_x not in res for _x in ('cd', 'fopg', 'fghre')]):
+                self.fail(self._("Illegal response from the server"))
+
+            self.wait(res['cd'])
+
+            self.link = "http://" + res['fopg'] + res['fghre'] + "/dlfile"
