From 108c7a32b94d6fe4e67fa100bd47f4fad25edb0d Mon Sep 17 00:00:00 2001
From: GammaC0de <gammac0de@users.noreply.github.com>
Date: Thu, 29 Apr 2021 03:08:15 +0300
Subject: [PATCH 001/150] [PremiumTo] sync with stable (fix #3950)

---
 src/pyload/plugins/accounts/PremiumTo.py    | 39 +++++++++----------
 src/pyload/plugins/downloaders/PremiumTo.py | 43 +++++++++++----------
 2 files changed, 42 insertions(+), 40 deletions(-)

--- a/src/pyload/plugins/accounts/PremiumTo.py
+++ b/src/pyload/plugins/accounts/PremiumTo.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 
+import json
 
 from ..base.multi_account import MultiAccount
 
@@ -25,36 +26,34 @@ class PremiumTo(MultiAccount):
         ("GammaC0de", "nitzo2001[AT]yahoo[DOT]com"),
     ]
 
-    LOGIN_FAILED_PATTERN = r"wrong username"
+    # See https://premium.to/API.html
+    API_URL = "http://api.premium.to/api/2/"
 
-    API_URL = "http://api.premium.to/api/"
-
-    def api_response(self, method, user, password):
-        return self.load(
-            self.API_URL + method + ".php", get={"username": user, "password": password}
-        )
+    def api_resquest(self, method, **kwargs):
+        return json.loads(self.load(self.API_URL + method + ".php", get=kwargs))
 
     def grab_hosters(self, user, password, data):
-        html = self.api_response("hosters", user, password)
-        return (
-            [x.strip() for x in html.replace('"', "").split(";") if x]
-            if self.req.code == 200
-            else []
-        )
+        api_data = self.api_resquest("hosts", userid=user, apikey=password)
+        return api_data["hosts"] if api_data.get("code") == 200 else []
 
     def grab_info(self, user, password, data):
-        traffic = self.api_response("straffic", user, password)
+        api_data = self.api_resquest("traffic", userid=user, apikey=password)
 
-        if self.req.code == 200:
-            # TODO: Remove `>> 10` in 0.6.x
-            trafficleft = sum(float(x) for x in traffic.split(";")) >> 10
+        if api_data.get("code") == 200:
+            trafficleft = api_data["traffic"] + api_data["specialtraffic"]
             return {"premium": True, "trafficleft": trafficleft, "validuntil": -1}
 
         else:
             return {"premium": False, "trafficleft": None, "validuntil": None}
 
     def signin(self, user, password, data):
-        self.api_response("getauthcode", user, password)
+        api_data = self.api_resquest("traffic", userid=user, apikey=password)
 
-        if self.req.code != 200:
+        if api_data["code"] != 200:
+            self.log_warning(
+                self._(
+                    "Username and password for PremiumTo should be the API userid & apikey"
+                )
+            )
+            self.log_warning(api_data["message"])
             self.fail_login()
--- a/src/pyload/plugins/downloaders/PremiumTo.py
+++ b/src/pyload/plugins/downloaders/PremiumTo.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 
-from datetime import timedelta
+import json
+import re
 
 from ..base.multi_downloader import MultiDownloader
 
@@ -8,7 +9,7 @@ from ..base.multi_downloader import Mult
 class PremiumTo(MultiDownloader):
     __name__ = "PremiumTo"
     __type__ = "downloader"
-    __version__ = "0.33"
+    __version__ = "0.36"
     __status__ = "testing"
 
     __pattern__ = r"^unmatchable$"
@@ -32,32 +33,34 @@ class PremiumTo(MultiDownloader):
 
     CHECK_TRAFFIC = True
 
+    # See https://premium.to/API.html
+    API_URL = "http://api.premium.to/api/2/"
+
     def handle_premium(self, pyfile):
         self.download(
-            "http://api.premium.to/api/getfile.php",
+            self.API_URL + "getfile.php",
             get={
-                "username": self.account.user,
-                "password": self.account.info["login"]["password"],
+                "userid": self.account.user,
+                "apikey": self.account.info["login"]["password"],
                 "link": pyfile.url,
             },
             disposition=True,
         )
 
     def check_download(self):
-        if self.scan_download({"nopremium": "No premium account available"}):
-            self.retry(60, timedelta(minutes=5).seconds, "No premium account available")
-
-        err = ""
-        if self.req.http.code == 420:
-            #: Custom error code sent - fail
-            file = encode(self.last_download)
-
-            with open(file, mode="rb") as fp:
-                err = fp.read(256).strip()
-
-            self.remove(file)
-
-        if err:
-            self.fail(err)
+        if self.scan_download(
+            {
+                "json": re.compile(
+                    rb'\A{["\']code["\']:\d+,["\']message["\']:(["\']).+?\1}\Z'
+                )
+            }
+        ):
+            with open(self.last_download, "r") as fp:
+                json_data = json.loads(fp.read())
+
+            self.remove(self.last_download)
+            self.fail(
+                self._("API error %s - %s") % (json_data["code"], json_data["message"])
+            )
 
-        return MultiDownloader.check_download(self)
+        return super().check_download()
